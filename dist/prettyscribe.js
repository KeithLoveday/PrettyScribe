/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "dist";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/app.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(/*! base64-js */ "./node_modules/base64-js/index.js")
var ieee754 = __webpack_require__(/*! ieee754 */ "./node_modules/ieee754/index.js")
var isArray = __webpack_require__(/*! isarray */ "./node_modules/buffer/node_modules/isarray/index.js")

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/buffer/node_modules/isarray/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/buffer/node_modules/isarray/index.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),

/***/ "./node_modules/jszip/dist/jszip.min.js":
/*!**********************************************!*\
  !*** ./node_modules/jszip/dist/jszip.min.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer, global, setImmediate) {var require;var require;/*!

JSZip v3.5.0 - A JavaScript class for generating and reading zip files
<http://stuartk.com/jszip>

(c) 2009-2016 Stuart Knightley <stuart [at] stuartk.com>
Dual licenced under the MIT license or GPLv3. See https://raw.github.com/Stuk/jszip/master/LICENSE.markdown.

JSZip uses the library pako released under the MIT license :
https://github.com/nodeca/pako/blob/master/LICENSE
*/

!function(t){if(true)module.exports=t();else {}}(function(){return function s(a,o,h){function u(r,t){if(!o[r]){if(!a[r]){var e="function"==typeof require&&require;if(!t&&e)return require(r,!0);if(l)return l(r,!0);var i=new Error("Cannot find module '"+r+"'");throw i.code="MODULE_NOT_FOUND",i}var n=o[r]={exports:{}};a[r][0].call(n.exports,function(t){var e=a[r][1][t];return u(e||t)},n,n.exports,s,a,o,h)}return o[r].exports}for(var l="function"==typeof require&&require,t=0;t<h.length;t++)u(h[t]);return u}({1:[function(t,e,r){"use strict";var c=t("./utils"),d=t("./support"),p="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";r.encode=function(t){for(var e,r,i,n,s,a,o,h=[],u=0,l=t.length,f=l,d="string"!==c.getTypeOf(t);u<t.length;)f=l-u,i=d?(e=t[u++],r=u<l?t[u++]:0,u<l?t[u++]:0):(e=t.charCodeAt(u++),r=u<l?t.charCodeAt(u++):0,u<l?t.charCodeAt(u++):0),n=e>>2,s=(3&e)<<4|r>>4,a=1<f?(15&r)<<2|i>>6:64,o=2<f?63&i:64,h.push(p.charAt(n)+p.charAt(s)+p.charAt(a)+p.charAt(o));return h.join("")},r.decode=function(t){var e,r,i,n,s,a,o=0,h=0,u="data:";if(t.substr(0,u.length)===u)throw new Error("Invalid base64 input, it looks like a data url.");var l,f=3*(t=t.replace(/[^A-Za-z0-9\+\/\=]/g,"")).length/4;if(t.charAt(t.length-1)===p.charAt(64)&&f--,t.charAt(t.length-2)===p.charAt(64)&&f--,f%1!=0)throw new Error("Invalid base64 input, bad content length.");for(l=d.uint8array?new Uint8Array(0|f):new Array(0|f);o<t.length;)e=p.indexOf(t.charAt(o++))<<2|(n=p.indexOf(t.charAt(o++)))>>4,r=(15&n)<<4|(s=p.indexOf(t.charAt(o++)))>>2,i=(3&s)<<6|(a=p.indexOf(t.charAt(o++))),l[h++]=e,64!==s&&(l[h++]=r),64!==a&&(l[h++]=i);return l}},{"./support":30,"./utils":32}],2:[function(t,e,r){"use strict";var i=t("./external"),n=t("./stream/DataWorker"),s=t("./stream/DataLengthProbe"),a=t("./stream/Crc32Probe");s=t("./stream/DataLengthProbe");function o(t,e,r,i,n){this.compressedSize=t,this.uncompressedSize=e,this.crc32=r,this.compression=i,this.compressedContent=n}o.prototype={getContentWorker:function(){var t=new n(i.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new s("data_length")),e=this;return t.on("end",function(){if(this.streamInfo.data_length!==e.uncompressedSize)throw new Error("Bug : uncompressed data size mismatch")}),t},getCompressedWorker:function(){return new n(i.Promise.resolve(this.compressedContent)).withStreamInfo("compressedSize",this.compressedSize).withStreamInfo("uncompressedSize",this.uncompressedSize).withStreamInfo("crc32",this.crc32).withStreamInfo("compression",this.compression)}},o.createWorkerFrom=function(t,e,r){return t.pipe(new a).pipe(new s("uncompressedSize")).pipe(e.compressWorker(r)).pipe(new s("compressedSize")).withStreamInfo("compression",e)},e.exports=o},{"./external":6,"./stream/Crc32Probe":25,"./stream/DataLengthProbe":26,"./stream/DataWorker":27}],3:[function(t,e,r){"use strict";var i=t("./stream/GenericWorker");r.STORE={magic:"\0\0",compressWorker:function(t){return new i("STORE compression")},uncompressWorker:function(){return new i("STORE decompression")}},r.DEFLATE=t("./flate")},{"./flate":7,"./stream/GenericWorker":28}],4:[function(t,e,r){"use strict";var i=t("./utils");var o=function(){for(var t,e=[],r=0;r<256;r++){t=r;for(var i=0;i<8;i++)t=1&t?3988292384^t>>>1:t>>>1;e[r]=t}return e}();e.exports=function(t,e){return void 0!==t&&t.length?"string"!==i.getTypeOf(t)?function(t,e,r,i){var n=o,s=i+r;t^=-1;for(var a=i;a<s;a++)t=t>>>8^n[255&(t^e[a])];return-1^t}(0|e,t,t.length,0):function(t,e,r,i){var n=o,s=i+r;t^=-1;for(var a=i;a<s;a++)t=t>>>8^n[255&(t^e.charCodeAt(a))];return-1^t}(0|e,t,t.length,0):0}},{"./utils":32}],5:[function(t,e,r){"use strict";r.base64=!1,r.binary=!1,r.dir=!1,r.createFolders=!0,r.date=null,r.compression=null,r.compressionOptions=null,r.comment=null,r.unixPermissions=null,r.dosPermissions=null},{}],6:[function(t,e,r){"use strict";var i=null;i="undefined"!=typeof Promise?Promise:t("lie"),e.exports={Promise:i}},{lie:37}],7:[function(t,e,r){"use strict";var i="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Uint32Array,n=t("pako"),s=t("./utils"),a=t("./stream/GenericWorker"),o=i?"uint8array":"array";function h(t,e){a.call(this,"FlateWorker/"+t),this._pako=null,this._pakoAction=t,this._pakoOptions=e,this.meta={}}r.magic="\b\0",s.inherits(h,a),h.prototype.processChunk=function(t){this.meta=t.meta,null===this._pako&&this._createPako(),this._pako.push(s.transformTo(o,t.data),!1)},h.prototype.flush=function(){a.prototype.flush.call(this),null===this._pako&&this._createPako(),this._pako.push([],!0)},h.prototype.cleanUp=function(){a.prototype.cleanUp.call(this),this._pako=null},h.prototype._createPako=function(){this._pako=new n[this._pakoAction]({raw:!0,level:this._pakoOptions.level||-1});var e=this;this._pako.onData=function(t){e.push({data:t,meta:e.meta})}},r.compressWorker=function(t){return new h("Deflate",t)},r.uncompressWorker=function(){return new h("Inflate",{})}},{"./stream/GenericWorker":28,"./utils":32,pako:38}],8:[function(t,e,r){"use strict";function A(t,e){var r,i="";for(r=0;r<e;r++)i+=String.fromCharCode(255&t),t>>>=8;return i}function i(t,e,r,i,n,s){var a,o,h=t.file,u=t.compression,l=s!==O.utf8encode,f=I.transformTo("string",s(h.name)),d=I.transformTo("string",O.utf8encode(h.name)),c=h.comment,p=I.transformTo("string",s(c)),m=I.transformTo("string",O.utf8encode(c)),_=d.length!==h.name.length,g=m.length!==c.length,b="",v="",y="",w=h.dir,k=h.date,x={crc32:0,compressedSize:0,uncompressedSize:0};e&&!r||(x.crc32=t.crc32,x.compressedSize=t.compressedSize,x.uncompressedSize=t.uncompressedSize);var S=0;e&&(S|=8),l||!_&&!g||(S|=2048);var z=0,C=0;w&&(z|=16),"UNIX"===n?(C=798,z|=function(t,e){var r=t;return t||(r=e?16893:33204),(65535&r)<<16}(h.unixPermissions,w)):(C=20,z|=function(t){return 63&(t||0)}(h.dosPermissions)),a=k.getUTCHours(),a<<=6,a|=k.getUTCMinutes(),a<<=5,a|=k.getUTCSeconds()/2,o=k.getUTCFullYear()-1980,o<<=4,o|=k.getUTCMonth()+1,o<<=5,o|=k.getUTCDate(),_&&(v=A(1,1)+A(B(f),4)+d,b+="up"+A(v.length,2)+v),g&&(y=A(1,1)+A(B(p),4)+m,b+="uc"+A(y.length,2)+y);var E="";return E+="\n\0",E+=A(S,2),E+=u.magic,E+=A(a,2),E+=A(o,2),E+=A(x.crc32,4),E+=A(x.compressedSize,4),E+=A(x.uncompressedSize,4),E+=A(f.length,2),E+=A(b.length,2),{fileRecord:R.LOCAL_FILE_HEADER+E+f+b,dirRecord:R.CENTRAL_FILE_HEADER+A(C,2)+E+A(p.length,2)+"\0\0\0\0"+A(z,4)+A(i,4)+f+b+p}}var I=t("../utils"),n=t("../stream/GenericWorker"),O=t("../utf8"),B=t("../crc32"),R=t("../signature");function s(t,e,r,i){n.call(this,"ZipFileWorker"),this.bytesWritten=0,this.zipComment=e,this.zipPlatform=r,this.encodeFileName=i,this.streamFiles=t,this.accumulate=!1,this.contentBuffer=[],this.dirRecords=[],this.currentSourceOffset=0,this.entriesCount=0,this.currentFile=null,this._sources=[]}I.inherits(s,n),s.prototype.push=function(t){var e=t.meta.percent||0,r=this.entriesCount,i=this._sources.length;this.accumulate?this.contentBuffer.push(t):(this.bytesWritten+=t.data.length,n.prototype.push.call(this,{data:t.data,meta:{currentFile:this.currentFile,percent:r?(e+100*(r-i-1))/r:100}}))},s.prototype.openedSource=function(t){this.currentSourceOffset=this.bytesWritten,this.currentFile=t.file.name;var e=this.streamFiles&&!t.file.dir;if(e){var r=i(t,e,!1,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);this.push({data:r.fileRecord,meta:{percent:0}})}else this.accumulate=!0},s.prototype.closedSource=function(t){this.accumulate=!1;var e=this.streamFiles&&!t.file.dir,r=i(t,e,!0,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);if(this.dirRecords.push(r.dirRecord),e)this.push({data:function(t){return R.DATA_DESCRIPTOR+A(t.crc32,4)+A(t.compressedSize,4)+A(t.uncompressedSize,4)}(t),meta:{percent:100}});else for(this.push({data:r.fileRecord,meta:{percent:0}});this.contentBuffer.length;)this.push(this.contentBuffer.shift());this.currentFile=null},s.prototype.flush=function(){for(var t=this.bytesWritten,e=0;e<this.dirRecords.length;e++)this.push({data:this.dirRecords[e],meta:{percent:100}});var r=this.bytesWritten-t,i=function(t,e,r,i,n){var s=I.transformTo("string",n(i));return R.CENTRAL_DIRECTORY_END+"\0\0\0\0"+A(t,2)+A(t,2)+A(e,4)+A(r,4)+A(s.length,2)+s}(this.dirRecords.length,r,t,this.zipComment,this.encodeFileName);this.push({data:i,meta:{percent:100}})},s.prototype.prepareNextSource=function(){this.previous=this._sources.shift(),this.openedSource(this.previous.streamInfo),this.isPaused?this.previous.pause():this.previous.resume()},s.prototype.registerPrevious=function(t){this._sources.push(t);var e=this;return t.on("data",function(t){e.processChunk(t)}),t.on("end",function(){e.closedSource(e.previous.streamInfo),e._sources.length?e.prepareNextSource():e.end()}),t.on("error",function(t){e.error(t)}),this},s.prototype.resume=function(){return!!n.prototype.resume.call(this)&&(!this.previous&&this._sources.length?(this.prepareNextSource(),!0):this.previous||this._sources.length||this.generatedError?void 0:(this.end(),!0))},s.prototype.error=function(t){var e=this._sources;if(!n.prototype.error.call(this,t))return!1;for(var r=0;r<e.length;r++)try{e[r].error(t)}catch(t){}return!0},s.prototype.lock=function(){n.prototype.lock.call(this);for(var t=this._sources,e=0;e<t.length;e++)t[e].lock()},e.exports=s},{"../crc32":4,"../signature":23,"../stream/GenericWorker":28,"../utf8":31,"../utils":32}],9:[function(t,e,r){"use strict";var u=t("../compressions"),i=t("./ZipFileWorker");r.generateWorker=function(t,a,e){var o=new i(a.streamFiles,e,a.platform,a.encodeFileName),h=0;try{t.forEach(function(t,e){h++;var r=function(t,e){var r=t||e,i=u[r];if(!i)throw new Error(r+" is not a valid compression method !");return i}(e.options.compression,a.compression),i=e.options.compressionOptions||a.compressionOptions||{},n=e.dir,s=e.date;e._compressWorker(r,i).withStreamInfo("file",{name:t,dir:n,date:s,comment:e.comment||"",unixPermissions:e.unixPermissions,dosPermissions:e.dosPermissions}).pipe(o)}),o.entriesCount=h}catch(t){o.error(t)}return o}},{"../compressions":3,"./ZipFileWorker":8}],10:[function(t,e,r){"use strict";function i(){if(!(this instanceof i))return new i;if(arguments.length)throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");this.files={},this.comment=null,this.root="",this.clone=function(){var t=new i;for(var e in this)"function"!=typeof this[e]&&(t[e]=this[e]);return t}}(i.prototype=t("./object")).loadAsync=t("./load"),i.support=t("./support"),i.defaults=t("./defaults"),i.version="3.5.0",i.loadAsync=function(t,e){return(new i).loadAsync(t,e)},i.external=t("./external"),e.exports=i},{"./defaults":5,"./external":6,"./load":11,"./object":15,"./support":30}],11:[function(t,e,r){"use strict";var i=t("./utils"),n=t("./external"),o=t("./utf8"),h=(i=t("./utils"),t("./zipEntries")),s=t("./stream/Crc32Probe"),u=t("./nodejsUtils");function l(i){return new n.Promise(function(t,e){var r=i.decompressed.getContentWorker().pipe(new s);r.on("error",function(t){e(t)}).on("end",function(){r.streamInfo.crc32!==i.decompressed.crc32?e(new Error("Corrupted zip : CRC32 mismatch")):t()}).resume()})}e.exports=function(t,s){var a=this;return s=i.extend(s||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:o.utf8decode}),u.isNode&&u.isStream(t)?n.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file.")):i.prepareContent("the loaded zip file",t,!0,s.optimizedBinaryString,s.base64).then(function(t){var e=new h(s);return e.load(t),e}).then(function(t){var e=[n.Promise.resolve(t)],r=t.files;if(s.checkCRC32)for(var i=0;i<r.length;i++)e.push(l(r[i]));return n.Promise.all(e)}).then(function(t){for(var e=t.shift(),r=e.files,i=0;i<r.length;i++){var n=r[i];a.file(n.fileNameStr,n.decompressed,{binary:!0,optimizedBinaryString:!0,date:n.date,dir:n.dir,comment:n.fileCommentStr.length?n.fileCommentStr:null,unixPermissions:n.unixPermissions,dosPermissions:n.dosPermissions,createFolders:s.createFolders})}return e.zipComment.length&&(a.comment=e.zipComment),a})}},{"./external":6,"./nodejsUtils":14,"./stream/Crc32Probe":25,"./utf8":31,"./utils":32,"./zipEntries":33}],12:[function(t,e,r){"use strict";var i=t("../utils"),n=t("../stream/GenericWorker");function s(t,e){n.call(this,"Nodejs stream input adapter for "+t),this._upstreamEnded=!1,this._bindStream(e)}i.inherits(s,n),s.prototype._bindStream=function(t){var e=this;(this._stream=t).pause(),t.on("data",function(t){e.push({data:t,meta:{percent:0}})}).on("error",function(t){e.isPaused?this.generatedError=t:e.error(t)}).on("end",function(){e.isPaused?e._upstreamEnded=!0:e.end()})},s.prototype.pause=function(){return!!n.prototype.pause.call(this)&&(this._stream.pause(),!0)},s.prototype.resume=function(){return!!n.prototype.resume.call(this)&&(this._upstreamEnded?this.end():this._stream.resume(),!0)},e.exports=s},{"../stream/GenericWorker":28,"../utils":32}],13:[function(t,e,r){"use strict";var n=t("readable-stream").Readable;function i(t,e,r){n.call(this,e),this._helper=t;var i=this;t.on("data",function(t,e){i.push(t)||i._helper.pause(),r&&r(e)}).on("error",function(t){i.emit("error",t)}).on("end",function(){i.push(null)})}t("../utils").inherits(i,n),i.prototype._read=function(){this._helper.resume()},e.exports=i},{"../utils":32,"readable-stream":16}],14:[function(t,e,r){"use strict";e.exports={isNode:"undefined"!=typeof Buffer,newBufferFrom:function(t,e){if(Buffer.from&&Buffer.from!==Uint8Array.from)return Buffer.from(t,e);if("number"==typeof t)throw new Error('The "data" argument must not be a number');return new Buffer(t,e)},allocBuffer:function(t){if(Buffer.alloc)return Buffer.alloc(t);var e=new Buffer(t);return e.fill(0),e},isBuffer:function(t){return Buffer.isBuffer(t)},isStream:function(t){return t&&"function"==typeof t.on&&"function"==typeof t.pause&&"function"==typeof t.resume}}},{}],15:[function(t,e,r){"use strict";function s(t,e,r){var i,n=u.getTypeOf(e),s=u.extend(r||{},f);s.date=s.date||new Date,null!==s.compression&&(s.compression=s.compression.toUpperCase()),"string"==typeof s.unixPermissions&&(s.unixPermissions=parseInt(s.unixPermissions,8)),s.unixPermissions&&16384&s.unixPermissions&&(s.dir=!0),s.dosPermissions&&16&s.dosPermissions&&(s.dir=!0),s.dir&&(t=g(t)),s.createFolders&&(i=_(t))&&b.call(this,i,!0);var a="string"===n&&!1===s.binary&&!1===s.base64;r&&void 0!==r.binary||(s.binary=!a),(e instanceof d&&0===e.uncompressedSize||s.dir||!e||0===e.length)&&(s.base64=!1,s.binary=!0,e="",s.compression="STORE",n="string");var o=null;o=e instanceof d||e instanceof l?e:p.isNode&&p.isStream(e)?new m(t,e):u.prepareContent(t,e,s.binary,s.optimizedBinaryString,s.base64);var h=new c(t,o,s);this.files[t]=h}var n=t("./utf8"),u=t("./utils"),l=t("./stream/GenericWorker"),a=t("./stream/StreamHelper"),f=t("./defaults"),d=t("./compressedObject"),c=t("./zipObject"),o=t("./generate"),p=t("./nodejsUtils"),m=t("./nodejs/NodejsStreamInputAdapter"),_=function(t){"/"===t.slice(-1)&&(t=t.substring(0,t.length-1));var e=t.lastIndexOf("/");return 0<e?t.substring(0,e):""},g=function(t){return"/"!==t.slice(-1)&&(t+="/"),t},b=function(t,e){return e=void 0!==e?e:f.createFolders,t=g(t),this.files[t]||s.call(this,t,null,{dir:!0,createFolders:e}),this.files[t]};function h(t){return"[object RegExp]"===Object.prototype.toString.call(t)}var i={load:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},forEach:function(t){var e,r,i;for(e in this.files)this.files.hasOwnProperty(e)&&(i=this.files[e],(r=e.slice(this.root.length,e.length))&&e.slice(0,this.root.length)===this.root&&t(r,i))},filter:function(r){var i=[];return this.forEach(function(t,e){r(t,e)&&i.push(e)}),i},file:function(t,e,r){if(1!==arguments.length)return t=this.root+t,s.call(this,t,e,r),this;if(h(t)){var i=t;return this.filter(function(t,e){return!e.dir&&i.test(t)})}var n=this.files[this.root+t];return n&&!n.dir?n:null},folder:function(r){if(!r)return this;if(h(r))return this.filter(function(t,e){return e.dir&&r.test(t)});var t=this.root+r,e=b.call(this,t),i=this.clone();return i.root=e.name,i},remove:function(r){r=this.root+r;var t=this.files[r];if(t||("/"!==r.slice(-1)&&(r+="/"),t=this.files[r]),t&&!t.dir)delete this.files[r];else for(var e=this.filter(function(t,e){return e.name.slice(0,r.length)===r}),i=0;i<e.length;i++)delete this.files[e[i].name];return this},generate:function(t){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},generateInternalStream:function(t){var e,r={};try{if((r=u.extend(t||{},{streamFiles:!1,compression:"STORE",compressionOptions:null,type:"",platform:"DOS",comment:null,mimeType:"application/zip",encodeFileName:n.utf8encode})).type=r.type.toLowerCase(),r.compression=r.compression.toUpperCase(),"binarystring"===r.type&&(r.type="string"),!r.type)throw new Error("No output type specified.");u.checkSupport(r.type),"darwin"!==r.platform&&"freebsd"!==r.platform&&"linux"!==r.platform&&"sunos"!==r.platform||(r.platform="UNIX"),"win32"===r.platform&&(r.platform="DOS");var i=r.comment||this.comment||"";e=o.generateWorker(this,r,i)}catch(t){(e=new l("error")).error(t)}return new a(e,r.type||"string",r.mimeType)},generateAsync:function(t,e){return this.generateInternalStream(t).accumulate(e)},generateNodeStream:function(t,e){return(t=t||{}).type||(t.type="nodebuffer"),this.generateInternalStream(t).toNodejsStream(e)}};e.exports=i},{"./compressedObject":2,"./defaults":5,"./generate":9,"./nodejs/NodejsStreamInputAdapter":12,"./nodejsUtils":14,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31,"./utils":32,"./zipObject":35}],16:[function(t,e,r){e.exports=t("stream")},{stream:void 0}],17:[function(t,e,r){"use strict";var i=t("./DataReader");function n(t){i.call(this,t);for(var e=0;e<this.data.length;e++)t[e]=255&t[e]}t("../utils").inherits(n,i),n.prototype.byteAt=function(t){return this.data[this.zero+t]},n.prototype.lastIndexOfSignature=function(t){for(var e=t.charCodeAt(0),r=t.charCodeAt(1),i=t.charCodeAt(2),n=t.charCodeAt(3),s=this.length-4;0<=s;--s)if(this.data[s]===e&&this.data[s+1]===r&&this.data[s+2]===i&&this.data[s+3]===n)return s-this.zero;return-1},n.prototype.readAndCheckSignature=function(t){var e=t.charCodeAt(0),r=t.charCodeAt(1),i=t.charCodeAt(2),n=t.charCodeAt(3),s=this.readData(4);return e===s[0]&&r===s[1]&&i===s[2]&&n===s[3]},n.prototype.readData=function(t){if(this.checkOffset(t),0===t)return[];var e=this.data.slice(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},e.exports=n},{"../utils":32,"./DataReader":18}],18:[function(t,e,r){"use strict";var i=t("../utils");function n(t){this.data=t,this.length=t.length,this.index=0,this.zero=0}n.prototype={checkOffset:function(t){this.checkIndex(this.index+t)},checkIndex:function(t){if(this.length<this.zero+t||t<0)throw new Error("End of data reached (data length = "+this.length+", asked index = "+t+"). Corrupted zip ?")},setIndex:function(t){this.checkIndex(t),this.index=t},skip:function(t){this.setIndex(this.index+t)},byteAt:function(t){},readInt:function(t){var e,r=0;for(this.checkOffset(t),e=this.index+t-1;e>=this.index;e--)r=(r<<8)+this.byteAt(e);return this.index+=t,r},readString:function(t){return i.transformTo("string",this.readData(t))},readData:function(t){},lastIndexOfSignature:function(t){},readAndCheckSignature:function(t){},readDate:function(){var t=this.readInt(4);return new Date(Date.UTC(1980+(t>>25&127),(t>>21&15)-1,t>>16&31,t>>11&31,t>>5&63,(31&t)<<1))}},e.exports=n},{"../utils":32}],19:[function(t,e,r){"use strict";var i=t("./Uint8ArrayReader");function n(t){i.call(this,t)}t("../utils").inherits(n,i),n.prototype.readData=function(t){this.checkOffset(t);var e=this.data.slice(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},e.exports=n},{"../utils":32,"./Uint8ArrayReader":21}],20:[function(t,e,r){"use strict";var i=t("./DataReader");function n(t){i.call(this,t)}t("../utils").inherits(n,i),n.prototype.byteAt=function(t){return this.data.charCodeAt(this.zero+t)},n.prototype.lastIndexOfSignature=function(t){return this.data.lastIndexOf(t)-this.zero},n.prototype.readAndCheckSignature=function(t){return t===this.readData(4)},n.prototype.readData=function(t){this.checkOffset(t);var e=this.data.slice(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},e.exports=n},{"../utils":32,"./DataReader":18}],21:[function(t,e,r){"use strict";var i=t("./ArrayReader");function n(t){i.call(this,t)}t("../utils").inherits(n,i),n.prototype.readData=function(t){if(this.checkOffset(t),0===t)return new Uint8Array(0);var e=this.data.subarray(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},e.exports=n},{"../utils":32,"./ArrayReader":17}],22:[function(t,e,r){"use strict";var i=t("../utils"),n=t("../support"),s=t("./ArrayReader"),a=t("./StringReader"),o=t("./NodeBufferReader"),h=t("./Uint8ArrayReader");e.exports=function(t){var e=i.getTypeOf(t);return i.checkSupport(e),"string"!==e||n.uint8array?"nodebuffer"===e?new o(t):n.uint8array?new h(i.transformTo("uint8array",t)):new s(i.transformTo("array",t)):new a(t)}},{"../support":30,"../utils":32,"./ArrayReader":17,"./NodeBufferReader":19,"./StringReader":20,"./Uint8ArrayReader":21}],23:[function(t,e,r){"use strict";r.LOCAL_FILE_HEADER="PK",r.CENTRAL_FILE_HEADER="PK",r.CENTRAL_DIRECTORY_END="PK",r.ZIP64_CENTRAL_DIRECTORY_LOCATOR="PK",r.ZIP64_CENTRAL_DIRECTORY_END="PK",r.DATA_DESCRIPTOR="PK\b"},{}],24:[function(t,e,r){"use strict";var i=t("./GenericWorker"),n=t("../utils");function s(t){i.call(this,"ConvertWorker to "+t),this.destType=t}n.inherits(s,i),s.prototype.processChunk=function(t){this.push({data:n.transformTo(this.destType,t.data),meta:t.meta})},e.exports=s},{"../utils":32,"./GenericWorker":28}],25:[function(t,e,r){"use strict";var i=t("./GenericWorker"),n=t("../crc32");function s(){i.call(this,"Crc32Probe"),this.withStreamInfo("crc32",0)}t("../utils").inherits(s,i),s.prototype.processChunk=function(t){this.streamInfo.crc32=n(t.data,this.streamInfo.crc32||0),this.push(t)},e.exports=s},{"../crc32":4,"../utils":32,"./GenericWorker":28}],26:[function(t,e,r){"use strict";var i=t("../utils"),n=t("./GenericWorker");function s(t){n.call(this,"DataLengthProbe for "+t),this.propName=t,this.withStreamInfo(t,0)}i.inherits(s,n),s.prototype.processChunk=function(t){if(t){var e=this.streamInfo[this.propName]||0;this.streamInfo[this.propName]=e+t.data.length}n.prototype.processChunk.call(this,t)},e.exports=s},{"../utils":32,"./GenericWorker":28}],27:[function(t,e,r){"use strict";var i=t("../utils"),n=t("./GenericWorker");function s(t){n.call(this,"DataWorker");var e=this;this.dataIsReady=!1,this.index=0,this.max=0,this.data=null,this.type="",this._tickScheduled=!1,t.then(function(t){e.dataIsReady=!0,e.data=t,e.max=t&&t.length||0,e.type=i.getTypeOf(t),e.isPaused||e._tickAndRepeat()},function(t){e.error(t)})}i.inherits(s,n),s.prototype.cleanUp=function(){n.prototype.cleanUp.call(this),this.data=null},s.prototype.resume=function(){return!!n.prototype.resume.call(this)&&(!this._tickScheduled&&this.dataIsReady&&(this._tickScheduled=!0,i.delay(this._tickAndRepeat,[],this)),!0)},s.prototype._tickAndRepeat=function(){this._tickScheduled=!1,this.isPaused||this.isFinished||(this._tick(),this.isFinished||(i.delay(this._tickAndRepeat,[],this),this._tickScheduled=!0))},s.prototype._tick=function(){if(this.isPaused||this.isFinished)return!1;var t=null,e=Math.min(this.max,this.index+16384);if(this.index>=this.max)return this.end();switch(this.type){case"string":t=this.data.substring(this.index,e);break;case"uint8array":t=this.data.subarray(this.index,e);break;case"array":case"nodebuffer":t=this.data.slice(this.index,e)}return this.index=e,this.push({data:t,meta:{percent:this.max?this.index/this.max*100:0}})},e.exports=s},{"../utils":32,"./GenericWorker":28}],28:[function(t,e,r){"use strict";function i(t){this.name=t||"default",this.streamInfo={},this.generatedError=null,this.extraStreamInfo={},this.isPaused=!0,this.isFinished=!1,this.isLocked=!1,this._listeners={data:[],end:[],error:[]},this.previous=null}i.prototype={push:function(t){this.emit("data",t)},end:function(){if(this.isFinished)return!1;this.flush();try{this.emit("end"),this.cleanUp(),this.isFinished=!0}catch(t){this.emit("error",t)}return!0},error:function(t){return!this.isFinished&&(this.isPaused?this.generatedError=t:(this.isFinished=!0,this.emit("error",t),this.previous&&this.previous.error(t),this.cleanUp()),!0)},on:function(t,e){return this._listeners[t].push(e),this},cleanUp:function(){this.streamInfo=this.generatedError=this.extraStreamInfo=null,this._listeners=[]},emit:function(t,e){if(this._listeners[t])for(var r=0;r<this._listeners[t].length;r++)this._listeners[t][r].call(this,e)},pipe:function(t){return t.registerPrevious(this)},registerPrevious:function(t){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.streamInfo=t.streamInfo,this.mergeStreamInfo(),this.previous=t;var e=this;return t.on("data",function(t){e.processChunk(t)}),t.on("end",function(){e.end()}),t.on("error",function(t){e.error(t)}),this},pause:function(){return!this.isPaused&&!this.isFinished&&(this.isPaused=!0,this.previous&&this.previous.pause(),!0)},resume:function(){if(!this.isPaused||this.isFinished)return!1;var t=this.isPaused=!1;return this.generatedError&&(this.error(this.generatedError),t=!0),this.previous&&this.previous.resume(),!t},flush:function(){},processChunk:function(t){this.push(t)},withStreamInfo:function(t,e){return this.extraStreamInfo[t]=e,this.mergeStreamInfo(),this},mergeStreamInfo:function(){for(var t in this.extraStreamInfo)this.extraStreamInfo.hasOwnProperty(t)&&(this.streamInfo[t]=this.extraStreamInfo[t])},lock:function(){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.isLocked=!0,this.previous&&this.previous.lock()},toString:function(){var t="Worker "+this.name;return this.previous?this.previous+" -> "+t:t}},e.exports=i},{}],29:[function(t,e,r){"use strict";var h=t("../utils"),n=t("./ConvertWorker"),s=t("./GenericWorker"),u=t("../base64"),i=t("../support"),a=t("../external"),o=null;if(i.nodestream)try{o=t("../nodejs/NodejsStreamOutputAdapter")}catch(t){}function l(t,o){return new a.Promise(function(e,r){var i=[],n=t._internalType,s=t._outputType,a=t._mimeType;t.on("data",function(t,e){i.push(t),o&&o(e)}).on("error",function(t){i=[],r(t)}).on("end",function(){try{var t=function(t,e,r){switch(t){case"blob":return h.newBlob(h.transformTo("arraybuffer",e),r);case"base64":return u.encode(e);default:return h.transformTo(t,e)}}(s,function(t,e){var r,i=0,n=null,s=0;for(r=0;r<e.length;r++)s+=e[r].length;switch(t){case"string":return e.join("");case"array":return Array.prototype.concat.apply([],e);case"uint8array":for(n=new Uint8Array(s),r=0;r<e.length;r++)n.set(e[r],i),i+=e[r].length;return n;case"nodebuffer":return Buffer.concat(e);default:throw new Error("concat : unsupported type '"+t+"'")}}(n,i),a);e(t)}catch(t){r(t)}i=[]}).resume()})}function f(t,e,r){var i=e;switch(e){case"blob":case"arraybuffer":i="uint8array";break;case"base64":i="string"}try{this._internalType=i,this._outputType=e,this._mimeType=r,h.checkSupport(i),this._worker=t.pipe(new n(i)),t.lock()}catch(t){this._worker=new s("error"),this._worker.error(t)}}f.prototype={accumulate:function(t){return l(this,t)},on:function(t,e){var r=this;return"data"===t?this._worker.on(t,function(t){e.call(r,t.data,t.meta)}):this._worker.on(t,function(){h.delay(e,arguments,r)}),this},resume:function(){return h.delay(this._worker.resume,[],this._worker),this},pause:function(){return this._worker.pause(),this},toNodejsStream:function(t){if(h.checkSupport("nodestream"),"nodebuffer"!==this._outputType)throw new Error(this._outputType+" is not supported by this method");return new o(this,{objectMode:"nodebuffer"!==this._outputType},t)}},e.exports=f},{"../base64":1,"../external":6,"../nodejs/NodejsStreamOutputAdapter":13,"../support":30,"../utils":32,"./ConvertWorker":24,"./GenericWorker":28}],30:[function(t,e,r){"use strict";if(r.base64=!0,r.array=!0,r.string=!0,r.arraybuffer="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof Uint8Array,r.nodebuffer="undefined"!=typeof Buffer,r.uint8array="undefined"!=typeof Uint8Array,"undefined"==typeof ArrayBuffer)r.blob=!1;else{var i=new ArrayBuffer(0);try{r.blob=0===new Blob([i],{type:"application/zip"}).size}catch(t){try{var n=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);n.append(i),r.blob=0===n.getBlob("application/zip").size}catch(t){r.blob=!1}}}try{r.nodestream=!!t("readable-stream").Readable}catch(t){r.nodestream=!1}},{"readable-stream":16}],31:[function(t,e,s){"use strict";for(var o=t("./utils"),h=t("./support"),r=t("./nodejsUtils"),i=t("./stream/GenericWorker"),u=new Array(256),n=0;n<256;n++)u[n]=252<=n?6:248<=n?5:240<=n?4:224<=n?3:192<=n?2:1;u[254]=u[254]=1;function a(){i.call(this,"utf-8 decode"),this.leftOver=null}function l(){i.call(this,"utf-8 encode")}s.utf8encode=function(t){return h.nodebuffer?r.newBufferFrom(t,"utf-8"):function(t){var e,r,i,n,s,a=t.length,o=0;for(n=0;n<a;n++)55296==(64512&(r=t.charCodeAt(n)))&&n+1<a&&56320==(64512&(i=t.charCodeAt(n+1)))&&(r=65536+(r-55296<<10)+(i-56320),n++),o+=r<128?1:r<2048?2:r<65536?3:4;for(e=h.uint8array?new Uint8Array(o):new Array(o),n=s=0;s<o;n++)55296==(64512&(r=t.charCodeAt(n)))&&n+1<a&&56320==(64512&(i=t.charCodeAt(n+1)))&&(r=65536+(r-55296<<10)+(i-56320),n++),r<128?e[s++]=r:(r<2048?e[s++]=192|r>>>6:(r<65536?e[s++]=224|r>>>12:(e[s++]=240|r>>>18,e[s++]=128|r>>>12&63),e[s++]=128|r>>>6&63),e[s++]=128|63&r);return e}(t)},s.utf8decode=function(t){return h.nodebuffer?o.transformTo("nodebuffer",t).toString("utf-8"):function(t){var e,r,i,n,s=t.length,a=new Array(2*s);for(e=r=0;e<s;)if((i=t[e++])<128)a[r++]=i;else if(4<(n=u[i]))a[r++]=65533,e+=n-1;else{for(i&=2===n?31:3===n?15:7;1<n&&e<s;)i=i<<6|63&t[e++],n--;1<n?a[r++]=65533:i<65536?a[r++]=i:(i-=65536,a[r++]=55296|i>>10&1023,a[r++]=56320|1023&i)}return a.length!==r&&(a.subarray?a=a.subarray(0,r):a.length=r),o.applyFromCharCode(a)}(t=o.transformTo(h.uint8array?"uint8array":"array",t))},o.inherits(a,i),a.prototype.processChunk=function(t){var e=o.transformTo(h.uint8array?"uint8array":"array",t.data);if(this.leftOver&&this.leftOver.length){if(h.uint8array){var r=e;(e=new Uint8Array(r.length+this.leftOver.length)).set(this.leftOver,0),e.set(r,this.leftOver.length)}else e=this.leftOver.concat(e);this.leftOver=null}var i=function(t,e){var r;for((e=e||t.length)>t.length&&(e=t.length),r=e-1;0<=r&&128==(192&t[r]);)r--;return r<0?e:0===r?e:r+u[t[r]]>e?r:e}(e),n=e;i!==e.length&&(h.uint8array?(n=e.subarray(0,i),this.leftOver=e.subarray(i,e.length)):(n=e.slice(0,i),this.leftOver=e.slice(i,e.length))),this.push({data:s.utf8decode(n),meta:t.meta})},a.prototype.flush=function(){this.leftOver&&this.leftOver.length&&(this.push({data:s.utf8decode(this.leftOver),meta:{}}),this.leftOver=null)},s.Utf8DecodeWorker=a,o.inherits(l,i),l.prototype.processChunk=function(t){this.push({data:s.utf8encode(t.data),meta:t.meta})},s.Utf8EncodeWorker=l},{"./nodejsUtils":14,"./stream/GenericWorker":28,"./support":30,"./utils":32}],32:[function(t,e,a){"use strict";var o=t("./support"),h=t("./base64"),r=t("./nodejsUtils"),i=t("set-immediate-shim"),u=t("./external");function n(t){return t}function l(t,e){for(var r=0;r<t.length;++r)e[r]=255&t.charCodeAt(r);return e}a.newBlob=function(e,r){a.checkSupport("blob");try{return new Blob([e],{type:r})}catch(t){try{var i=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);return i.append(e),i.getBlob(r)}catch(t){throw new Error("Bug : can't construct the Blob.")}}};var s={stringifyByChunk:function(t,e,r){var i=[],n=0,s=t.length;if(s<=r)return String.fromCharCode.apply(null,t);for(;n<s;)"array"===e||"nodebuffer"===e?i.push(String.fromCharCode.apply(null,t.slice(n,Math.min(n+r,s)))):i.push(String.fromCharCode.apply(null,t.subarray(n,Math.min(n+r,s)))),n+=r;return i.join("")},stringifyByChar:function(t){for(var e="",r=0;r<t.length;r++)e+=String.fromCharCode(t[r]);return e},applyCanBeUsed:{uint8array:function(){try{return o.uint8array&&1===String.fromCharCode.apply(null,new Uint8Array(1)).length}catch(t){return!1}}(),nodebuffer:function(){try{return o.nodebuffer&&1===String.fromCharCode.apply(null,r.allocBuffer(1)).length}catch(t){return!1}}()}};function f(t){var e=65536,r=a.getTypeOf(t),i=!0;if("uint8array"===r?i=s.applyCanBeUsed.uint8array:"nodebuffer"===r&&(i=s.applyCanBeUsed.nodebuffer),i)for(;1<e;)try{return s.stringifyByChunk(t,r,e)}catch(t){e=Math.floor(e/2)}return s.stringifyByChar(t)}function d(t,e){for(var r=0;r<t.length;r++)e[r]=t[r];return e}a.applyFromCharCode=f;var c={};c.string={string:n,array:function(t){return l(t,new Array(t.length))},arraybuffer:function(t){return c.string.uint8array(t).buffer},uint8array:function(t){return l(t,new Uint8Array(t.length))},nodebuffer:function(t){return l(t,r.allocBuffer(t.length))}},c.array={string:f,array:n,arraybuffer:function(t){return new Uint8Array(t).buffer},uint8array:function(t){return new Uint8Array(t)},nodebuffer:function(t){return r.newBufferFrom(t)}},c.arraybuffer={string:function(t){return f(new Uint8Array(t))},array:function(t){return d(new Uint8Array(t),new Array(t.byteLength))},arraybuffer:n,uint8array:function(t){return new Uint8Array(t)},nodebuffer:function(t){return r.newBufferFrom(new Uint8Array(t))}},c.uint8array={string:f,array:function(t){return d(t,new Array(t.length))},arraybuffer:function(t){return t.buffer},uint8array:n,nodebuffer:function(t){return r.newBufferFrom(t)}},c.nodebuffer={string:f,array:function(t){return d(t,new Array(t.length))},arraybuffer:function(t){return c.nodebuffer.uint8array(t).buffer},uint8array:function(t){return d(t,new Uint8Array(t.length))},nodebuffer:n},a.transformTo=function(t,e){if(e=e||"",!t)return e;a.checkSupport(t);var r=a.getTypeOf(e);return c[r][t](e)},a.getTypeOf=function(t){return"string"==typeof t?"string":"[object Array]"===Object.prototype.toString.call(t)?"array":o.nodebuffer&&r.isBuffer(t)?"nodebuffer":o.uint8array&&t instanceof Uint8Array?"uint8array":o.arraybuffer&&t instanceof ArrayBuffer?"arraybuffer":void 0},a.checkSupport=function(t){if(!o[t.toLowerCase()])throw new Error(t+" is not supported by this platform")},a.MAX_VALUE_16BITS=65535,a.MAX_VALUE_32BITS=-1,a.pretty=function(t){var e,r,i="";for(r=0;r<(t||"").length;r++)i+="\\x"+((e=t.charCodeAt(r))<16?"0":"")+e.toString(16).toUpperCase();return i},a.delay=function(t,e,r){i(function(){t.apply(r||null,e||[])})},a.inherits=function(t,e){function r(){}r.prototype=e.prototype,t.prototype=new r},a.extend=function(){var t,e,r={};for(t=0;t<arguments.length;t++)for(e in arguments[t])arguments[t].hasOwnProperty(e)&&void 0===r[e]&&(r[e]=arguments[t][e]);return r},a.prepareContent=function(r,t,i,n,s){return u.Promise.resolve(t).then(function(i){return o.blob&&(i instanceof Blob||-1!==["[object File]","[object Blob]"].indexOf(Object.prototype.toString.call(i)))&&"undefined"!=typeof FileReader?new u.Promise(function(e,r){var t=new FileReader;t.onload=function(t){e(t.target.result)},t.onerror=function(t){r(t.target.error)},t.readAsArrayBuffer(i)}):i}).then(function(t){var e=a.getTypeOf(t);return e?("arraybuffer"===e?t=a.transformTo("uint8array",t):"string"===e&&(s?t=h.decode(t):i&&!0!==n&&(t=function(t){return l(t,o.uint8array?new Uint8Array(t.length):new Array(t.length))}(t))),t):u.Promise.reject(new Error("Can't read the data of '"+r+"'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"))})}},{"./base64":1,"./external":6,"./nodejsUtils":14,"./support":30,"set-immediate-shim":54}],33:[function(t,e,r){"use strict";var i=t("./reader/readerFor"),n=t("./utils"),s=t("./signature"),a=t("./zipEntry"),o=(t("./utf8"),t("./support"));function h(t){this.files=[],this.loadOptions=t}h.prototype={checkSignature:function(t){if(!this.reader.readAndCheckSignature(t)){this.reader.index-=4;var e=this.reader.readString(4);throw new Error("Corrupted zip or bug: unexpected signature ("+n.pretty(e)+", expected "+n.pretty(t)+")")}},isSignature:function(t,e){var r=this.reader.index;this.reader.setIndex(t);var i=this.reader.readString(4)===e;return this.reader.setIndex(r),i},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var t=this.reader.readData(this.zipCommentLength),e=o.uint8array?"uint8array":"array",r=n.transformTo(e,t);this.zipComment=this.loadOptions.decodeFileName(r)},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.reader.skip(4),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var t,e,r,i=this.zip64EndOfCentralSize-44;0<i;)t=this.reader.readInt(2),e=this.reader.readInt(4),r=this.reader.readData(e),this.zip64ExtensibleData[t]={id:t,length:e,value:r}},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),1<this.disksCount)throw new Error("Multi-volumes zip are not supported")},readLocalFiles:function(){var t,e;for(t=0;t<this.files.length;t++)e=this.files[t],this.reader.setIndex(e.localHeaderOffset),this.checkSignature(s.LOCAL_FILE_HEADER),e.readLocalPart(this.reader),e.handleUTF8(),e.processAttributes()},readCentralDir:function(){var t;for(this.reader.setIndex(this.centralDirOffset);this.reader.readAndCheckSignature(s.CENTRAL_FILE_HEADER);)(t=new a({zip64:this.zip64},this.loadOptions)).readCentralPart(this.reader),this.files.push(t);if(this.centralDirRecords!==this.files.length&&0!==this.centralDirRecords&&0===this.files.length)throw new Error("Corrupted zip or bug: expected "+this.centralDirRecords+" records in central dir, got "+this.files.length)},readEndOfCentral:function(){var t=this.reader.lastIndexOfSignature(s.CENTRAL_DIRECTORY_END);if(t<0)throw!this.isSignature(0,s.LOCAL_FILE_HEADER)?new Error("Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html"):new Error("Corrupted zip: can't find end of central directory");this.reader.setIndex(t);var e=t;if(this.checkSignature(s.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===n.MAX_VALUE_16BITS||this.diskWithCentralDirStart===n.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===n.MAX_VALUE_16BITS||this.centralDirRecords===n.MAX_VALUE_16BITS||this.centralDirSize===n.MAX_VALUE_32BITS||this.centralDirOffset===n.MAX_VALUE_32BITS){if(this.zip64=!0,(t=this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR))<0)throw new Error("Corrupted zip: can't find the ZIP64 end of central directory locator");if(this.reader.setIndex(t),this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,s.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error("Corrupted zip: can't find the ZIP64 end of central directory");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral()}var r=this.centralDirOffset+this.centralDirSize;this.zip64&&(r+=20,r+=12+this.zip64EndOfCentralSize);var i=e-r;if(0<i)this.isSignature(e,s.CENTRAL_FILE_HEADER)||(this.reader.zero=i);else if(i<0)throw new Error("Corrupted zip: missing "+Math.abs(i)+" bytes.")},prepareReader:function(t){this.reader=i(t)},load:function(t){this.prepareReader(t),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles()}},e.exports=h},{"./reader/readerFor":22,"./signature":23,"./support":30,"./utf8":31,"./utils":32,"./zipEntry":34}],34:[function(t,e,r){"use strict";var i=t("./reader/readerFor"),s=t("./utils"),n=t("./compressedObject"),a=t("./crc32"),o=t("./utf8"),h=t("./compressions"),u=t("./support");function l(t,e){this.options=t,this.loadOptions=e}l.prototype={isEncrypted:function(){return 1==(1&this.bitFlag)},useUTF8:function(){return 2048==(2048&this.bitFlag)},readLocalPart:function(t){var e,r;if(t.skip(22),this.fileNameLength=t.readInt(2),r=t.readInt(2),this.fileName=t.readData(this.fileNameLength),t.skip(r),-1===this.compressedSize||-1===this.uncompressedSize)throw new Error("Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)");if(null===(e=function(t){for(var e in h)if(h.hasOwnProperty(e)&&h[e].magic===t)return h[e];return null}(this.compressionMethod)))throw new Error("Corrupted zip : compression "+s.pretty(this.compressionMethod)+" unknown (inner file : "+s.transformTo("string",this.fileName)+")");this.decompressed=new n(this.compressedSize,this.uncompressedSize,this.crc32,e,t.readData(this.compressedSize))},readCentralPart:function(t){this.versionMadeBy=t.readInt(2),t.skip(2),this.bitFlag=t.readInt(2),this.compressionMethod=t.readString(2),this.date=t.readDate(),this.crc32=t.readInt(4),this.compressedSize=t.readInt(4),this.uncompressedSize=t.readInt(4);var e=t.readInt(2);if(this.extraFieldsLength=t.readInt(2),this.fileCommentLength=t.readInt(2),this.diskNumberStart=t.readInt(2),this.internalFileAttributes=t.readInt(2),this.externalFileAttributes=t.readInt(4),this.localHeaderOffset=t.readInt(4),this.isEncrypted())throw new Error("Encrypted zip are not supported");t.skip(e),this.readExtraFields(t),this.parseZIP64ExtraField(t),this.fileComment=t.readData(this.fileCommentLength)},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var t=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),0==t&&(this.dosPermissions=63&this.externalFileAttributes),3==t&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||"/"!==this.fileNameStr.slice(-1)||(this.dir=!0)},parseZIP64ExtraField:function(t){if(this.extraFields[1]){var e=i(this.extraFields[1].value);this.uncompressedSize===s.MAX_VALUE_32BITS&&(this.uncompressedSize=e.readInt(8)),this.compressedSize===s.MAX_VALUE_32BITS&&(this.compressedSize=e.readInt(8)),this.localHeaderOffset===s.MAX_VALUE_32BITS&&(this.localHeaderOffset=e.readInt(8)),this.diskNumberStart===s.MAX_VALUE_32BITS&&(this.diskNumberStart=e.readInt(4))}},readExtraFields:function(t){var e,r,i,n=t.index+this.extraFieldsLength;for(this.extraFields||(this.extraFields={});t.index+4<n;)e=t.readInt(2),r=t.readInt(2),i=t.readData(r),this.extraFields[e]={id:e,length:r,value:i};t.setIndex(n)},handleUTF8:function(){var t=u.uint8array?"uint8array":"array";if(this.useUTF8())this.fileNameStr=o.utf8decode(this.fileName),this.fileCommentStr=o.utf8decode(this.fileComment);else{var e=this.findExtraFieldUnicodePath();if(null!==e)this.fileNameStr=e;else{var r=s.transformTo(t,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(r)}var i=this.findExtraFieldUnicodeComment();if(null!==i)this.fileCommentStr=i;else{var n=s.transformTo(t,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(n)}}},findExtraFieldUnicodePath:function(){var t=this.extraFields[28789];if(t){var e=i(t.value);return 1!==e.readInt(1)?null:a(this.fileName)!==e.readInt(4)?null:o.utf8decode(e.readData(t.length-5))}return null},findExtraFieldUnicodeComment:function(){var t=this.extraFields[25461];if(t){var e=i(t.value);return 1!==e.readInt(1)?null:a(this.fileComment)!==e.readInt(4)?null:o.utf8decode(e.readData(t.length-5))}return null}},e.exports=l},{"./compressedObject":2,"./compressions":3,"./crc32":4,"./reader/readerFor":22,"./support":30,"./utf8":31,"./utils":32}],35:[function(t,e,r){"use strict";function i(t,e,r){this.name=t,this.dir=r.dir,this.date=r.date,this.comment=r.comment,this.unixPermissions=r.unixPermissions,this.dosPermissions=r.dosPermissions,this._data=e,this._dataBinary=r.binary,this.options={compression:r.compression,compressionOptions:r.compressionOptions}}var s=t("./stream/StreamHelper"),n=t("./stream/DataWorker"),a=t("./utf8"),o=t("./compressedObject"),h=t("./stream/GenericWorker");i.prototype={internalStream:function(t){var e=null,r="string";try{if(!t)throw new Error("No output type specified.");var i="string"===(r=t.toLowerCase())||"text"===r;"binarystring"!==r&&"text"!==r||(r="string"),e=this._decompressWorker();var n=!this._dataBinary;n&&!i&&(e=e.pipe(new a.Utf8EncodeWorker)),!n&&i&&(e=e.pipe(new a.Utf8DecodeWorker))}catch(t){(e=new h("error")).error(t)}return new s(e,r,"")},async:function(t,e){return this.internalStream(t).accumulate(e)},nodeStream:function(t,e){return this.internalStream(t||"nodebuffer").toNodejsStream(e)},_compressWorker:function(t,e){if(this._data instanceof o&&this._data.compression.magic===t.magic)return this._data.getCompressedWorker();var r=this._decompressWorker();return this._dataBinary||(r=r.pipe(new a.Utf8EncodeWorker)),o.createWorkerFrom(r,t,e)},_decompressWorker:function(){return this._data instanceof o?this._data.getContentWorker():this._data instanceof h?this._data:new n(this._data)}};for(var u=["asText","asBinary","asNodeBuffer","asUint8Array","asArrayBuffer"],l=function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},f=0;f<u.length;f++)i.prototype[u[f]]=l;e.exports=i},{"./compressedObject":2,"./stream/DataWorker":27,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31}],36:[function(t,l,e){(function(e){"use strict";var r,i,t=e.MutationObserver||e.WebKitMutationObserver;if(t){var n=0,s=new t(u),a=e.document.createTextNode("");s.observe(a,{characterData:!0}),r=function(){a.data=n=++n%2}}else if(e.setImmediate||void 0===e.MessageChannel)r="document"in e&&"onreadystatechange"in e.document.createElement("script")?function(){var t=e.document.createElement("script");t.onreadystatechange=function(){u(),t.onreadystatechange=null,t.parentNode.removeChild(t),t=null},e.document.documentElement.appendChild(t)}:function(){setTimeout(u,0)};else{var o=new e.MessageChannel;o.port1.onmessage=u,r=function(){o.port2.postMessage(0)}}var h=[];function u(){var t,e;i=!0;for(var r=h.length;r;){for(e=h,h=[],t=-1;++t<r;)e[t]();r=h.length}i=!1}l.exports=function(t){1!==h.push(t)||i||r()}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],37:[function(t,e,r){"use strict";var n=t("immediate");function u(){}var l={},s=["REJECTED"],a=["FULFILLED"],i=["PENDING"];function o(t){if("function"!=typeof t)throw new TypeError("resolver must be a function");this.state=i,this.queue=[],this.outcome=void 0,t!==u&&c(this,t)}function h(t,e,r){this.promise=t,"function"==typeof e&&(this.onFulfilled=e,this.callFulfilled=this.otherCallFulfilled),"function"==typeof r&&(this.onRejected=r,this.callRejected=this.otherCallRejected)}function f(e,r,i){n(function(){var t;try{t=r(i)}catch(t){return l.reject(e,t)}t===e?l.reject(e,new TypeError("Cannot resolve promise with itself")):l.resolve(e,t)})}function d(t){var e=t&&t.then;if(t&&("object"==typeof t||"function"==typeof t)&&"function"==typeof e)return function(){e.apply(t,arguments)}}function c(e,t){var r=!1;function i(t){r||(r=!0,l.reject(e,t))}function n(t){r||(r=!0,l.resolve(e,t))}var s=p(function(){t(n,i)});"error"===s.status&&i(s.value)}function p(t,e){var r={};try{r.value=t(e),r.status="success"}catch(t){r.status="error",r.value=t}return r}(e.exports=o).prototype.finally=function(e){if("function"!=typeof e)return this;var r=this.constructor;return this.then(function(t){return r.resolve(e()).then(function(){return t})},function(t){return r.resolve(e()).then(function(){throw t})})},o.prototype.catch=function(t){return this.then(null,t)},o.prototype.then=function(t,e){if("function"!=typeof t&&this.state===a||"function"!=typeof e&&this.state===s)return this;var r=new this.constructor(u);this.state!==i?f(r,this.state===a?t:e,this.outcome):this.queue.push(new h(r,t,e));return r},h.prototype.callFulfilled=function(t){l.resolve(this.promise,t)},h.prototype.otherCallFulfilled=function(t){f(this.promise,this.onFulfilled,t)},h.prototype.callRejected=function(t){l.reject(this.promise,t)},h.prototype.otherCallRejected=function(t){f(this.promise,this.onRejected,t)},l.resolve=function(t,e){var r=p(d,e);if("error"===r.status)return l.reject(t,r.value);var i=r.value;if(i)c(t,i);else{t.state=a,t.outcome=e;for(var n=-1,s=t.queue.length;++n<s;)t.queue[n].callFulfilled(e)}return t},l.reject=function(t,e){t.state=s,t.outcome=e;for(var r=-1,i=t.queue.length;++r<i;)t.queue[r].callRejected(e);return t},o.resolve=function(t){if(t instanceof this)return t;return l.resolve(new this(u),t)},o.reject=function(t){var e=new this(u);return l.reject(e,t)},o.all=function(t){var r=this;if("[object Array]"!==Object.prototype.toString.call(t))return this.reject(new TypeError("must be an array"));var i=t.length,n=!1;if(!i)return this.resolve([]);var s=new Array(i),a=0,e=-1,o=new this(u);for(;++e<i;)h(t[e],e);return o;function h(t,e){r.resolve(t).then(function(t){s[e]=t,++a!==i||n||(n=!0,l.resolve(o,s))},function(t){n||(n=!0,l.reject(o,t))})}},o.race=function(t){var e=this;if("[object Array]"!==Object.prototype.toString.call(t))return this.reject(new TypeError("must be an array"));var r=t.length,i=!1;if(!r)return this.resolve([]);var n=-1,s=new this(u);for(;++n<r;)a=t[n],e.resolve(a).then(function(t){i||(i=!0,l.resolve(s,t))},function(t){i||(i=!0,l.reject(s,t))});var a;return s}},{immediate:36}],38:[function(t,e,r){"use strict";var i={};(0,t("./lib/utils/common").assign)(i,t("./lib/deflate"),t("./lib/inflate"),t("./lib/zlib/constants")),e.exports=i},{"./lib/deflate":39,"./lib/inflate":40,"./lib/utils/common":41,"./lib/zlib/constants":44}],39:[function(t,e,r){"use strict";var a=t("./zlib/deflate"),o=t("./utils/common"),h=t("./utils/strings"),n=t("./zlib/messages"),s=t("./zlib/zstream"),u=Object.prototype.toString,l=0,f=-1,d=0,c=8;function p(t){if(!(this instanceof p))return new p(t);this.options=o.assign({level:f,method:c,chunkSize:16384,windowBits:15,memLevel:8,strategy:d,to:""},t||{});var e=this.options;e.raw&&0<e.windowBits?e.windowBits=-e.windowBits:e.gzip&&0<e.windowBits&&e.windowBits<16&&(e.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new s,this.strm.avail_out=0;var r=a.deflateInit2(this.strm,e.level,e.method,e.windowBits,e.memLevel,e.strategy);if(r!==l)throw new Error(n[r]);if(e.header&&a.deflateSetHeader(this.strm,e.header),e.dictionary){var i;if(i="string"==typeof e.dictionary?h.string2buf(e.dictionary):"[object ArrayBuffer]"===u.call(e.dictionary)?new Uint8Array(e.dictionary):e.dictionary,(r=a.deflateSetDictionary(this.strm,i))!==l)throw new Error(n[r]);this._dict_set=!0}}function i(t,e){var r=new p(e);if(r.push(t,!0),r.err)throw r.msg||n[r.err];return r.result}p.prototype.push=function(t,e){var r,i,n=this.strm,s=this.options.chunkSize;if(this.ended)return!1;i=e===~~e?e:!0===e?4:0,"string"==typeof t?n.input=h.string2buf(t):"[object ArrayBuffer]"===u.call(t)?n.input=new Uint8Array(t):n.input=t,n.next_in=0,n.avail_in=n.input.length;do{if(0===n.avail_out&&(n.output=new o.Buf8(s),n.next_out=0,n.avail_out=s),1!==(r=a.deflate(n,i))&&r!==l)return this.onEnd(r),!(this.ended=!0);0!==n.avail_out&&(0!==n.avail_in||4!==i&&2!==i)||("string"===this.options.to?this.onData(h.buf2binstring(o.shrinkBuf(n.output,n.next_out))):this.onData(o.shrinkBuf(n.output,n.next_out)))}while((0<n.avail_in||0===n.avail_out)&&1!==r);return 4===i?(r=a.deflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===l):2!==i||(this.onEnd(l),!(n.avail_out=0))},p.prototype.onData=function(t){this.chunks.push(t)},p.prototype.onEnd=function(t){t===l&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=o.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},r.Deflate=p,r.deflate=i,r.deflateRaw=function(t,e){return(e=e||{}).raw=!0,i(t,e)},r.gzip=function(t,e){return(e=e||{}).gzip=!0,i(t,e)}},{"./utils/common":41,"./utils/strings":42,"./zlib/deflate":46,"./zlib/messages":51,"./zlib/zstream":53}],40:[function(t,e,r){"use strict";var d=t("./zlib/inflate"),c=t("./utils/common"),p=t("./utils/strings"),m=t("./zlib/constants"),i=t("./zlib/messages"),n=t("./zlib/zstream"),s=t("./zlib/gzheader"),_=Object.prototype.toString;function a(t){if(!(this instanceof a))return new a(t);this.options=c.assign({chunkSize:16384,windowBits:0,to:""},t||{});var e=this.options;e.raw&&0<=e.windowBits&&e.windowBits<16&&(e.windowBits=-e.windowBits,0===e.windowBits&&(e.windowBits=-15)),!(0<=e.windowBits&&e.windowBits<16)||t&&t.windowBits||(e.windowBits+=32),15<e.windowBits&&e.windowBits<48&&0==(15&e.windowBits)&&(e.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new n,this.strm.avail_out=0;var r=d.inflateInit2(this.strm,e.windowBits);if(r!==m.Z_OK)throw new Error(i[r]);this.header=new s,d.inflateGetHeader(this.strm,this.header)}function o(t,e){var r=new a(e);if(r.push(t,!0),r.err)throw r.msg||i[r.err];return r.result}a.prototype.push=function(t,e){var r,i,n,s,a,o,h=this.strm,u=this.options.chunkSize,l=this.options.dictionary,f=!1;if(this.ended)return!1;i=e===~~e?e:!0===e?m.Z_FINISH:m.Z_NO_FLUSH,"string"==typeof t?h.input=p.binstring2buf(t):"[object ArrayBuffer]"===_.call(t)?h.input=new Uint8Array(t):h.input=t,h.next_in=0,h.avail_in=h.input.length;do{if(0===h.avail_out&&(h.output=new c.Buf8(u),h.next_out=0,h.avail_out=u),(r=d.inflate(h,m.Z_NO_FLUSH))===m.Z_NEED_DICT&&l&&(o="string"==typeof l?p.string2buf(l):"[object ArrayBuffer]"===_.call(l)?new Uint8Array(l):l,r=d.inflateSetDictionary(this.strm,o)),r===m.Z_BUF_ERROR&&!0===f&&(r=m.Z_OK,f=!1),r!==m.Z_STREAM_END&&r!==m.Z_OK)return this.onEnd(r),!(this.ended=!0);h.next_out&&(0!==h.avail_out&&r!==m.Z_STREAM_END&&(0!==h.avail_in||i!==m.Z_FINISH&&i!==m.Z_SYNC_FLUSH)||("string"===this.options.to?(n=p.utf8border(h.output,h.next_out),s=h.next_out-n,a=p.buf2string(h.output,n),h.next_out=s,h.avail_out=u-s,s&&c.arraySet(h.output,h.output,n,s,0),this.onData(a)):this.onData(c.shrinkBuf(h.output,h.next_out)))),0===h.avail_in&&0===h.avail_out&&(f=!0)}while((0<h.avail_in||0===h.avail_out)&&r!==m.Z_STREAM_END);return r===m.Z_STREAM_END&&(i=m.Z_FINISH),i===m.Z_FINISH?(r=d.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===m.Z_OK):i!==m.Z_SYNC_FLUSH||(this.onEnd(m.Z_OK),!(h.avail_out=0))},a.prototype.onData=function(t){this.chunks.push(t)},a.prototype.onEnd=function(t){t===m.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=c.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},r.Inflate=a,r.inflate=o,r.inflateRaw=function(t,e){return(e=e||{}).raw=!0,o(t,e)},r.ungzip=o},{"./utils/common":41,"./utils/strings":42,"./zlib/constants":44,"./zlib/gzheader":47,"./zlib/inflate":49,"./zlib/messages":51,"./zlib/zstream":53}],41:[function(t,e,r){"use strict";var i="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;r.assign=function(t){for(var e=Array.prototype.slice.call(arguments,1);e.length;){var r=e.shift();if(r){if("object"!=typeof r)throw new TypeError(r+"must be non-object");for(var i in r)r.hasOwnProperty(i)&&(t[i]=r[i])}}return t},r.shrinkBuf=function(t,e){return t.length===e?t:t.subarray?t.subarray(0,e):(t.length=e,t)};var n={arraySet:function(t,e,r,i,n){if(e.subarray&&t.subarray)t.set(e.subarray(r,r+i),n);else for(var s=0;s<i;s++)t[n+s]=e[r+s]},flattenChunks:function(t){var e,r,i,n,s,a;for(e=i=0,r=t.length;e<r;e++)i+=t[e].length;for(a=new Uint8Array(i),e=n=0,r=t.length;e<r;e++)s=t[e],a.set(s,n),n+=s.length;return a}},s={arraySet:function(t,e,r,i,n){for(var s=0;s<i;s++)t[n+s]=e[r+s]},flattenChunks:function(t){return[].concat.apply([],t)}};r.setTyped=function(t){t?(r.Buf8=Uint8Array,r.Buf16=Uint16Array,r.Buf32=Int32Array,r.assign(r,n)):(r.Buf8=Array,r.Buf16=Array,r.Buf32=Array,r.assign(r,s))},r.setTyped(i)},{}],42:[function(t,e,r){"use strict";var h=t("./common"),n=!0,s=!0;try{String.fromCharCode.apply(null,[0])}catch(t){n=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(t){s=!1}for(var u=new h.Buf8(256),i=0;i<256;i++)u[i]=252<=i?6:248<=i?5:240<=i?4:224<=i?3:192<=i?2:1;function l(t,e){if(e<65537&&(t.subarray&&s||!t.subarray&&n))return String.fromCharCode.apply(null,h.shrinkBuf(t,e));for(var r="",i=0;i<e;i++)r+=String.fromCharCode(t[i]);return r}u[254]=u[254]=1,r.string2buf=function(t){var e,r,i,n,s,a=t.length,o=0;for(n=0;n<a;n++)55296==(64512&(r=t.charCodeAt(n)))&&n+1<a&&56320==(64512&(i=t.charCodeAt(n+1)))&&(r=65536+(r-55296<<10)+(i-56320),n++),o+=r<128?1:r<2048?2:r<65536?3:4;for(e=new h.Buf8(o),n=s=0;s<o;n++)55296==(64512&(r=t.charCodeAt(n)))&&n+1<a&&56320==(64512&(i=t.charCodeAt(n+1)))&&(r=65536+(r-55296<<10)+(i-56320),n++),r<128?e[s++]=r:(r<2048?e[s++]=192|r>>>6:(r<65536?e[s++]=224|r>>>12:(e[s++]=240|r>>>18,e[s++]=128|r>>>12&63),e[s++]=128|r>>>6&63),e[s++]=128|63&r);return e},r.buf2binstring=function(t){return l(t,t.length)},r.binstring2buf=function(t){for(var e=new h.Buf8(t.length),r=0,i=e.length;r<i;r++)e[r]=t.charCodeAt(r);return e},r.buf2string=function(t,e){var r,i,n,s,a=e||t.length,o=new Array(2*a);for(r=i=0;r<a;)if((n=t[r++])<128)o[i++]=n;else if(4<(s=u[n]))o[i++]=65533,r+=s-1;else{for(n&=2===s?31:3===s?15:7;1<s&&r<a;)n=n<<6|63&t[r++],s--;1<s?o[i++]=65533:n<65536?o[i++]=n:(n-=65536,o[i++]=55296|n>>10&1023,o[i++]=56320|1023&n)}return l(o,i)},r.utf8border=function(t,e){var r;for((e=e||t.length)>t.length&&(e=t.length),r=e-1;0<=r&&128==(192&t[r]);)r--;return r<0?e:0===r?e:r+u[t[r]]>e?r:e}},{"./common":41}],43:[function(t,e,r){"use strict";e.exports=function(t,e,r,i){for(var n=65535&t|0,s=t>>>16&65535|0,a=0;0!==r;){for(r-=a=2e3<r?2e3:r;s=s+(n=n+e[i++]|0)|0,--a;);n%=65521,s%=65521}return n|s<<16|0}},{}],44:[function(t,e,r){"use strict";e.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],45:[function(t,e,r){"use strict";var o=function(){for(var t,e=[],r=0;r<256;r++){t=r;for(var i=0;i<8;i++)t=1&t?3988292384^t>>>1:t>>>1;e[r]=t}return e}();e.exports=function(t,e,r,i){var n=o,s=i+r;t^=-1;for(var a=i;a<s;a++)t=t>>>8^n[255&(t^e[a])];return-1^t}},{}],46:[function(t,e,r){"use strict";var h,d=t("../utils/common"),u=t("./trees"),c=t("./adler32"),p=t("./crc32"),i=t("./messages"),l=0,f=4,m=0,_=-2,g=-1,b=4,n=2,v=8,y=9,s=286,a=30,o=19,w=2*s+1,k=15,x=3,S=258,z=S+x+1,C=42,E=113,A=1,I=2,O=3,B=4;function R(t,e){return t.msg=i[e],e}function T(t){return(t<<1)-(4<t?9:0)}function D(t){for(var e=t.length;0<=--e;)t[e]=0}function F(t){var e=t.state,r=e.pending;r>t.avail_out&&(r=t.avail_out),0!==r&&(d.arraySet(t.output,e.pending_buf,e.pending_out,r,t.next_out),t.next_out+=r,e.pending_out+=r,t.total_out+=r,t.avail_out-=r,e.pending-=r,0===e.pending&&(e.pending_out=0))}function N(t,e){u._tr_flush_block(t,0<=t.block_start?t.block_start:-1,t.strstart-t.block_start,e),t.block_start=t.strstart,F(t.strm)}function U(t,e){t.pending_buf[t.pending++]=e}function P(t,e){t.pending_buf[t.pending++]=e>>>8&255,t.pending_buf[t.pending++]=255&e}function L(t,e){var r,i,n=t.max_chain_length,s=t.strstart,a=t.prev_length,o=t.nice_match,h=t.strstart>t.w_size-z?t.strstart-(t.w_size-z):0,u=t.window,l=t.w_mask,f=t.prev,d=t.strstart+S,c=u[s+a-1],p=u[s+a];t.prev_length>=t.good_match&&(n>>=2),o>t.lookahead&&(o=t.lookahead);do{if(u[(r=e)+a]===p&&u[r+a-1]===c&&u[r]===u[s]&&u[++r]===u[s+1]){s+=2,r++;do{}while(u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&s<d);if(i=S-(d-s),s=d-S,a<i){if(t.match_start=e,o<=(a=i))break;c=u[s+a-1],p=u[s+a]}}}while((e=f[e&l])>h&&0!=--n);return a<=t.lookahead?a:t.lookahead}function j(t){var e,r,i,n,s,a,o,h,u,l,f=t.w_size;do{if(n=t.window_size-t.lookahead-t.strstart,t.strstart>=f+(f-z)){for(d.arraySet(t.window,t.window,f,f,0),t.match_start-=f,t.strstart-=f,t.block_start-=f,e=r=t.hash_size;i=t.head[--e],t.head[e]=f<=i?i-f:0,--r;);for(e=r=f;i=t.prev[--e],t.prev[e]=f<=i?i-f:0,--r;);n+=f}if(0===t.strm.avail_in)break;if(a=t.strm,o=t.window,h=t.strstart+t.lookahead,u=n,l=void 0,l=a.avail_in,u<l&&(l=u),r=0===l?0:(a.avail_in-=l,d.arraySet(o,a.input,a.next_in,l,h),1===a.state.wrap?a.adler=c(a.adler,o,l,h):2===a.state.wrap&&(a.adler=p(a.adler,o,l,h)),a.next_in+=l,a.total_in+=l,l),t.lookahead+=r,t.lookahead+t.insert>=x)for(s=t.strstart-t.insert,t.ins_h=t.window[s],t.ins_h=(t.ins_h<<t.hash_shift^t.window[s+1])&t.hash_mask;t.insert&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[s+x-1])&t.hash_mask,t.prev[s&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=s,s++,t.insert--,!(t.lookahead+t.insert<x)););}while(t.lookahead<z&&0!==t.strm.avail_in)}function Z(t,e){for(var r,i;;){if(t.lookahead<z){if(j(t),t.lookahead<z&&e===l)return A;if(0===t.lookahead)break}if(r=0,t.lookahead>=x&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+x-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!==r&&t.strstart-r<=t.w_size-z&&(t.match_length=L(t,r)),t.match_length>=x)if(i=u._tr_tally(t,t.strstart-t.match_start,t.match_length-x),t.lookahead-=t.match_length,t.match_length<=t.max_lazy_match&&t.lookahead>=x){for(t.match_length--;t.strstart++,t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+x-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart,0!=--t.match_length;);t.strstart++}else t.strstart+=t.match_length,t.match_length=0,t.ins_h=t.window[t.strstart],t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+1])&t.hash_mask;else i=u._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++;if(i&&(N(t,!1),0===t.strm.avail_out))return A}return t.insert=t.strstart<x-1?t.strstart:x-1,e===f?(N(t,!0),0===t.strm.avail_out?O:B):t.last_lit&&(N(t,!1),0===t.strm.avail_out)?A:I}function W(t,e){for(var r,i,n;;){if(t.lookahead<z){if(j(t),t.lookahead<z&&e===l)return A;if(0===t.lookahead)break}if(r=0,t.lookahead>=x&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+x-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),t.prev_length=t.match_length,t.prev_match=t.match_start,t.match_length=x-1,0!==r&&t.prev_length<t.max_lazy_match&&t.strstart-r<=t.w_size-z&&(t.match_length=L(t,r),t.match_length<=5&&(1===t.strategy||t.match_length===x&&4096<t.strstart-t.match_start)&&(t.match_length=x-1)),t.prev_length>=x&&t.match_length<=t.prev_length){for(n=t.strstart+t.lookahead-x,i=u._tr_tally(t,t.strstart-1-t.prev_match,t.prev_length-x),t.lookahead-=t.prev_length-1,t.prev_length-=2;++t.strstart<=n&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+x-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!=--t.prev_length;);if(t.match_available=0,t.match_length=x-1,t.strstart++,i&&(N(t,!1),0===t.strm.avail_out))return A}else if(t.match_available){if((i=u._tr_tally(t,0,t.window[t.strstart-1]))&&N(t,!1),t.strstart++,t.lookahead--,0===t.strm.avail_out)return A}else t.match_available=1,t.strstart++,t.lookahead--}return t.match_available&&(i=u._tr_tally(t,0,t.window[t.strstart-1]),t.match_available=0),t.insert=t.strstart<x-1?t.strstart:x-1,e===f?(N(t,!0),0===t.strm.avail_out?O:B):t.last_lit&&(N(t,!1),0===t.strm.avail_out)?A:I}function M(t,e,r,i,n){this.good_length=t,this.max_lazy=e,this.nice_length=r,this.max_chain=i,this.func=n}function H(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=v,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new d.Buf16(2*w),this.dyn_dtree=new d.Buf16(2*(2*a+1)),this.bl_tree=new d.Buf16(2*(2*o+1)),D(this.dyn_ltree),D(this.dyn_dtree),D(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new d.Buf16(k+1),this.heap=new d.Buf16(2*s+1),D(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new d.Buf16(2*s+1),D(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function G(t){var e;return t&&t.state?(t.total_in=t.total_out=0,t.data_type=n,(e=t.state).pending=0,e.pending_out=0,e.wrap<0&&(e.wrap=-e.wrap),e.status=e.wrap?C:E,t.adler=2===e.wrap?0:1,e.last_flush=l,u._tr_init(e),m):R(t,_)}function K(t){var e=G(t);return e===m&&function(t){t.window_size=2*t.w_size,D(t.head),t.max_lazy_match=h[t.level].max_lazy,t.good_match=h[t.level].good_length,t.nice_match=h[t.level].nice_length,t.max_chain_length=h[t.level].max_chain,t.strstart=0,t.block_start=0,t.lookahead=0,t.insert=0,t.match_length=t.prev_length=x-1,t.match_available=0,t.ins_h=0}(t.state),e}function Y(t,e,r,i,n,s){if(!t)return _;var a=1;if(e===g&&(e=6),i<0?(a=0,i=-i):15<i&&(a=2,i-=16),n<1||y<n||r!==v||i<8||15<i||e<0||9<e||s<0||b<s)return R(t,_);8===i&&(i=9);var o=new H;return(t.state=o).strm=t,o.wrap=a,o.gzhead=null,o.w_bits=i,o.w_size=1<<o.w_bits,o.w_mask=o.w_size-1,o.hash_bits=n+7,o.hash_size=1<<o.hash_bits,o.hash_mask=o.hash_size-1,o.hash_shift=~~((o.hash_bits+x-1)/x),o.window=new d.Buf8(2*o.w_size),o.head=new d.Buf16(o.hash_size),o.prev=new d.Buf16(o.w_size),o.lit_bufsize=1<<n+6,o.pending_buf_size=4*o.lit_bufsize,o.pending_buf=new d.Buf8(o.pending_buf_size),o.d_buf=1*o.lit_bufsize,o.l_buf=3*o.lit_bufsize,o.level=e,o.strategy=s,o.method=r,K(t)}h=[new M(0,0,0,0,function(t,e){var r=65535;for(r>t.pending_buf_size-5&&(r=t.pending_buf_size-5);;){if(t.lookahead<=1){if(j(t),0===t.lookahead&&e===l)return A;if(0===t.lookahead)break}t.strstart+=t.lookahead,t.lookahead=0;var i=t.block_start+r;if((0===t.strstart||t.strstart>=i)&&(t.lookahead=t.strstart-i,t.strstart=i,N(t,!1),0===t.strm.avail_out))return A;if(t.strstart-t.block_start>=t.w_size-z&&(N(t,!1),0===t.strm.avail_out))return A}return t.insert=0,e===f?(N(t,!0),0===t.strm.avail_out?O:B):(t.strstart>t.block_start&&(N(t,!1),t.strm.avail_out),A)}),new M(4,4,8,4,Z),new M(4,5,16,8,Z),new M(4,6,32,32,Z),new M(4,4,16,16,W),new M(8,16,32,32,W),new M(8,16,128,128,W),new M(8,32,128,256,W),new M(32,128,258,1024,W),new M(32,258,258,4096,W)],r.deflateInit=function(t,e){return Y(t,e,v,15,8,0)},r.deflateInit2=Y,r.deflateReset=K,r.deflateResetKeep=G,r.deflateSetHeader=function(t,e){return t&&t.state?2!==t.state.wrap?_:(t.state.gzhead=e,m):_},r.deflate=function(t,e){var r,i,n,s;if(!t||!t.state||5<e||e<0)return t?R(t,_):_;if(i=t.state,!t.output||!t.input&&0!==t.avail_in||666===i.status&&e!==f)return R(t,0===t.avail_out?-5:_);if(i.strm=t,r=i.last_flush,i.last_flush=e,i.status===C)if(2===i.wrap)t.adler=0,U(i,31),U(i,139),U(i,8),i.gzhead?(U(i,(i.gzhead.text?1:0)+(i.gzhead.hcrc?2:0)+(i.gzhead.extra?4:0)+(i.gzhead.name?8:0)+(i.gzhead.comment?16:0)),U(i,255&i.gzhead.time),U(i,i.gzhead.time>>8&255),U(i,i.gzhead.time>>16&255),U(i,i.gzhead.time>>24&255),U(i,9===i.level?2:2<=i.strategy||i.level<2?4:0),U(i,255&i.gzhead.os),i.gzhead.extra&&i.gzhead.extra.length&&(U(i,255&i.gzhead.extra.length),U(i,i.gzhead.extra.length>>8&255)),i.gzhead.hcrc&&(t.adler=p(t.adler,i.pending_buf,i.pending,0)),i.gzindex=0,i.status=69):(U(i,0),U(i,0),U(i,0),U(i,0),U(i,0),U(i,9===i.level?2:2<=i.strategy||i.level<2?4:0),U(i,3),i.status=E);else{var a=v+(i.w_bits-8<<4)<<8;a|=(2<=i.strategy||i.level<2?0:i.level<6?1:6===i.level?2:3)<<6,0!==i.strstart&&(a|=32),a+=31-a%31,i.status=E,P(i,a),0!==i.strstart&&(P(i,t.adler>>>16),P(i,65535&t.adler)),t.adler=1}if(69===i.status)if(i.gzhead.extra){for(n=i.pending;i.gzindex<(65535&i.gzhead.extra.length)&&(i.pending!==i.pending_buf_size||(i.gzhead.hcrc&&i.pending>n&&(t.adler=p(t.adler,i.pending_buf,i.pending-n,n)),F(t),n=i.pending,i.pending!==i.pending_buf_size));)U(i,255&i.gzhead.extra[i.gzindex]),i.gzindex++;i.gzhead.hcrc&&i.pending>n&&(t.adler=p(t.adler,i.pending_buf,i.pending-n,n)),i.gzindex===i.gzhead.extra.length&&(i.gzindex=0,i.status=73)}else i.status=73;if(73===i.status)if(i.gzhead.name){n=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>n&&(t.adler=p(t.adler,i.pending_buf,i.pending-n,n)),F(t),n=i.pending,i.pending===i.pending_buf_size)){s=1;break}s=i.gzindex<i.gzhead.name.length?255&i.gzhead.name.charCodeAt(i.gzindex++):0,U(i,s)}while(0!==s);i.gzhead.hcrc&&i.pending>n&&(t.adler=p(t.adler,i.pending_buf,i.pending-n,n)),0===s&&(i.gzindex=0,i.status=91)}else i.status=91;if(91===i.status)if(i.gzhead.comment){n=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>n&&(t.adler=p(t.adler,i.pending_buf,i.pending-n,n)),F(t),n=i.pending,i.pending===i.pending_buf_size)){s=1;break}s=i.gzindex<i.gzhead.comment.length?255&i.gzhead.comment.charCodeAt(i.gzindex++):0,U(i,s)}while(0!==s);i.gzhead.hcrc&&i.pending>n&&(t.adler=p(t.adler,i.pending_buf,i.pending-n,n)),0===s&&(i.status=103)}else i.status=103;if(103===i.status&&(i.gzhead.hcrc?(i.pending+2>i.pending_buf_size&&F(t),i.pending+2<=i.pending_buf_size&&(U(i,255&t.adler),U(i,t.adler>>8&255),t.adler=0,i.status=E)):i.status=E),0!==i.pending){if(F(t),0===t.avail_out)return i.last_flush=-1,m}else if(0===t.avail_in&&T(e)<=T(r)&&e!==f)return R(t,-5);if(666===i.status&&0!==t.avail_in)return R(t,-5);if(0!==t.avail_in||0!==i.lookahead||e!==l&&666!==i.status){var o=2===i.strategy?function(t,e){for(var r;;){if(0===t.lookahead&&(j(t),0===t.lookahead)){if(e===l)return A;break}if(t.match_length=0,r=u._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++,r&&(N(t,!1),0===t.strm.avail_out))return A}return t.insert=0,e===f?(N(t,!0),0===t.strm.avail_out?O:B):t.last_lit&&(N(t,!1),0===t.strm.avail_out)?A:I}(i,e):3===i.strategy?function(t,e){for(var r,i,n,s,a=t.window;;){if(t.lookahead<=S){if(j(t),t.lookahead<=S&&e===l)return A;if(0===t.lookahead)break}if(t.match_length=0,t.lookahead>=x&&0<t.strstart&&(i=a[n=t.strstart-1])===a[++n]&&i===a[++n]&&i===a[++n]){s=t.strstart+S;do{}while(i===a[++n]&&i===a[++n]&&i===a[++n]&&i===a[++n]&&i===a[++n]&&i===a[++n]&&i===a[++n]&&i===a[++n]&&n<s);t.match_length=S-(s-n),t.match_length>t.lookahead&&(t.match_length=t.lookahead)}if(t.match_length>=x?(r=u._tr_tally(t,1,t.match_length-x),t.lookahead-=t.match_length,t.strstart+=t.match_length,t.match_length=0):(r=u._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++),r&&(N(t,!1),0===t.strm.avail_out))return A}return t.insert=0,e===f?(N(t,!0),0===t.strm.avail_out?O:B):t.last_lit&&(N(t,!1),0===t.strm.avail_out)?A:I}(i,e):h[i.level].func(i,e);if(o!==O&&o!==B||(i.status=666),o===A||o===O)return 0===t.avail_out&&(i.last_flush=-1),m;if(o===I&&(1===e?u._tr_align(i):5!==e&&(u._tr_stored_block(i,0,0,!1),3===e&&(D(i.head),0===i.lookahead&&(i.strstart=0,i.block_start=0,i.insert=0))),F(t),0===t.avail_out))return i.last_flush=-1,m}return e!==f?m:i.wrap<=0?1:(2===i.wrap?(U(i,255&t.adler),U(i,t.adler>>8&255),U(i,t.adler>>16&255),U(i,t.adler>>24&255),U(i,255&t.total_in),U(i,t.total_in>>8&255),U(i,t.total_in>>16&255),U(i,t.total_in>>24&255)):(P(i,t.adler>>>16),P(i,65535&t.adler)),F(t),0<i.wrap&&(i.wrap=-i.wrap),0!==i.pending?m:1)},r.deflateEnd=function(t){var e;return t&&t.state?(e=t.state.status)!==C&&69!==e&&73!==e&&91!==e&&103!==e&&e!==E&&666!==e?R(t,_):(t.state=null,e===E?R(t,-3):m):_},r.deflateSetDictionary=function(t,e){var r,i,n,s,a,o,h,u,l=e.length;if(!t||!t.state)return _;if(2===(s=(r=t.state).wrap)||1===s&&r.status!==C||r.lookahead)return _;for(1===s&&(t.adler=c(t.adler,e,l,0)),r.wrap=0,l>=r.w_size&&(0===s&&(D(r.head),r.strstart=0,r.block_start=0,r.insert=0),u=new d.Buf8(r.w_size),d.arraySet(u,e,l-r.w_size,r.w_size,0),e=u,l=r.w_size),a=t.avail_in,o=t.next_in,h=t.input,t.avail_in=l,t.next_in=0,t.input=e,j(r);r.lookahead>=x;){for(i=r.strstart,n=r.lookahead-(x-1);r.ins_h=(r.ins_h<<r.hash_shift^r.window[i+x-1])&r.hash_mask,r.prev[i&r.w_mask]=r.head[r.ins_h],r.head[r.ins_h]=i,i++,--n;);r.strstart=i,r.lookahead=x-1,j(r)}return r.strstart+=r.lookahead,r.block_start=r.strstart,r.insert=r.lookahead,r.lookahead=0,r.match_length=r.prev_length=x-1,r.match_available=0,t.next_in=o,t.input=h,t.avail_in=a,r.wrap=s,m},r.deflateInfo="pako deflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./messages":51,"./trees":52}],47:[function(t,e,r){"use strict";e.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}},{}],48:[function(t,e,r){"use strict";e.exports=function(t,e){var r,i,n,s,a,o,h,u,l,f,d,c,p,m,_,g,b,v,y,w,k,x,S,z,C;r=t.state,i=t.next_in,z=t.input,n=i+(t.avail_in-5),s=t.next_out,C=t.output,a=s-(e-t.avail_out),o=s+(t.avail_out-257),h=r.dmax,u=r.wsize,l=r.whave,f=r.wnext,d=r.window,c=r.hold,p=r.bits,m=r.lencode,_=r.distcode,g=(1<<r.lenbits)-1,b=(1<<r.distbits)-1;t:do{p<15&&(c+=z[i++]<<p,p+=8,c+=z[i++]<<p,p+=8),v=m[c&g];e:for(;;){if(c>>>=y=v>>>24,p-=y,0===(y=v>>>16&255))C[s++]=65535&v;else{if(!(16&y)){if(0==(64&y)){v=m[(65535&v)+(c&(1<<y)-1)];continue e}if(32&y){r.mode=12;break t}t.msg="invalid literal/length code",r.mode=30;break t}w=65535&v,(y&=15)&&(p<y&&(c+=z[i++]<<p,p+=8),w+=c&(1<<y)-1,c>>>=y,p-=y),p<15&&(c+=z[i++]<<p,p+=8,c+=z[i++]<<p,p+=8),v=_[c&b];r:for(;;){if(c>>>=y=v>>>24,p-=y,!(16&(y=v>>>16&255))){if(0==(64&y)){v=_[(65535&v)+(c&(1<<y)-1)];continue r}t.msg="invalid distance code",r.mode=30;break t}if(k=65535&v,p<(y&=15)&&(c+=z[i++]<<p,(p+=8)<y&&(c+=z[i++]<<p,p+=8)),h<(k+=c&(1<<y)-1)){t.msg="invalid distance too far back",r.mode=30;break t}if(c>>>=y,p-=y,(y=s-a)<k){if(l<(y=k-y)&&r.sane){t.msg="invalid distance too far back",r.mode=30;break t}if(S=d,(x=0)===f){if(x+=u-y,y<w){for(w-=y;C[s++]=d[x++],--y;);x=s-k,S=C}}else if(f<y){if(x+=u+f-y,(y-=f)<w){for(w-=y;C[s++]=d[x++],--y;);if(x=0,f<w){for(w-=y=f;C[s++]=d[x++],--y;);x=s-k,S=C}}}else if(x+=f-y,y<w){for(w-=y;C[s++]=d[x++],--y;);x=s-k,S=C}for(;2<w;)C[s++]=S[x++],C[s++]=S[x++],C[s++]=S[x++],w-=3;w&&(C[s++]=S[x++],1<w&&(C[s++]=S[x++]))}else{for(x=s-k;C[s++]=C[x++],C[s++]=C[x++],C[s++]=C[x++],2<(w-=3););w&&(C[s++]=C[x++],1<w&&(C[s++]=C[x++]))}break}}break}}while(i<n&&s<o);i-=w=p>>3,c&=(1<<(p-=w<<3))-1,t.next_in=i,t.next_out=s,t.avail_in=i<n?n-i+5:5-(i-n),t.avail_out=s<o?o-s+257:257-(s-o),r.hold=c,r.bits=p}},{}],49:[function(t,e,r){"use strict";var I=t("../utils/common"),O=t("./adler32"),B=t("./crc32"),R=t("./inffast"),T=t("./inftrees"),D=1,F=2,N=0,U=-2,P=1,i=852,n=592;function L(t){return(t>>>24&255)+(t>>>8&65280)+((65280&t)<<8)+((255&t)<<24)}function s(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new I.Buf16(320),this.work=new I.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function a(t){var e;return t&&t.state?(e=t.state,t.total_in=t.total_out=e.total=0,t.msg="",e.wrap&&(t.adler=1&e.wrap),e.mode=P,e.last=0,e.havedict=0,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=e.lendyn=new I.Buf32(i),e.distcode=e.distdyn=new I.Buf32(n),e.sane=1,e.back=-1,N):U}function o(t){var e;return t&&t.state?((e=t.state).wsize=0,e.whave=0,e.wnext=0,a(t)):U}function h(t,e){var r,i;return t&&t.state?(i=t.state,e<0?(r=0,e=-e):(r=1+(e>>4),e<48&&(e&=15)),e&&(e<8||15<e)?U:(null!==i.window&&i.wbits!==e&&(i.window=null),i.wrap=r,i.wbits=e,o(t))):U}function u(t,e){var r,i;return t?(i=new s,(t.state=i).window=null,(r=h(t,e))!==N&&(t.state=null),r):U}var l,f,d=!0;function j(t){if(d){var e;for(l=new I.Buf32(512),f=new I.Buf32(32),e=0;e<144;)t.lens[e++]=8;for(;e<256;)t.lens[e++]=9;for(;e<280;)t.lens[e++]=7;for(;e<288;)t.lens[e++]=8;for(T(D,t.lens,0,288,l,0,t.work,{bits:9}),e=0;e<32;)t.lens[e++]=5;T(F,t.lens,0,32,f,0,t.work,{bits:5}),d=!1}t.lencode=l,t.lenbits=9,t.distcode=f,t.distbits=5}function Z(t,e,r,i){var n,s=t.state;return null===s.window&&(s.wsize=1<<s.wbits,s.wnext=0,s.whave=0,s.window=new I.Buf8(s.wsize)),i>=s.wsize?(I.arraySet(s.window,e,r-s.wsize,s.wsize,0),s.wnext=0,s.whave=s.wsize):(i<(n=s.wsize-s.wnext)&&(n=i),I.arraySet(s.window,e,r-i,n,s.wnext),(i-=n)?(I.arraySet(s.window,e,r-i,i,0),s.wnext=i,s.whave=s.wsize):(s.wnext+=n,s.wnext===s.wsize&&(s.wnext=0),s.whave<s.wsize&&(s.whave+=n))),0}r.inflateReset=o,r.inflateReset2=h,r.inflateResetKeep=a,r.inflateInit=function(t){return u(t,15)},r.inflateInit2=u,r.inflate=function(t,e){var r,i,n,s,a,o,h,u,l,f,d,c,p,m,_,g,b,v,y,w,k,x,S,z,C=0,E=new I.Buf8(4),A=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!t||!t.state||!t.output||!t.input&&0!==t.avail_in)return U;12===(r=t.state).mode&&(r.mode=13),a=t.next_out,n=t.output,h=t.avail_out,s=t.next_in,i=t.input,o=t.avail_in,u=r.hold,l=r.bits,f=o,d=h,x=N;t:for(;;)switch(r.mode){case P:if(0===r.wrap){r.mode=13;break}for(;l<16;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if(2&r.wrap&&35615===u){E[r.check=0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0),l=u=0,r.mode=2;break}if(r.flags=0,r.head&&(r.head.done=!1),!(1&r.wrap)||(((255&u)<<8)+(u>>8))%31){t.msg="incorrect header check",r.mode=30;break}if(8!=(15&u)){t.msg="unknown compression method",r.mode=30;break}if(l-=4,k=8+(15&(u>>>=4)),0===r.wbits)r.wbits=k;else if(k>r.wbits){t.msg="invalid window size",r.mode=30;break}r.dmax=1<<k,t.adler=r.check=1,r.mode=512&u?10:12,l=u=0;break;case 2:for(;l<16;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if(r.flags=u,8!=(255&r.flags)){t.msg="unknown compression method",r.mode=30;break}if(57344&r.flags){t.msg="unknown header flags set",r.mode=30;break}r.head&&(r.head.text=u>>8&1),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0)),l=u=0,r.mode=3;case 3:for(;l<32;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}r.head&&(r.head.time=u),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,E[2]=u>>>16&255,E[3]=u>>>24&255,r.check=B(r.check,E,4,0)),l=u=0,r.mode=4;case 4:for(;l<16;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}r.head&&(r.head.xflags=255&u,r.head.os=u>>8),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0)),l=u=0,r.mode=5;case 5:if(1024&r.flags){for(;l<16;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}r.length=u,r.head&&(r.head.extra_len=u),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0)),l=u=0}else r.head&&(r.head.extra=null);r.mode=6;case 6:if(1024&r.flags&&(o<(c=r.length)&&(c=o),c&&(r.head&&(k=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Array(r.head.extra_len)),I.arraySet(r.head.extra,i,s,c,k)),512&r.flags&&(r.check=B(r.check,i,c,s)),o-=c,s+=c,r.length-=c),r.length))break t;r.length=0,r.mode=7;case 7:if(2048&r.flags){if(0===o)break t;for(c=0;k=i[s+c++],r.head&&k&&r.length<65536&&(r.head.name+=String.fromCharCode(k)),k&&c<o;);if(512&r.flags&&(r.check=B(r.check,i,c,s)),o-=c,s+=c,k)break t}else r.head&&(r.head.name=null);r.length=0,r.mode=8;case 8:if(4096&r.flags){if(0===o)break t;for(c=0;k=i[s+c++],r.head&&k&&r.length<65536&&(r.head.comment+=String.fromCharCode(k)),k&&c<o;);if(512&r.flags&&(r.check=B(r.check,i,c,s)),o-=c,s+=c,k)break t}else r.head&&(r.head.comment=null);r.mode=9;case 9:if(512&r.flags){for(;l<16;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if(u!==(65535&r.check)){t.msg="header crc mismatch",r.mode=30;break}l=u=0}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),t.adler=r.check=0,r.mode=12;break;case 10:for(;l<32;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}t.adler=r.check=L(u),l=u=0,r.mode=11;case 11:if(0===r.havedict)return t.next_out=a,t.avail_out=h,t.next_in=s,t.avail_in=o,r.hold=u,r.bits=l,2;t.adler=r.check=1,r.mode=12;case 12:if(5===e||6===e)break t;case 13:if(r.last){u>>>=7&l,l-=7&l,r.mode=27;break}for(;l<3;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}switch(r.last=1&u,l-=1,3&(u>>>=1)){case 0:r.mode=14;break;case 1:if(j(r),r.mode=20,6!==e)break;u>>>=2,l-=2;break t;case 2:r.mode=17;break;case 3:t.msg="invalid block type",r.mode=30}u>>>=2,l-=2;break;case 14:for(u>>>=7&l,l-=7&l;l<32;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if((65535&u)!=(u>>>16^65535)){t.msg="invalid stored block lengths",r.mode=30;break}if(r.length=65535&u,l=u=0,r.mode=15,6===e)break t;case 15:r.mode=16;case 16:if(c=r.length){if(o<c&&(c=o),h<c&&(c=h),0===c)break t;I.arraySet(n,i,s,c,a),o-=c,s+=c,h-=c,a+=c,r.length-=c;break}r.mode=12;break;case 17:for(;l<14;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if(r.nlen=257+(31&u),u>>>=5,l-=5,r.ndist=1+(31&u),u>>>=5,l-=5,r.ncode=4+(15&u),u>>>=4,l-=4,286<r.nlen||30<r.ndist){t.msg="too many length or distance symbols",r.mode=30;break}r.have=0,r.mode=18;case 18:for(;r.have<r.ncode;){for(;l<3;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}r.lens[A[r.have++]]=7&u,u>>>=3,l-=3}for(;r.have<19;)r.lens[A[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,S={bits:r.lenbits},x=T(0,r.lens,0,19,r.lencode,0,r.work,S),r.lenbits=S.bits,x){t.msg="invalid code lengths set",r.mode=30;break}r.have=0,r.mode=19;case 19:for(;r.have<r.nlen+r.ndist;){for(;g=(C=r.lencode[u&(1<<r.lenbits)-1])>>>16&255,b=65535&C,!((_=C>>>24)<=l);){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if(b<16)u>>>=_,l-=_,r.lens[r.have++]=b;else{if(16===b){for(z=_+2;l<z;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if(u>>>=_,l-=_,0===r.have){t.msg="invalid bit length repeat",r.mode=30;break}k=r.lens[r.have-1],c=3+(3&u),u>>>=2,l-=2}else if(17===b){for(z=_+3;l<z;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}l-=_,k=0,c=3+(7&(u>>>=_)),u>>>=3,l-=3}else{for(z=_+7;l<z;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}l-=_,k=0,c=11+(127&(u>>>=_)),u>>>=7,l-=7}if(r.have+c>r.nlen+r.ndist){t.msg="invalid bit length repeat",r.mode=30;break}for(;c--;)r.lens[r.have++]=k}}if(30===r.mode)break;if(0===r.lens[256]){t.msg="invalid code -- missing end-of-block",r.mode=30;break}if(r.lenbits=9,S={bits:r.lenbits},x=T(D,r.lens,0,r.nlen,r.lencode,0,r.work,S),r.lenbits=S.bits,x){t.msg="invalid literal/lengths set",r.mode=30;break}if(r.distbits=6,r.distcode=r.distdyn,S={bits:r.distbits},x=T(F,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,S),r.distbits=S.bits,x){t.msg="invalid distances set",r.mode=30;break}if(r.mode=20,6===e)break t;case 20:r.mode=21;case 21:if(6<=o&&258<=h){t.next_out=a,t.avail_out=h,t.next_in=s,t.avail_in=o,r.hold=u,r.bits=l,R(t,d),a=t.next_out,n=t.output,h=t.avail_out,s=t.next_in,i=t.input,o=t.avail_in,u=r.hold,l=r.bits,12===r.mode&&(r.back=-1);break}for(r.back=0;g=(C=r.lencode[u&(1<<r.lenbits)-1])>>>16&255,b=65535&C,!((_=C>>>24)<=l);){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if(g&&0==(240&g)){for(v=_,y=g,w=b;g=(C=r.lencode[w+((u&(1<<v+y)-1)>>v)])>>>16&255,b=65535&C,!(v+(_=C>>>24)<=l);){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}u>>>=v,l-=v,r.back+=v}if(u>>>=_,l-=_,r.back+=_,r.length=b,0===g){r.mode=26;break}if(32&g){r.back=-1,r.mode=12;break}if(64&g){t.msg="invalid literal/length code",r.mode=30;break}r.extra=15&g,r.mode=22;case 22:if(r.extra){for(z=r.extra;l<z;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}r.length+=u&(1<<r.extra)-1,u>>>=r.extra,l-=r.extra,r.back+=r.extra}r.was=r.length,r.mode=23;case 23:for(;g=(C=r.distcode[u&(1<<r.distbits)-1])>>>16&255,b=65535&C,!((_=C>>>24)<=l);){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if(0==(240&g)){for(v=_,y=g,w=b;g=(C=r.distcode[w+((u&(1<<v+y)-1)>>v)])>>>16&255,b=65535&C,!(v+(_=C>>>24)<=l);){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}u>>>=v,l-=v,r.back+=v}if(u>>>=_,l-=_,r.back+=_,64&g){t.msg="invalid distance code",r.mode=30;break}r.offset=b,r.extra=15&g,r.mode=24;case 24:if(r.extra){for(z=r.extra;l<z;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}r.offset+=u&(1<<r.extra)-1,u>>>=r.extra,l-=r.extra,r.back+=r.extra}if(r.offset>r.dmax){t.msg="invalid distance too far back",r.mode=30;break}r.mode=25;case 25:if(0===h)break t;if(c=d-h,r.offset>c){if((c=r.offset-c)>r.whave&&r.sane){t.msg="invalid distance too far back",r.mode=30;break}p=c>r.wnext?(c-=r.wnext,r.wsize-c):r.wnext-c,c>r.length&&(c=r.length),m=r.window}else m=n,p=a-r.offset,c=r.length;for(h<c&&(c=h),h-=c,r.length-=c;n[a++]=m[p++],--c;);0===r.length&&(r.mode=21);break;case 26:if(0===h)break t;n[a++]=r.length,h--,r.mode=21;break;case 27:if(r.wrap){for(;l<32;){if(0===o)break t;o--,u|=i[s++]<<l,l+=8}if(d-=h,t.total_out+=d,r.total+=d,d&&(t.adler=r.check=r.flags?B(r.check,n,d,a-d):O(r.check,n,d,a-d)),d=h,(r.flags?u:L(u))!==r.check){t.msg="incorrect data check",r.mode=30;break}l=u=0}r.mode=28;case 28:if(r.wrap&&r.flags){for(;l<32;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if(u!==(4294967295&r.total)){t.msg="incorrect length check",r.mode=30;break}l=u=0}r.mode=29;case 29:x=1;break t;case 30:x=-3;break t;case 31:return-4;case 32:default:return U}return t.next_out=a,t.avail_out=h,t.next_in=s,t.avail_in=o,r.hold=u,r.bits=l,(r.wsize||d!==t.avail_out&&r.mode<30&&(r.mode<27||4!==e))&&Z(t,t.output,t.next_out,d-t.avail_out)?(r.mode=31,-4):(f-=t.avail_in,d-=t.avail_out,t.total_in+=f,t.total_out+=d,r.total+=d,r.wrap&&d&&(t.adler=r.check=r.flags?B(r.check,n,d,t.next_out-d):O(r.check,n,d,t.next_out-d)),t.data_type=r.bits+(r.last?64:0)+(12===r.mode?128:0)+(20===r.mode||15===r.mode?256:0),(0==f&&0===d||4===e)&&x===N&&(x=-5),x)},r.inflateEnd=function(t){if(!t||!t.state)return U;var e=t.state;return e.window&&(e.window=null),t.state=null,N},r.inflateGetHeader=function(t,e){var r;return t&&t.state?0==(2&(r=t.state).wrap)?U:((r.head=e).done=!1,N):U},r.inflateSetDictionary=function(t,e){var r,i=e.length;return t&&t.state?0!==(r=t.state).wrap&&11!==r.mode?U:11===r.mode&&O(1,e,i,0)!==r.check?-3:Z(t,e,i,i)?(r.mode=31,-4):(r.havedict=1,N):U},r.inflateInfo="pako inflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./inffast":48,"./inftrees":50}],50:[function(t,e,r){"use strict";var D=t("../utils/common"),F=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],N=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],U=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],P=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];e.exports=function(t,e,r,i,n,s,a,o){var h,u,l,f,d,c,p,m,_,g=o.bits,b=0,v=0,y=0,w=0,k=0,x=0,S=0,z=0,C=0,E=0,A=null,I=0,O=new D.Buf16(16),B=new D.Buf16(16),R=null,T=0;for(b=0;b<=15;b++)O[b]=0;for(v=0;v<i;v++)O[e[r+v]]++;for(k=g,w=15;1<=w&&0===O[w];w--);if(w<k&&(k=w),0===w)return n[s++]=20971520,n[s++]=20971520,o.bits=1,0;for(y=1;y<w&&0===O[y];y++);for(k<y&&(k=y),b=z=1;b<=15;b++)if(z<<=1,(z-=O[b])<0)return-1;if(0<z&&(0===t||1!==w))return-1;for(B[1]=0,b=1;b<15;b++)B[b+1]=B[b]+O[b];for(v=0;v<i;v++)0!==e[r+v]&&(a[B[e[r+v]]++]=v);if(c=0===t?(A=R=a,19):1===t?(A=F,I-=257,R=N,T-=257,256):(A=U,R=P,-1),b=y,d=s,S=v=E=0,l=-1,f=(C=1<<(x=k))-1,1===t&&852<C||2===t&&592<C)return 1;for(;;){for(p=b-S,_=a[v]<c?(m=0,a[v]):a[v]>c?(m=R[T+a[v]],A[I+a[v]]):(m=96,0),h=1<<b-S,y=u=1<<x;n[d+(E>>S)+(u-=h)]=p<<24|m<<16|_|0,0!==u;);for(h=1<<b-1;E&h;)h>>=1;if(0!==h?(E&=h-1,E+=h):E=0,v++,0==--O[b]){if(b===w)break;b=e[r+a[v]]}if(k<b&&(E&f)!==l){for(0===S&&(S=k),d+=y,z=1<<(x=b-S);x+S<w&&!((z-=O[x+S])<=0);)x++,z<<=1;if(C+=1<<x,1===t&&852<C||2===t&&592<C)return 1;n[l=E&f]=k<<24|x<<16|d-s|0}}return 0!==E&&(n[d+E]=b-S<<24|64<<16|0),o.bits=k,0}},{"../utils/common":41}],51:[function(t,e,r){"use strict";e.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},{}],52:[function(t,e,r){"use strict";var n=t("../utils/common"),o=0,h=1;function i(t){for(var e=t.length;0<=--e;)t[e]=0}var s=0,a=29,u=256,l=u+1+a,f=30,d=19,_=2*l+1,g=15,c=16,p=7,m=256,b=16,v=17,y=18,w=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],k=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],x=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],S=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],z=new Array(2*(l+2));i(z);var C=new Array(2*f);i(C);var E=new Array(512);i(E);var A=new Array(256);i(A);var I=new Array(a);i(I);var O,B,R,T=new Array(f);function D(t,e,r,i,n){this.static_tree=t,this.extra_bits=e,this.extra_base=r,this.elems=i,this.max_length=n,this.has_stree=t&&t.length}function F(t,e){this.dyn_tree=t,this.max_code=0,this.stat_desc=e}function N(t){return t<256?E[t]:E[256+(t>>>7)]}function U(t,e){t.pending_buf[t.pending++]=255&e,t.pending_buf[t.pending++]=e>>>8&255}function P(t,e,r){t.bi_valid>c-r?(t.bi_buf|=e<<t.bi_valid&65535,U(t,t.bi_buf),t.bi_buf=e>>c-t.bi_valid,t.bi_valid+=r-c):(t.bi_buf|=e<<t.bi_valid&65535,t.bi_valid+=r)}function L(t,e,r){P(t,r[2*e],r[2*e+1])}function j(t,e){for(var r=0;r|=1&t,t>>>=1,r<<=1,0<--e;);return r>>>1}function Z(t,e,r){var i,n,s=new Array(g+1),a=0;for(i=1;i<=g;i++)s[i]=a=a+r[i-1]<<1;for(n=0;n<=e;n++){var o=t[2*n+1];0!==o&&(t[2*n]=j(s[o]++,o))}}function W(t){var e;for(e=0;e<l;e++)t.dyn_ltree[2*e]=0;for(e=0;e<f;e++)t.dyn_dtree[2*e]=0;for(e=0;e<d;e++)t.bl_tree[2*e]=0;t.dyn_ltree[2*m]=1,t.opt_len=t.static_len=0,t.last_lit=t.matches=0}function M(t){8<t.bi_valid?U(t,t.bi_buf):0<t.bi_valid&&(t.pending_buf[t.pending++]=t.bi_buf),t.bi_buf=0,t.bi_valid=0}function H(t,e,r,i){var n=2*e,s=2*r;return t[n]<t[s]||t[n]===t[s]&&i[e]<=i[r]}function G(t,e,r){for(var i=t.heap[r],n=r<<1;n<=t.heap_len&&(n<t.heap_len&&H(e,t.heap[n+1],t.heap[n],t.depth)&&n++,!H(e,i,t.heap[n],t.depth));)t.heap[r]=t.heap[n],r=n,n<<=1;t.heap[r]=i}function K(t,e,r){var i,n,s,a,o=0;if(0!==t.last_lit)for(;i=t.pending_buf[t.d_buf+2*o]<<8|t.pending_buf[t.d_buf+2*o+1],n=t.pending_buf[t.l_buf+o],o++,0===i?L(t,n,e):(L(t,(s=A[n])+u+1,e),0!==(a=w[s])&&P(t,n-=I[s],a),L(t,s=N(--i),r),0!==(a=k[s])&&P(t,i-=T[s],a)),o<t.last_lit;);L(t,m,e)}function Y(t,e){var r,i,n,s=e.dyn_tree,a=e.stat_desc.static_tree,o=e.stat_desc.has_stree,h=e.stat_desc.elems,u=-1;for(t.heap_len=0,t.heap_max=_,r=0;r<h;r++)0!==s[2*r]?(t.heap[++t.heap_len]=u=r,t.depth[r]=0):s[2*r+1]=0;for(;t.heap_len<2;)s[2*(n=t.heap[++t.heap_len]=u<2?++u:0)]=1,t.depth[n]=0,t.opt_len--,o&&(t.static_len-=a[2*n+1]);for(e.max_code=u,r=t.heap_len>>1;1<=r;r--)G(t,s,r);for(n=h;r=t.heap[1],t.heap[1]=t.heap[t.heap_len--],G(t,s,1),i=t.heap[1],t.heap[--t.heap_max]=r,t.heap[--t.heap_max]=i,s[2*n]=s[2*r]+s[2*i],t.depth[n]=(t.depth[r]>=t.depth[i]?t.depth[r]:t.depth[i])+1,s[2*r+1]=s[2*i+1]=n,t.heap[1]=n++,G(t,s,1),2<=t.heap_len;);t.heap[--t.heap_max]=t.heap[1],function(t,e){var r,i,n,s,a,o,h=e.dyn_tree,u=e.max_code,l=e.stat_desc.static_tree,f=e.stat_desc.has_stree,d=e.stat_desc.extra_bits,c=e.stat_desc.extra_base,p=e.stat_desc.max_length,m=0;for(s=0;s<=g;s++)t.bl_count[s]=0;for(h[2*t.heap[t.heap_max]+1]=0,r=t.heap_max+1;r<_;r++)p<(s=h[2*h[2*(i=t.heap[r])+1]+1]+1)&&(s=p,m++),h[2*i+1]=s,u<i||(t.bl_count[s]++,a=0,c<=i&&(a=d[i-c]),o=h[2*i],t.opt_len+=o*(s+a),f&&(t.static_len+=o*(l[2*i+1]+a)));if(0!==m){do{for(s=p-1;0===t.bl_count[s];)s--;t.bl_count[s]--,t.bl_count[s+1]+=2,t.bl_count[p]--,m-=2}while(0<m);for(s=p;0!==s;s--)for(i=t.bl_count[s];0!==i;)u<(n=t.heap[--r])||(h[2*n+1]!==s&&(t.opt_len+=(s-h[2*n+1])*h[2*n],h[2*n+1]=s),i--)}}(t,e),Z(s,u,t.bl_count)}function X(t,e,r){var i,n,s=-1,a=e[1],o=0,h=7,u=4;for(0===a&&(h=138,u=3),e[2*(r+1)+1]=65535,i=0;i<=r;i++)n=a,a=e[2*(i+1)+1],++o<h&&n===a||(o<u?t.bl_tree[2*n]+=o:0!==n?(n!==s&&t.bl_tree[2*n]++,t.bl_tree[2*b]++):o<=10?t.bl_tree[2*v]++:t.bl_tree[2*y]++,s=n,u=(o=0)===a?(h=138,3):n===a?(h=6,3):(h=7,4))}function V(t,e,r){var i,n,s=-1,a=e[1],o=0,h=7,u=4;for(0===a&&(h=138,u=3),i=0;i<=r;i++)if(n=a,a=e[2*(i+1)+1],!(++o<h&&n===a)){if(o<u)for(;L(t,n,t.bl_tree),0!=--o;);else 0!==n?(n!==s&&(L(t,n,t.bl_tree),o--),L(t,b,t.bl_tree),P(t,o-3,2)):o<=10?(L(t,v,t.bl_tree),P(t,o-3,3)):(L(t,y,t.bl_tree),P(t,o-11,7));s=n,u=(o=0)===a?(h=138,3):n===a?(h=6,3):(h=7,4)}}i(T);var q=!1;function J(t,e,r,i){P(t,(s<<1)+(i?1:0),3),function(t,e,r,i){M(t),i&&(U(t,r),U(t,~r)),n.arraySet(t.pending_buf,t.window,e,r,t.pending),t.pending+=r}(t,e,r,!0)}r._tr_init=function(t){q||(function(){var t,e,r,i,n,s=new Array(g+1);for(i=r=0;i<a-1;i++)for(I[i]=r,t=0;t<1<<w[i];t++)A[r++]=i;for(A[r-1]=i,i=n=0;i<16;i++)for(T[i]=n,t=0;t<1<<k[i];t++)E[n++]=i;for(n>>=7;i<f;i++)for(T[i]=n<<7,t=0;t<1<<k[i]-7;t++)E[256+n++]=i;for(e=0;e<=g;e++)s[e]=0;for(t=0;t<=143;)z[2*t+1]=8,t++,s[8]++;for(;t<=255;)z[2*t+1]=9,t++,s[9]++;for(;t<=279;)z[2*t+1]=7,t++,s[7]++;for(;t<=287;)z[2*t+1]=8,t++,s[8]++;for(Z(z,l+1,s),t=0;t<f;t++)C[2*t+1]=5,C[2*t]=j(t,5);O=new D(z,w,u+1,l,g),B=new D(C,k,0,f,g),R=new D(new Array(0),x,0,d,p)}(),q=!0),t.l_desc=new F(t.dyn_ltree,O),t.d_desc=new F(t.dyn_dtree,B),t.bl_desc=new F(t.bl_tree,R),t.bi_buf=0,t.bi_valid=0,W(t)},r._tr_stored_block=J,r._tr_flush_block=function(t,e,r,i){var n,s,a=0;0<t.level?(2===t.strm.data_type&&(t.strm.data_type=function(t){var e,r=4093624447;for(e=0;e<=31;e++,r>>>=1)if(1&r&&0!==t.dyn_ltree[2*e])return o;if(0!==t.dyn_ltree[18]||0!==t.dyn_ltree[20]||0!==t.dyn_ltree[26])return h;for(e=32;e<u;e++)if(0!==t.dyn_ltree[2*e])return h;return o}(t)),Y(t,t.l_desc),Y(t,t.d_desc),a=function(t){var e;for(X(t,t.dyn_ltree,t.l_desc.max_code),X(t,t.dyn_dtree,t.d_desc.max_code),Y(t,t.bl_desc),e=d-1;3<=e&&0===t.bl_tree[2*S[e]+1];e--);return t.opt_len+=3*(e+1)+5+5+4,e}(t),n=t.opt_len+3+7>>>3,(s=t.static_len+3+7>>>3)<=n&&(n=s)):n=s=r+5,r+4<=n&&-1!==e?J(t,e,r,i):4===t.strategy||s===n?(P(t,2+(i?1:0),3),K(t,z,C)):(P(t,4+(i?1:0),3),function(t,e,r,i){var n;for(P(t,e-257,5),P(t,r-1,5),P(t,i-4,4),n=0;n<i;n++)P(t,t.bl_tree[2*S[n]+1],3);V(t,t.dyn_ltree,e-1),V(t,t.dyn_dtree,r-1)}(t,t.l_desc.max_code+1,t.d_desc.max_code+1,a+1),K(t,t.dyn_ltree,t.dyn_dtree)),W(t),i&&M(t)},r._tr_tally=function(t,e,r){return t.pending_buf[t.d_buf+2*t.last_lit]=e>>>8&255,t.pending_buf[t.d_buf+2*t.last_lit+1]=255&e,t.pending_buf[t.l_buf+t.last_lit]=255&r,t.last_lit++,0===e?t.dyn_ltree[2*r]++:(t.matches++,e--,t.dyn_ltree[2*(A[r]+u+1)]++,t.dyn_dtree[2*N(e)]++),t.last_lit===t.lit_bufsize-1},r._tr_align=function(t){P(t,2,3),L(t,m,z),function(t){16===t.bi_valid?(U(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):8<=t.bi_valid&&(t.pending_buf[t.pending++]=255&t.bi_buf,t.bi_buf>>=8,t.bi_valid-=8)}(t)}},{"../utils/common":41}],53:[function(t,e,r){"use strict";e.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},{}],54:[function(t,e,r){"use strict";e.exports="function"==typeof setImmediate?setImmediate:function(){var t=[].slice.apply(arguments);t.splice(1,0,0),setTimeout.apply(null,t)}},{}]},{},[10])(10)});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../../timers-browserify/main.js */ "./node_modules/timers-browserify/main.js").setImmediate))

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./node_modules/setimmediate/setImmediate.js":
/*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
      // Callback can either be a function or a string
      if (typeof callback !== "function") {
        callback = new Function("" + callback);
      }
      // Copy function arguments
      var args = new Array(arguments.length - 1);
      for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i + 1];
      }
      // Store and register the task
      var task = { callback: callback, args: args };
      tasksByHandle[nextHandle] = task;
      registerImmediate(nextHandle);
      return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
        case 0:
            callback();
            break;
        case 1:
            callback(args[0]);
            break;
        case 2:
            callback(args[0], args[1]);
            break;
        case 3:
            callback(args[0], args[1], args[2]);
            break;
        default:
            callback.apply(undefined, args);
            break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function () { runIfPresent(handle); });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/timers-browserify/main.js":
/*!************************************************!*\
  !*** ./node_modules/timers-browserify/main.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||
            (typeof self !== "undefined" && self) ||
            window;
var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(scope, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(/*! setimmediate */ "./node_modules/setimmediate/setImmediate.js");
// On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.
exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
                       (typeof global !== "undefined" && global.setImmediate) ||
                       (this && this.setImmediate);
exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
                         (typeof global !== "undefined" && global.clearImmediate) ||
                         (this && this.clearImmediate);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./src/app.ts":
/*!********************!*\
  !*** ./src/app.ts ***!
  \********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _roster40k__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./roster40k */ "./src/roster40k.ts");
/* harmony import */ var _renderer40k__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./renderer40k */ "./src/renderer40k.ts");
/* harmony import */ var _roster30k__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./roster30k */ "./src/roster30k.ts");
/* harmony import */ var _renderer30k__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./renderer30k */ "./src/renderer30k.ts");
/* harmony import */ var _rosterAoS__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./rosterAoS */ "./src/rosterAoS.ts");
/* harmony import */ var _rendererAoS__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./rendererAoS */ "./src/rendererAoS.ts");
/* harmony import */ var _rosterWarcry__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./rosterWarcry */ "./src/rosterWarcry.ts");
/* harmony import */ var _rendererWarcry__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./rendererWarcry */ "./src/rendererWarcry.ts");
/* harmony import */ var jszip__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! jszip */ "./node_modules/jszip/dist/jszip.min.js");
/* harmony import */ var jszip__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(jszip__WEBPACK_IMPORTED_MODULE_8__);









function cleanup() {
    $('#roster-title').empty();
    $('#roster-lists').empty();
    $('#force-units').empty();
}
function getFileExtension(filename) {
    const substrings = filename.split('.');
    if (substrings.length > 1) {
        return substrings[substrings.length - 1].toLowerCase();
    }
    return "";
}
function parseXML(xmldata) {
    var _a;
    let parser = new DOMParser();
    let doc = parser.parseFromString(xmldata, "text/xml");
    if (doc) {
        let info = doc.querySelector("roster");
        if (info) {
            const gameType = (_a = info.getAttributeNode("gameSystemName")) === null || _a === void 0 ? void 0 : _a.nodeValue;
            if (!gameType)
                return;
            const rosterTitle = $('#roster-title')[0];
            const rosterList = $('#roster-lists')[0];
            const forceUnits = $('#force-units')[0];
            if ((gameType == "Warhammer 40,000 8th Edition") ||
                (gameType == "Warhammer 40,000 9th Edition")) {
                let roster = Object(_roster40k__WEBPACK_IMPORTED_MODULE_0__["Create40kRoster"])(doc);
                if (roster) {
                    if (roster._forces.length > 0) {
                        const renderer = new _renderer40k__WEBPACK_IMPORTED_MODULE_1__["Renderer40k"](roster);
                        renderer.render(rosterTitle, rosterList, forceUnits);
                    }
                }
            }
            else if (gameType == "Warhammer 40,000: Kill Team (2018)") {
                let roster = Object(_roster40k__WEBPACK_IMPORTED_MODULE_0__["Create40kRoster"])(doc, false);
                if (roster) {
                    if (roster._forces.length > 0) {
                        const renderer = new _renderer40k__WEBPACK_IMPORTED_MODULE_1__["Renderer40k"](roster);
                        renderer.render(rosterTitle, rosterList, forceUnits);
                    }
                }
            }
            else if (gameType == "Age of Sigmar") {
                let roster = Object(_rosterAoS__WEBPACK_IMPORTED_MODULE_4__["CreateAoSRoster"])(doc);
                if (roster) {
                    const renderer = new _rendererAoS__WEBPACK_IMPORTED_MODULE_5__["RendererAoS"](roster);
                    renderer.render(rosterTitle, rosterList, forceUnits);
                }
            }
            else if (gameType == "Warhammer Age of Sigmar: Warcry") {
                let roster = Object(_rosterWarcry__WEBPACK_IMPORTED_MODULE_6__["CreateWarcryRoster"])(doc);
                if (roster) {
                    const renderer = new _rendererWarcry__WEBPACK_IMPORTED_MODULE_7__["RendererWarcry"](roster);
                    renderer.render(rosterTitle, rosterList, forceUnits);
                }
            }
            else if (gameType == "Warhammer 30,000 - The Horus Heresy") {
                let roster = Object(_roster30k__WEBPACK_IMPORTED_MODULE_2__["Create30kRoster"])(doc);
                if (roster) {
                    if (roster._forces.length > 0) {
                        const renderer = new _renderer30k__WEBPACK_IMPORTED_MODULE_3__["Renderer30k"](roster);
                        renderer.render(rosterTitle, rosterList, forceUnits);
                    }
                }
            }
            else {
                $('#errorText').html('PrettyScribe does not support game type \'' + gameType + '\'.');
                $('#errorDialog').modal();
            }
        }
    }
}
$('#roster-file').on("change", function handleFileSelect(event) {
    const input = event.target;
    const files = input.files;
    cleanup();
    if (files) {
        let output = [];
        for (let f of files) {
            const fileExt = getFileExtension(f.name);
            if (fileExt === "rosz" || fileExt.length === 0) {
                let zip = new jszip__WEBPACK_IMPORTED_MODULE_8___default.a();
                zip.loadAsync(f).then(function (zip) {
                    zip.forEach(function (path, file) {
                        file.async("text").then(function (xmldata) {
                            parseXML(xmldata);
                        });
                    });
                }).catch(function (reason) {
                    $('#errorText').html('Failed to load compressed roster file, ' + f.name + ', reason ' + reason);
                    $('#errorDialog').modal();
                });
            }
            else if (fileExt === "ros") {
                const reader = new FileReader();
                reader.onload = function (e) {
                    const re = e.target;
                    if (re && re.result) {
                        let sourceData = re.result;
                        const xmldatastart = sourceData.toString().indexOf(',') + 1;
                        const xmldata = window.atob(sourceData.toString().slice(xmldatastart));
                        parseXML(xmldata);
                    }
                };
                reader.readAsDataURL(f);
            }
            else {
                $('#errorText').html('PrettyScribe only supports .ros and .rosz files.  Selected file is a \'' + fileExt + "\' file.");
                $('#errorDialog').modal();
            }
        }
    }
});


/***/ }),

/***/ "./src/renderer.ts":
/*!*************************!*\
  !*** ./src/renderer.ts ***!
  \*************************/
/*! exports provided: Justification, RenderText, RenderParagraph */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Justification", function() { return Justification; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RenderText", function() { return RenderText; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RenderParagraph", function() { return RenderParagraph; });
var Justification;
(function (Justification) {
    Justification[Justification["Left"] = 0] = "Left";
    Justification[Justification["Right"] = 1] = "Right";
    Justification[Justification["Center"] = 2] = "Center";
})(Justification || (Justification = {}));
;
function RenderText(ctx, text, x, y, w, h, how) {
    if (ctx && text.length) {
        ctx.textBaseline = 'top';
        let measure = ctx.measureText(text);
        const tw = measure.width;
        const th = measure.actualBoundingBoxDescent - measure.actualBoundingBoxAscent;
        if (how == Justification.Center) {
            ctx.fillText(text, x + Math.max((w - tw) / 2, 0), y + (h - th) / 2, w);
        }
        else if (how == Justification.Left) {
            ctx.fillText(text, x, y + (h - th) / 2, w);
        }
        else if (how == Justification.Right) {
            ctx.fillText(text, x + w - tw, y + (h - th) / 2, w);
        }
    }
}
function RenderParagraph(ctx, text, x, y, w) {
    let curY = y;
    if (ctx && text.length) {
        let lines = [];
        let currentLine = [];
        ctx.textBaseline = 'top';
        let length = 0;
        const spaceWidth = ctx.measureText(" ").width;
        const heightMeasure = ctx.measureText(text);
        const th = (heightMeasure.actualBoundingBoxDescent - heightMeasure.actualBoundingBoxAscent) * 1.2;
        text.split(" ").forEach(function (word) {
            const measure = ctx.measureText(word);
            if ((length + measure.width) > w) {
                lines.push(currentLine.join(" "));
                currentLine.length = 0;
                length = 0;
            }
            length += measure.width + spaceWidth;
            currentLine.push(word);
        });
        if (currentLine.length > 0) {
            lines.push(currentLine.join(" "));
        }
        for (let l of lines) {
            ctx.fillText(l, x, curY);
            curY += th;
        }
    }
    return curY;
}


/***/ }),

/***/ "./src/renderer30k.ts":
/*!****************************!*\
  !*** ./src/renderer30k.ts ***!
  \****************************/
/*! exports provided: Renderer30k */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Renderer30k", function() { return Renderer30k; });
/* harmony import */ var _roster30k__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./roster30k */ "./src/roster30k.ts");
/* harmony import */ var _renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./renderer */ "./src/renderer.ts");


class Renderer30k {
    constructor(roster) {
        this._descriptionStartX = 190;
        this._descriptionWidth = 600;
        this._showWoundBoxes = true;
        this._roster = null;
        this._currentX = 0;
        this._currentY = 0;
        this._maxWidth = 0;
        this._maxHeight = 0;
        this._octagon = null;
        this._roles = new Map();
        this._unitLabelWidthsNormalized = [0.3, 0.077, 0.077, 0.077, 0.077, 0.077, 0.077, 0.077, 0.077, 0.077];
        this._vehicleLabelWidthsNormalized = [0.3, 0.1, 0.1, 0.1, 0.1, 0.1, 0.2];
        this._walkerLabelWidthsNormalized = [0.3, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.15];
        this._flyerLabelWidthsNormalized = [0.3, 0.077, 0.077, 0.077, 0.077, 0.077, 0.077, 0.077, 0.077, 0.077];
        this._weaponLabelWidthNormalized = [0.3, 0.1, 0.1, 0.1, 0.4];
        this._spellLabelWidthNormalized = [0.3, 0.1, 0.1, 0.5];
        this._roster = roster;
        this._octagon = document.getElementById('octagon');
        this._roles.set(_roster30k__WEBPACK_IMPORTED_MODULE_0__["UnitRole30k"].HQ, document.getElementById('role_hq'));
        this._roles.set(_roster30k__WEBPACK_IMPORTED_MODULE_0__["UnitRole30k"].TR, document.getElementById('role_tr'));
        this._roles.set(_roster30k__WEBPACK_IMPORTED_MODULE_0__["UnitRole30k"].EL, document.getElementById('role_el'));
        this._roles.set(_roster30k__WEBPACK_IMPORTED_MODULE_0__["UnitRole30k"].FA, document.getElementById('role_fa'));
        this._roles.set(_roster30k__WEBPACK_IMPORTED_MODULE_0__["UnitRole30k"].HS, document.getElementById('role_hs'));
        this._roles.set(_roster30k__WEBPACK_IMPORTED_MODULE_0__["UnitRole30k"].FL, document.getElementById('role_fl'));
        this._roles.set(_roster30k__WEBPACK_IMPORTED_MODULE_0__["UnitRole30k"].DT, document.getElementById('role_dt'));
        this._roles.set(_roster30k__WEBPACK_IMPORTED_MODULE_0__["UnitRole30k"].FT, document.getElementById('role_ft'));
        this._roles.set(_roster30k__WEBPACK_IMPORTED_MODULE_0__["UnitRole30k"].LW, document.getElementById('role_lw'));
    }
    render(title, list, forces) {
        if (this._roster == null)
            return;
        if (title) {
            title.innerHTML = '<h3>' + this._roster._name + ' (' + this._roster._points + ' pts)</h3>';
        }
        for (let force of this._roster._forces) {
            const forceTitle = document.createElement('div');
            if (forceTitle) {
                forceTitle.innerHTML = '<p>' + force._catalog + ' ' + force._name + '</p>';
            }
            if (list)
                list.appendChild(forceTitle);
            const table = document.createElement('table');
            table.classList.add('table');
            table.classList.add('table-sm');
            table.classList.add('table-striped');
            const thead = document.createElement('thead');
            table.appendChild(thead);
            thead.classList.add('thead-light');
            const tr = document.createElement('tr');
            thead.appendChild(tr);
            const headerInfo = [{ name: "NAME", w: '25%' }, { name: "ROLE", w: '20%' }, { name: "MODELS", w: '40%' }, { name: "POINTS", w: '15%' }];
            headerInfo.forEach(element => {
                let th = document.createElement('th');
                th.scope = "col";
                th.innerHTML = element.name;
                th.style.width = element.w;
                tr.appendChild(th);
            });
            forceTitle.appendChild(table);
            let body = document.createElement('tbody');
            table.appendChild(body);
            for (let unit of force._units) {
                let tr = document.createElement('tr');
                let uname = document.createElement('td');
                uname.innerHTML = unit._name;
                let role = document.createElement('td');
                role.innerHTML = _roster30k__WEBPACK_IMPORTED_MODULE_0__["UnitRoleToString30k"][unit._role];
                let models = document.createElement('td');
                models.innerHTML = "";
                let mi = 0;
                for (const model of unit._models) {
                    if (model._count > 1) {
                        models.innerHTML += model._count + " " + model._name;
                    }
                    else {
                        models.innerHTML += model._name;
                    }
                    mi++;
                    if (mi != unit._models.length) {
                        models.innerHTML += ",  ";
                    }
                }
                let pts = document.createElement('td');
                pts.innerHTML = unit._points.toString();
                tr.appendChild(uname);
                tr.appendChild(role);
                tr.appendChild(models);
                tr.appendChild(pts);
                body.appendChild(tr);
            }
            if (force._rules.size > 0) {
                let allegianceRules = document.createElement('div');
                let rulesHeader = document.createElement('h3');
                allegianceRules.appendChild(rulesHeader);
                rulesHeader.textContent = force._catalog + " Allegiance Rules";
                for (let rule of force._rules) {
                    let row = document.createElement('div');
                    let name = document.createElement('h4');
                    name.textContent = rule[0];
                    let desc = document.createElement('p');
                    desc.textContent = rule[1];
                    row.appendChild(name);
                    row.appendChild(desc);
                    allegianceRules.appendChild(row);
                }
                if (forces)
                    forces.appendChild(allegianceRules);
            }
            for (let unit of force._units) {
                let canvas = document.createElement('canvas');
                canvas.width = Renderer30k._res * 5.5;
                canvas.height = Renderer30k._res * 12;
                this._descriptionWidth = canvas.width - this._descriptionStartX - 10;
                const dims = this.renderUnit(unit, canvas, 0, 0);
                const border = 25;
                let finalCanvas = document.createElement('canvas');
                finalCanvas.width = dims[0] + border * 2;
                finalCanvas.height = dims[1] + border * 2;
                let finalCtx = finalCanvas.getContext('2d');
                finalCtx === null || finalCtx === void 0 ? void 0 : finalCtx.drawImage(canvas, border, border);
                if (forces) {
                    let canvasDiv = document.createElement('div');
                    canvasDiv.appendChild(finalCanvas);
                    forces.appendChild(canvasDiv);
                }
            }
        }
    }
    renderBorder(ctx, x, y, w, h) {
        ctx.strokeStyle = Renderer30k._blackColor;
        ctx.beginPath();
        ctx.moveTo(x, y + Renderer30k._bevelSize);
        ctx.lineTo(x, y + h - Renderer30k._bevelSize);
        ctx.lineTo(x + Renderer30k._bevelSize, y + h);
        ctx.lineTo(x + w - Renderer30k._bevelSize, y + h);
        ctx.lineTo(x + w, y + h - Renderer30k._bevelSize);
        ctx.lineTo(x + w, y + Renderer30k._bevelSize);
        ctx.lineTo(x + w - Renderer30k._bevelSize, y);
        ctx.lineTo(x + Renderer30k._bevelSize, y);
        ctx.closePath();
        ctx.stroke();
        ctx.save();
        ctx.fillStyle = Renderer30k._fillColor;
        ctx.globalCompositeOperation = "destination-over";
        ctx.beginPath();
        ctx.moveTo(x, y + Renderer30k._bevelSize);
        ctx.lineTo(x, y + h - Renderer30k._bevelSize);
        ctx.lineTo(x + Renderer30k._bevelSize, y + h);
        ctx.lineTo(x + w - Renderer30k._bevelSize, y + h);
        ctx.lineTo(x + w, y + h - Renderer30k._bevelSize);
        ctx.lineTo(x + w, y + Renderer30k._bevelSize);
        ctx.lineTo(x + w - Renderer30k._bevelSize, y);
        ctx.lineTo(x + Renderer30k._bevelSize, y);
        ctx.closePath();
        ctx.fill();
        ctx.restore();
    }
    renderWatermark(ctx) {
    }
    renderLine(ctx) {
        ctx.lineWidth = 2;
        ctx.strokeStyle = Renderer30k._blackColor;
        ctx.beginPath();
        ctx.moveTo(this._currentX, this._currentY);
        ctx.lineTo(this._currentX + this._maxWidth, this._currentY);
        ctx.stroke();
        this._currentY += 1;
    }
    renderTableHeader(ctx, labels, columnWidths) {
        let x = this._currentX;
        const height = 22;
        const width = this._maxWidth;
        ctx.fillStyle = Renderer30k._grey1;
        ctx.fillRect(this._currentX, this._currentY, width, height);
        ctx.fillStyle = Renderer30k._blackColor;
        ctx.font = '14px sans-serif';
        var w = 50;
        if (labels) {
            ctx.font = '12px sans-serif';
            for (let i = 0; i < labels.length; i++) {
                if (columnWidths)
                    w = columnWidths[i];
                Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, labels[i], x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
                x += w;
            }
        }
        this._currentY += height;
    }
    renderPowers(ctx, powers, columnWidths) {
        ctx.font = '12px sans-serif';
        const height = 22;
        let i = 0;
        let w = 50;
        ctx.save();
        for (const power of powers) {
            let ci = 0;
            let x = this._currentX;
            let xStart = this._currentX;
            let yStart = this._currentY;
            ctx.fillStyle = Renderer30k._blackColor;
            if (columnWidths)
                w = columnWidths[ci++];
            Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, power._name.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
            x += w;
            if (columnWidths)
                w = columnWidths[ci++];
            Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, power._warpCharge.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
            x += w;
            if (columnWidths)
                w = columnWidths[ci++];
            Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, power._range.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
            x += w;
            if (columnWidths)
                w = columnWidths[ci++];
            this._currentY += 4;
            this._currentY = Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderParagraph"])(ctx, power._details, x, this._currentY, w);
            this._currentY += 2;
            x += w;
            ctx.save();
            if (i % 2)
                ctx.fillStyle = Renderer30k._greyLight;
            else
                ctx.fillStyle = '#ffffff';
            ctx.globalCompositeOperation = "destination-over";
            const actualHeight = this._currentY - yStart;
            ctx.fillRect(xStart, yStart, this._maxWidth, actualHeight);
            i++;
            ctx.restore();
        }
        ctx.restore();
    }
    renderWeapons(ctx, weapons, columnWidths) {
        ctx.font = '12px sans-serif';
        const height = 22;
        ctx.save();
        let i = 0;
        let w = 50;
        for (const weapon of weapons) {
            let ci = 0;
            let x = this._currentX;
            let xStart = this._currentX;
            let yStart = this._currentY;
            ctx.fillStyle = Renderer30k._blackColor;
            if (columnWidths)
                w = columnWidths[ci++];
            Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, weapon._name.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
            x += w;
            if (columnWidths)
                w = columnWidths[ci++];
            Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, weapon._range.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
            x += w;
            if (columnWidths)
                w = columnWidths[ci++];
            Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, weapon._str.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
            x += w;
            if (columnWidths)
                w = columnWidths[ci++];
            Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, weapon._ap.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
            x += w;
            if (columnWidths)
                w = columnWidths[ci++];
            Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, weapon._type.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
            x += w;
            this._currentY += height;
            x += w;
            ctx.save();
            ctx.globalCompositeOperation = "destination-over";
            const actualHeight = this._currentY - yStart;
            if (i % 2)
                ctx.fillStyle = Renderer30k._greyLight;
            else
                ctx.fillStyle = '#ffffff';
            ctx.fillRect(xStart, yStart, this._maxWidth, actualHeight);
            i++;
            ctx.restore();
        }
        ctx.restore();
    }
    renderModel(ctx, model, columnWidths, bg) {
        const height = 24;
        let w = 50;
        let x = this._currentX;
        let ci = 0;
        if (bg % 2)
            ctx.fillStyle = Renderer30k._greyLight;
        else
            ctx.fillStyle = '#ffffff';
        ctx.fillRect(x, this._currentY, this._maxWidth, height);
        ctx.fillStyle = Renderer30k._blackColor;
        ctx.font = '12px sans-serif';
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, model._name.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, model._ws.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, model._bs.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, model._str.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, model._toughness.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, model._wounds.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, model._initiative.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, model._attacks.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, model._leadership.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, model._save.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        this._currentY += height;
    }
    renderVehicle(ctx, model, columnWidths, bg) {
        const height = 24;
        let w = 50;
        let x = this._currentX;
        let ci = 0;
        if (bg % 2)
            ctx.fillStyle = Renderer30k._greyLight;
        else
            ctx.fillStyle = '#ffffff';
        ctx.fillRect(x, this._currentY, this._maxWidth, height);
        ctx.fillStyle = Renderer30k._blackColor;
        ctx.font = '12px sans-serif';
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, model._name.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, model._bs.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, model._front.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, model._side.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, model._rear.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, model._hp.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, model._type.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        this._currentY += height;
    }
    renderWalker(ctx, model, columnWidths, bg) {
        const height = 24;
        let w = 50;
        let x = this._currentX;
        let ci = 0;
        if (bg % 2)
            ctx.fillStyle = Renderer30k._greyLight;
        else
            ctx.fillStyle = '#ffffff';
        ctx.fillRect(x, this._currentY, this._maxWidth, height);
        ctx.fillStyle = Renderer30k._blackColor;
        ctx.font = '12px sans-serif';
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, model._name.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, model._ws.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, model._bs.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, model._str.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, model._front.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, model._side.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, model._rear.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, model._initiative.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, model._attacks.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, model._hp.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, model._type.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        this._currentY += height;
    }
    renderFlyer(ctx, model, columnWidths, bg) {
        const height = 24;
        let w = 50;
        let x = this._currentX;
        let ci = 0;
        if (bg % 2)
            ctx.fillStyle = Renderer30k._greyLight;
        else
            ctx.fillStyle = '#ffffff';
        ctx.fillRect(x, this._currentY, this._maxWidth, height);
        ctx.fillStyle = Renderer30k._blackColor;
        ctx.font = '12px sans-serif';
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, model._name.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, model._bs.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, model._front.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, model._side.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, model._rear.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, model._hp.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, model._type.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, model._role.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, model._pursuit.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, model._agility.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        this._currentY += height;
    }
    renderAbilities(ctx, unit) {
        ctx.font = '14px sans-serif';
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, "ABILITIES", this._currentX + 20, this._currentY, 100, 16, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Left);
        ctx.font = '12px serif';
        for (let ab of unit._abilities) {
            const content = ab[0].toUpperCase();
            const desc = ab[1];
            this._currentY += 2;
            this._currentY = Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderParagraph"])(ctx, content + ": " + desc, this._currentX + this._descriptionStartX, this._currentY, this._descriptionWidth);
            this._currentY += 2;
        }
    }
    renderRules(ctx, unit) {
        ctx.font = '14px sans-serif';
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, "RULES", this._currentX + 20, this._currentY, 100, 16, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Left);
        ctx.font = '12px serif';
        for (let rule of unit._rules) {
            const content = rule[0].toUpperCase();
            const desc = rule[1];
            this._currentY += 2;
            this._currentY = Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderParagraph"])(ctx, content + ": " + desc, this._currentX + this._descriptionStartX, this._currentY, this._descriptionWidth);
            this._currentY += 4;
        }
    }
    renderKeywords(ctx, unit) {
        ctx.font = '14px sans-serif';
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, "KEYWORDS", this._currentX + 20, this._currentY, 100, 16, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Left);
        ctx.font = '12px serif';
        const kwlist = [...unit._keywords];
        const kw = kwlist.join(", ").toLocaleUpperCase();
        this._currentY += 2;
        this._currentY = Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderParagraph"])(ctx, kw, this._currentX + this._descriptionStartX, this._currentY, this._descriptionWidth);
        this._currentY += 2;
    }
    renderFactions(ctx, unit) {
        ctx.font = '14px sans-serif';
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, "FACTIONS", this._currentX + 20, this._currentY, 100, 16, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Left);
        ctx.font = '12px serif';
        const kwlist = [...unit._factions];
        const kw = kwlist.join(", ").toLocaleUpperCase();
        this._currentY += 2;
        this._currentY = Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderParagraph"])(ctx, kw, this._currentX + this._descriptionStartX, this._currentY, this._descriptionWidth);
        this._currentY += 2;
    }
    renderModelList(ctx, models) {
        ctx.font = '14px sans-serif';
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, "MODELS", this._currentX + 20, this._currentY, 100, 16, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Left);
        ctx.font = '12px serif';
        let modelList = "";
        let mi = 0;
        for (const model of models) {
            if (model._count > 1) {
                modelList += model._count + " " + model._name;
            }
            else {
                modelList += model._name;
            }
            mi++;
            if (mi != models.length) {
                modelList += ",  ";
            }
        }
        this._currentY += 2;
        this._currentY = Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderParagraph"])(ctx, modelList, this._currentX + this._descriptionStartX, this._currentY, this._descriptionWidth);
        this._currentY += 2;
    }
    renderWoundBoxes(ctx, models) {
        ctx.font = '14px sans-serif';
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, "WOUNDS", this._currentX + 20, this._currentY, 100, 16, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Left);
        const woundBoxSize = 20;
        const boxMargin = 5;
        const unitNameStartX = this._currentX + this._descriptionStartX;
        const unitNameWidth = 200 - boxMargin;
        const boxStartX = unitNameStartX + unitNameWidth;
        ctx.save();
        for (let model of models) {
            if (model._wounds > 1) {
                let currentY = this._currentY;
                ctx.font = '12px serif';
                ctx.fillStyle = Renderer30k._blackColor;
                this._currentY = Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderParagraph"])(ctx, model._name, unitNameStartX, this._currentY + (woundBoxSize - 14) / 2, unitNameWidth);
                let x = this._currentX + boxStartX;
                ctx.strokeStyle = Renderer30k._blackColor;
                ctx.fillStyle = '#ffffff';
                for (let w = 0; w < model._wounds; w++) {
                    if (w % 15 == 0 && w != 0) {
                        currentY += woundBoxSize + boxMargin;
                        x = this._currentX + boxStartX;
                    }
                    ctx.fillRect(x, currentY, woundBoxSize, woundBoxSize);
                    ctx.strokeRect(x, currentY, woundBoxSize, woundBoxSize);
                    x += woundBoxSize + boxMargin;
                }
                currentY += woundBoxSize + boxMargin;
                this._currentY = Math.max(this._currentY, currentY);
            }
        }
        ctx.restore();
    }
    renderUnit(unit, canvas, xOffset, yOffset) {
        let ctx = canvas.getContext('2d');
        if (!ctx) {
            return [0, 0];
        }
        this._currentX = xOffset + Renderer30k._margin;
        this._currentY = yOffset + Renderer30k._margin;
        this._maxWidth = canvas.width - this._currentX;
        this._maxHeight = Math.max(0, canvas.height - this._currentY);
        this.renderHeader(unit, ctx);
        ctx.fillStyle = Renderer30k._blackColor;
        let weapons = [];
        let powers = [];
        let psykers = [];
        let models = [];
        const unitLabelWidths = [];
        this._unitLabelWidthsNormalized.forEach(element => {
            unitLabelWidths.push(element * this._maxWidth);
        });
        const vehicleLabelWidths = [];
        this._vehicleLabelWidthsNormalized.forEach(element => {
            vehicleLabelWidths.push(element * this._maxWidth);
        });
        const walkerLabelWidths = [];
        this._walkerLabelWidthsNormalized.forEach(element => {
            walkerLabelWidths.push(element * this._maxWidth);
        });
        const flyerLabelWidths = [];
        this._flyerLabelWidthsNormalized.forEach(element => {
            flyerLabelWidths.push(element * this._maxWidth);
        });
        for (var model of unit._models) {
            models.push(model);
            for (let weapon of model._weapons) {
                weapons.push(weapon);
            }
            for (let power of model._psychicPowers) {
                powers.push(power);
            }
            if (model._psyker) {
                psykers.push(model._psyker);
            }
        }
        const uniqueModels = [];
        const scrathModels = new Map();
        for (const m of models) {
            if (!scrathModels.has(m._name)) {
                scrathModels.set(m._name, m);
                uniqueModels.push(m);
            }
        }
        if (uniqueModels.length > 0) {
            this.renderTableHeader(ctx, Renderer30k._unitLabels, unitLabelWidths);
            let i = 0;
            for (var model of uniqueModels) {
                this.renderModel(ctx, model, unitLabelWidths, i % 2);
                i++;
            }
        }
        if (unit._vehicles.length > 0) {
            this.renderTableHeader(ctx, Renderer30k._vehicleLabels, vehicleLabelWidths);
            let i = 0;
            for (var vehicle of unit._vehicles) {
                this.renderVehicle(ctx, vehicle, vehicleLabelWidths, i % 2);
                i++;
            }
        }
        if (unit._walkers.length > 0) {
            this.renderTableHeader(ctx, Renderer30k._walkerLabels, walkerLabelWidths);
            let i = 0;
            for (var walker of unit._walkers) {
                this.renderWalker(ctx, walker, walkerLabelWidths, i % 2);
                i++;
            }
        }
        if (unit._flyers.length > 0) {
            this.renderTableHeader(ctx, Renderer30k._flyerLabels, flyerLabelWidths);
            let i = 0;
            for (var flyer of unit._flyers) {
                this.renderFlyer(ctx, flyer, flyerLabelWidths, i % 2);
                i++;
            }
        }
        const uniqueWeapons = [];
        const scratchMap = new Map();
        for (const w of weapons) {
            if (!scratchMap.has(w._name)) {
                scratchMap.set(w._name, w);
                uniqueWeapons.push(w);
            }
        }
        if (uniqueWeapons.length > 0) {
            const weaponLabelWidths = [];
            this._weaponLabelWidthNormalized.forEach(element => {
                weaponLabelWidths.push(element * this._maxWidth);
            });
            this.renderLine(ctx);
            this.renderTableHeader(ctx, Renderer30k._weaponLabels, weaponLabelWidths);
            this.renderWeapons(ctx, uniqueWeapons, weaponLabelWidths);
        }
        if (powers.length > 0) {
            const spellLabelWidths = [];
            this._spellLabelWidthNormalized.forEach(element => {
                spellLabelWidths.push(element * this._maxWidth);
            });
            this.renderLine(ctx);
            this.renderTableHeader(ctx, Renderer30k._spellLabels, spellLabelWidths);
            this.renderPowers(ctx, powers, spellLabelWidths);
        }
        if (unit._abilities.size > 0) {
            this.renderLine(ctx);
            this._currentY += 2;
            this.renderAbilities(ctx, unit);
        }
        if (psykers.length > 0) {
            this.renderLine(ctx);
            this._currentY += 2;
            this.renderPsykers(ctx, psykers);
        }
        if (unit._rules.size > 0) {
            this.renderLine(ctx);
            this._currentY += 2;
            this.renderRules(ctx, unit);
        }
        if (unit._factions.size > 0) {
            this.renderLine(ctx);
            this._currentY += 2;
            this.renderFactions(ctx, unit);
        }
        if (unit._keywords.size > 0) {
            this.renderLine(ctx);
            this._currentY += 2;
            this.renderKeywords(ctx, unit);
        }
        if (unit._models.length > 0) {
            this.renderLine(ctx);
            this._currentY += 2;
            this.renderModelList(ctx, uniqueModels);
        }
        if (this._showWoundBoxes) {
            let hasTracks = false;
            for (let model of unit._models) {
                if (model._wounds > 2) {
                    hasTracks = true;
                }
            }
            if (hasTracks) {
                this.renderLine(ctx);
                this._currentY += 5;
                this.renderWoundBoxes(ctx, unit._models);
            }
        }
        this._currentY += 2;
        const totalHeight = this._currentY - (yOffset + Renderer30k._margin);
        const totalWidth = this._maxWidth;
        this.renderBorder(ctx, this._currentX, yOffset + Renderer30k._margin, totalWidth, totalHeight);
        this.renderWatermark(ctx);
        return [this._maxWidth, this._currentY];
    }
    renderHeader(unit, ctx) {
        ctx.globalAlpha = 1;
        ctx.fillStyle = Renderer30k._blackColor;
        const xStart = this._currentX;
        const xEnd = this._currentX + this._maxWidth;
        const yStart = this._currentY;
        const titleHeight = 36;
        const yEnd = yStart + titleHeight;
        ctx.beginPath();
        ctx.moveTo(xStart, yStart + Renderer30k._bevelSize);
        ctx.lineTo(xStart, yEnd);
        ctx.lineTo(xEnd, yEnd);
        ctx.lineTo(xEnd, yStart + Renderer30k._bevelSize);
        ctx.lineTo(xEnd - Renderer30k._bevelSize, yStart);
        ctx.lineTo(xStart + Renderer30k._bevelSize, yStart);
        ctx.closePath();
        ctx.fill();
        let imgX = xStart + 6;
        if (this._octagon) {
            ctx.drawImage(this._octagon, imgX, yStart + 2, 32, 32);
            const roleImg = this._roles.get(unit._role);
            if (roleImg) {
                ctx.drawImage(roleImg, imgX + 4, yStart + 2 + 4, 24, 24);
            }
            ctx.fillStyle = 'white';
            ctx.font = "18px serif";
            imgX += 34;
            ctx.drawImage(this._octagon, imgX, yStart + 2, 32, 32);
            Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, unit._points.toString(), imgX, yStart + 2, 32, 32, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        }
        let iters = 0;
        let title_size = 28;
        const title_x = imgX + 6;
        ctx.font = title_size + 'px ' + 'bold serif';
        const unitName = unit._name.toLocaleUpperCase();
        let check = ctx.measureText(unitName);
        const maxWidth = this._maxWidth - title_x;
        while (iters < 6 && check.width > maxWidth) {
            iters += 1;
            title_size -= 2;
            ctx.font = title_size + 'px ' + 'bold serif';
            check = ctx.measureText(unitName);
        }
        ctx.fillStyle = 'white';
        ctx.textBaseline = 'top';
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, unitName, title_x, yStart, maxWidth, titleHeight, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        this._currentY += titleHeight;
    }
    renderPsykers(ctx, psykers) {
        ctx.font = '14px sans-serif';
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, "PSYKERS", this._currentX + 20, this._currentY, 100, 16, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Left);
        ctx.font = '12px serif';
        this._currentY += 2;
        for (let psyker of psykers) {
            this._currentY = Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderParagraph"])(ctx, "MASTERY LEVEL: " + psyker._masteryLevel, this._currentX + this._descriptionStartX, this._currentY, this._descriptionWidth);
            this._currentY += 2;
            this._currentY = Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderParagraph"])(ctx, "DISCIPLINES: " + psyker._disciplines, this._currentX + this._descriptionStartX, this._currentY, this._descriptionWidth);
            this._currentY += 2;
        }
    }
}
Renderer30k._res = 144;
Renderer30k._margin = 0;
Renderer30k._bevelSize = 15;
Renderer30k._blackColor = '#1d272a';
Renderer30k._grey1 = '#b3bbb5';
Renderer30k._greyLight = '#dde1df';
Renderer30k._fillColor = '#f6f6f6';
Renderer30k._unitLabels = ["MODEL", "WS", "BS", "S", "T", "W", "I", "A", "LD", "SAVE"];
Renderer30k._vehicleLabels = ["MODEL", "BS", "FRONT", "SIDE", "REAR", "HP", "TYPE"];
Renderer30k._walkerLabels = ["MODEL", "WS", "BS", "S", "FRONT", "SIDE", "REAR", "I", "A", "HP", "TYPE"];
Renderer30k._flyerLabels = ["MODEL", "BS", "FRONT", "SIDE", "REAR", "HP", "TYPE", "ROLE", "PURSUIT", "AGILITY"];
Renderer30k._weaponLabels = ["WEAPONS", "RANGE", "S", "AP", "TYPE"];
Renderer30k._spellLabels = ["PSYCHIC POWER", "WARP CHARGE", "RANGE", "DETAILS"];
;


/***/ }),

/***/ "./src/renderer40k.ts":
/*!****************************!*\
  !*** ./src/renderer40k.ts ***!
  \****************************/
/*! exports provided: Renderer40k */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Renderer40k", function() { return Renderer40k; });
/* harmony import */ var _roster40k__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./roster40k */ "./src/roster40k.ts");
/* harmony import */ var _renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./renderer */ "./src/renderer.ts");


class Renderer40k {
    constructor(roster) {
        this._descriptionStartX = 190;
        this._descriptionWidth = 600;
        this._showWoundBoxes = true;
        this._roster = null;
        this._currentX = 0;
        this._currentY = 0;
        this._maxWidth = 0;
        this._maxHeight = 0;
        this._octagon = null;
        this._roles = new Map();
        this._unitLabelWidthsNormalized = [0.3, 0.077, 0.077, 0.077, 0.077, 0.077, 0.077, 0.077, 0.077, 0.077];
        this._weaponLabelWidthNormalized = [0.3, 0.077, 0.077, 0.077, 0.077, 0.077, 0.3];
        this._spellLabelWidthNormalized = [0.3, 0.1, 0.1, 0.5];
        this._explosionLabelWidthNormalized = [0.3, 0.15, 0.15, 0.15];
        this._trackerLabelWidth = [0.3, 0.2, 0.15, 0.15, 0.15];
        this._roster = roster;
        this._octagon = document.getElementById('octagon');
        this._roles.set(_roster40k__WEBPACK_IMPORTED_MODULE_0__["UnitRole"].HQ, document.getElementById('role_hq'));
        this._roles.set(_roster40k__WEBPACK_IMPORTED_MODULE_0__["UnitRole"].TR, document.getElementById('role_tr'));
        this._roles.set(_roster40k__WEBPACK_IMPORTED_MODULE_0__["UnitRole"].EL, document.getElementById('role_el'));
        this._roles.set(_roster40k__WEBPACK_IMPORTED_MODULE_0__["UnitRole"].FA, document.getElementById('role_fa'));
        this._roles.set(_roster40k__WEBPACK_IMPORTED_MODULE_0__["UnitRole"].HS, document.getElementById('role_hs'));
        this._roles.set(_roster40k__WEBPACK_IMPORTED_MODULE_0__["UnitRole"].FL, document.getElementById('role_fl'));
        this._roles.set(_roster40k__WEBPACK_IMPORTED_MODULE_0__["UnitRole"].DT, document.getElementById('role_dt'));
        this._roles.set(_roster40k__WEBPACK_IMPORTED_MODULE_0__["UnitRole"].FT, document.getElementById('role_ft'));
        this._roles.set(_roster40k__WEBPACK_IMPORTED_MODULE_0__["UnitRole"].LW, document.getElementById('role_lw'));
    }
    render(title, list, forces) {
        if (this._roster == null)
            return;
        if (title) {
            title.innerHTML = '<h3>' + this._roster._name + ' (' + this._roster._points + ' pts, ' + this._roster._powerLevel + ' PL, ' + this._roster._commandPoints + ' CP)</h3>';
        }
        for (let force of this._roster._forces) {
            const forceTitle = document.createElement('div');
            if (forceTitle) {
                forceTitle.innerHTML = '<p>' + force._catalog + ' ' + force._name + '</p>';
            }
            if (list)
                list.appendChild(forceTitle);
            const table = document.createElement('table');
            table.classList.add('table');
            table.classList.add('table-sm');
            table.classList.add('table-striped');
            const thead = document.createElement('thead');
            table.appendChild(thead);
            thead.classList.add('thead-light');
            const tr = document.createElement('tr');
            thead.appendChild(tr);
            const headerInfo = [{ name: "NAME", w: '25%' }, { name: "ROLE", w: '20%' }, { name: "MODELS", w: '25%' }, { name: "POINTS", w: '15%' }, { name: "POWER", w: '15%' }];
            headerInfo.forEach(element => {
                let th = document.createElement('th');
                th.scope = "col";
                th.innerHTML = element.name;
                th.style.width = element.w;
                tr.appendChild(th);
            });
            forceTitle.appendChild(table);
            let body = document.createElement('tbody');
            table.appendChild(body);
            for (let unit of force._units) {
                let tr = document.createElement('tr');
                let uname = document.createElement('td');
                uname.innerHTML = unit._name;
                let role = document.createElement('td');
                role.innerHTML = _roster40k__WEBPACK_IMPORTED_MODULE_0__["UnitRoleToString"][unit._role];
                let models = document.createElement('td');
                models.innerHTML = "";
                let mi = 0;
                for (const model of unit._models) {
                    if (model._count > 1) {
                        models.innerHTML += model._count + " " + model._name;
                    }
                    else {
                        models.innerHTML += model._name;
                    }
                    mi++;
                    if (mi != unit._models.length) {
                        models.innerHTML += ",  ";
                    }
                }
                let pts = document.createElement('td');
                pts.innerHTML = unit._points.toString();
                let pwr = document.createElement('td');
                pwr.innerHTML = unit._powerLevel.toString();
                tr.appendChild(uname);
                tr.appendChild(role);
                tr.appendChild(models);
                tr.appendChild(pts);
                tr.appendChild(pwr);
                body.appendChild(tr);
            }
            if (force._rules.size > 0) {
                let allegianceRules = document.createElement('div');
                let rulesHeader = document.createElement('h3');
                allegianceRules.appendChild(rulesHeader);
                rulesHeader.textContent = force._catalog + " Allegiance Rules";
                for (let rule of force._rules) {
                    let row = document.createElement('div');
                    let name = document.createElement('h4');
                    name.textContent = rule[0];
                    let desc = document.createElement('p');
                    desc.textContent = rule[1];
                    row.appendChild(name);
                    row.appendChild(desc);
                    allegianceRules.appendChild(row);
                }
                if (forces)
                    forces.appendChild(allegianceRules);
            }
            for (let unit of force._units) {
                let canvas = document.createElement('canvas');
                canvas.width = Renderer40k._res * 5.5;
                canvas.height = Renderer40k._res * 12;
                this._descriptionWidth = canvas.width - this._descriptionStartX - 10;
                const dims = this.renderUnit(unit, canvas, 0, 0);
                const border = 25;
                let finalCanvas = document.createElement('canvas');
                finalCanvas.width = dims[0] + border * 2;
                finalCanvas.height = dims[1] + border * 2;
                let finalCtx = finalCanvas.getContext('2d');
                finalCtx === null || finalCtx === void 0 ? void 0 : finalCtx.drawImage(canvas, border, border);
                if (forces) {
                    let canvasDiv = document.createElement('div');
                    canvasDiv.appendChild(finalCanvas);
                    forces.appendChild(canvasDiv);
                }
            }
        }
    }
    renderBorder(ctx, x, y, w, h) {
        ctx.strokeStyle = Renderer40k._blackColor;
        ctx.beginPath();
        ctx.moveTo(x, y + Renderer40k._bevelSize);
        ctx.lineTo(x, y + h - Renderer40k._bevelSize);
        ctx.lineTo(x + Renderer40k._bevelSize, y + h);
        ctx.lineTo(x + w - Renderer40k._bevelSize, y + h);
        ctx.lineTo(x + w, y + h - Renderer40k._bevelSize);
        ctx.lineTo(x + w, y + Renderer40k._bevelSize);
        ctx.lineTo(x + w - Renderer40k._bevelSize, y);
        ctx.lineTo(x + Renderer40k._bevelSize, y);
        ctx.closePath();
        ctx.stroke();
        ctx.save();
        ctx.fillStyle = Renderer40k._fillColor;
        ctx.globalCompositeOperation = "destination-over";
        ctx.beginPath();
        ctx.moveTo(x, y + Renderer40k._bevelSize);
        ctx.lineTo(x, y + h - Renderer40k._bevelSize);
        ctx.lineTo(x + Renderer40k._bevelSize, y + h);
        ctx.lineTo(x + w - Renderer40k._bevelSize, y + h);
        ctx.lineTo(x + w, y + h - Renderer40k._bevelSize);
        ctx.lineTo(x + w, y + Renderer40k._bevelSize);
        ctx.lineTo(x + w - Renderer40k._bevelSize, y);
        ctx.lineTo(x + Renderer40k._bevelSize, y);
        ctx.closePath();
        ctx.fill();
        ctx.restore();
    }
    renderWatermark(ctx) {
    }
    renderLine(ctx) {
        ctx.lineWidth = 2;
        ctx.strokeStyle = Renderer40k._blackColor;
        ctx.beginPath();
        ctx.moveTo(this._currentX, this._currentY);
        ctx.lineTo(this._currentX + this._maxWidth, this._currentY);
        ctx.stroke();
        this._currentY += 1;
    }
    renderTableHeader(ctx, labels, columnWidths) {
        let x = this._currentX;
        const height = 22;
        const width = this._maxWidth;
        ctx.fillStyle = Renderer40k._grey1;
        ctx.fillRect(this._currentX, this._currentY, width, height);
        ctx.fillStyle = Renderer40k._blackColor;
        ctx.font = '14px sans-serif';
        var w = 50;
        if (labels) {
            ctx.font = '12px sans-serif';
            for (let i = 0; i < labels.length; i++) {
                if (columnWidths)
                    w = columnWidths[i];
                Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, labels[i], x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
                x += w;
            }
        }
        this._currentY += height;
    }
    renderSpells(ctx, spells, columnWidths) {
        ctx.font = '12px sans-serif';
        const height = 22;
        let i = 0;
        let w = 50;
        ctx.save();
        for (const spell of spells) {
            let ci = 0;
            let x = this._currentX;
            let xStart = this._currentX;
            let yStart = this._currentY;
            ctx.fillStyle = Renderer40k._blackColor;
            if (columnWidths)
                w = columnWidths[ci++];
            Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, spell._name.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
            x += w;
            if (columnWidths)
                w = columnWidths[ci++];
            Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, spell._manifest.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
            x += w;
            if (columnWidths)
                w = columnWidths[ci++];
            Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, spell._range.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
            x += w;
            if (columnWidths)
                w = columnWidths[ci++];
            this._currentY += 4;
            this._currentY = Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderParagraph"])(ctx, spell._details, x, this._currentY, w);
            this._currentY += 2;
            x += w;
            ctx.save();
            if (i % 2)
                ctx.fillStyle = Renderer40k._greyLight;
            else
                ctx.fillStyle = '#ffffff';
            ctx.globalCompositeOperation = "destination-over";
            const actualHeight = this._currentY - yStart;
            ctx.fillRect(xStart, yStart, this._maxWidth, actualHeight);
            i++;
            ctx.restore();
        }
        ctx.restore();
    }
    renderExplosion(ctx, explosions, columnWidths) {
        ctx.font = '12px sans-serif';
        const height = 22;
        let i = 0;
        let w = 50;
        for (const expl of explosions) {
            let ci = 0;
            let x = this._currentX;
            if (i % 2)
                ctx.fillStyle = Renderer40k._greyLight;
            else
                ctx.fillStyle = '#ffffff';
            ctx.fillRect(x, this._currentY, this._maxWidth, height);
            i++;
            ctx.fillStyle = Renderer40k._blackColor;
            if (columnWidths)
                w = columnWidths[ci++];
            Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, expl._name, x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
            x += w;
            if (columnWidths)
                w = columnWidths[ci++];
            Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, expl._diceRoll, x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
            x += w;
            if (columnWidths)
                w = columnWidths[ci++];
            Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, expl._distance, x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
            x += w;
            if (columnWidths)
                w = columnWidths[ci++];
            Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, expl._mortalWounds, x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
            x += w;
            this._currentY += height;
        }
    }
    renderWeapons(ctx, weapons, columnWidths) {
        ctx.font = '12px sans-serif';
        const height = 22;
        ctx.save();
        let i = 0;
        let w = 50;
        for (const weapon of weapons) {
            let ci = 0;
            let x = this._currentX;
            let xStart = this._currentX;
            let yStart = this._currentY;
            ctx.fillStyle = Renderer40k._blackColor;
            if (columnWidths)
                w = columnWidths[ci++];
            Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, weapon._name.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
            x += w;
            if (columnWidths)
                w = columnWidths[ci++];
            Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, weapon._range.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
            x += w;
            if (columnWidths)
                w = columnWidths[ci++];
            Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, weapon._type.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
            x += w;
            if (columnWidths)
                w = columnWidths[ci++];
            Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, weapon._str.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
            x += w;
            if (columnWidths)
                w = columnWidths[ci++];
            Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, weapon._ap.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
            x += w;
            if (columnWidths)
                w = columnWidths[ci++];
            Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, weapon._damage.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
            x += w;
            if (columnWidths)
                w = columnWidths[ci++];
            if (weapon._abilities) {
                this._currentY += 4;
                this._currentY = Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderParagraph"])(ctx, weapon._abilities, x, this._currentY, w);
                this._currentY += 2;
            }
            else {
                this._currentY += height;
            }
            x += w;
            ctx.save();
            ctx.globalCompositeOperation = "destination-over";
            const actualHeight = this._currentY - yStart;
            if (i % 2)
                ctx.fillStyle = Renderer40k._greyLight;
            else
                ctx.fillStyle = '#ffffff';
            ctx.fillRect(xStart, yStart, this._maxWidth, actualHeight);
            i++;
            ctx.restore();
        }
        ctx.restore();
    }
    renderModel(ctx, model, columnWidths, bg) {
        const height = 24;
        let w = 50;
        let x = this._currentX;
        let ci = 0;
        if (bg % 2)
            ctx.fillStyle = Renderer40k._greyLight;
        else
            ctx.fillStyle = '#ffffff';
        ctx.fillRect(x, this._currentY, this._maxWidth, height);
        ctx.fillStyle = Renderer40k._blackColor;
        ctx.font = '12px sans-serif';
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, model._name.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, model._move.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, model._ws.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, model._bs.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, model._str.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, model._toughness.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, model._wounds.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, model._attacks.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, model._leadership.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, model._save.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        this._currentY += height;
    }
    renderAbilities(ctx, unit) {
        ctx.font = '14px sans-serif';
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, "ABILITIES", this._currentX + 20, this._currentY, 100, 16, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Left);
        ctx.font = '12px serif';
        for (let ab of unit._abilities) {
            const content = ab[0].toUpperCase();
            const desc = ab[1];
            this._currentY += 2;
            this._currentY = Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderParagraph"])(ctx, content + ": " + desc, this._currentX + this._descriptionStartX, this._currentY, this._descriptionWidth);
            this._currentY += 2;
        }
    }
    renderRules(ctx, unit) {
        ctx.font = '14px sans-serif';
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, "RULES", this._currentX + 20, this._currentY, 100, 16, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Left);
        ctx.font = '12px serif';
        for (let rule of unit._rules) {
            const content = rule[0].toUpperCase();
            const desc = rule[1];
            this._currentY += 2;
            this._currentY = Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderParagraph"])(ctx, content + ": " + desc, this._currentX + this._descriptionStartX, this._currentY, this._descriptionWidth);
            this._currentY += 4;
        }
    }
    renderKeywords(ctx, unit) {
        ctx.font = '14px sans-serif';
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, "KEYWORDS", this._currentX + 20, this._currentY, 100, 16, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Left);
        ctx.font = '12px serif';
        const kwlist = [...unit._keywords];
        const kw = kwlist.join(", ").toLocaleUpperCase();
        this._currentY += 2;
        this._currentY = Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderParagraph"])(ctx, kw, this._currentX + this._descriptionStartX, this._currentY, this._descriptionWidth);
        this._currentY += 2;
    }
    renderFactions(ctx, unit) {
        ctx.font = '14px sans-serif';
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, "FACTIONS", this._currentX + 20, this._currentY, 100, 16, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Left);
        ctx.font = '12px serif';
        const kwlist = [...unit._factions];
        const kw = kwlist.join(", ").toLocaleUpperCase();
        this._currentY += 2;
        this._currentY = Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderParagraph"])(ctx, kw, this._currentX + this._descriptionStartX, this._currentY, this._descriptionWidth);
        this._currentY += 2;
    }
    renderWoundTable(ctx, unit, columnWidths) {
        const height = 22;
        let w = 50;
        let firstRow = true;
        for (let tracker of unit._woundTracker) {
            if (firstRow && (unit._woundTracker.length == 4)) {
                firstRow = false;
                continue;
            }
            let x = this._currentX;
            let ci = 0;
            ctx.fillStyle = Renderer40k._greyLight;
            ctx.fillRect(x, this._currentY, this._maxWidth, height);
            ctx.fillStyle = Renderer40k._blackColor;
            ctx.font = '12px sans-serif';
            if (columnWidths)
                w = columnWidths[ci++];
            x += w;
            for (let attr of tracker._table) {
                if (columnWidths)
                    w = columnWidths[ci++];
                Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, attr[1], x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
                x += w;
            }
            this._currentY += height;
        }
    }
    renderModelList(ctx, models) {
        ctx.font = '14px sans-serif';
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, "MODELS", this._currentX + 20, this._currentY, 100, 16, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Left);
        ctx.font = '12px serif';
        let modelList = "";
        let mi = 0;
        for (const model of models) {
            if (model._count > 1) {
                modelList += model._count + " " + model._name;
            }
            else {
                modelList += model._name;
            }
            mi++;
            if (mi != models.length) {
                modelList += ",  ";
            }
        }
        this._currentY += 2;
        this._currentY = Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderParagraph"])(ctx, modelList, this._currentX + this._descriptionStartX, this._currentY, this._descriptionWidth);
        this._currentY += 2;
    }
    renderWoundBoxes(ctx, models) {
        ctx.font = '14px sans-serif';
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, "WOUNDS", this._currentX + 20, this._currentY, 100, 16, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Left);
        const woundBoxSize = 20;
        const boxMargin = 5;
        const unitNameStartX = this._currentX + this._descriptionStartX;
        const unitNameWidth = 200 - boxMargin;
        const boxStartX = unitNameStartX + unitNameWidth;
        ctx.save();
        for (let model of models) {
            if (model._wounds > 1) {
                let currentY = this._currentY;
                ctx.font = '12px serif';
                ctx.fillStyle = Renderer40k._blackColor;
                this._currentY = Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderParagraph"])(ctx, model._name, unitNameStartX, this._currentY + (woundBoxSize - 14) / 2, unitNameWidth);
                let x = this._currentX + boxStartX;
                ctx.strokeStyle = Renderer40k._blackColor;
                ctx.fillStyle = '#ffffff';
                for (let w = 0; w < model._wounds; w++) {
                    if (w % 15 == 0 && w != 0) {
                        currentY += woundBoxSize + boxMargin;
                        x = this._currentX + boxStartX;
                    }
                    ctx.fillRect(x, currentY, woundBoxSize, woundBoxSize);
                    ctx.strokeRect(x, currentY, woundBoxSize, woundBoxSize);
                    x += woundBoxSize + boxMargin;
                }
                currentY += woundBoxSize + boxMargin;
                this._currentY = Math.max(this._currentY, currentY);
            }
        }
        ctx.restore();
    }
    renderUnit(unit, canvas, xOffset, yOffset) {
        let ctx = canvas.getContext('2d');
        if (!ctx) {
            return [0, 0];
        }
        this._currentX = xOffset + Renderer40k._margin;
        this._currentY = yOffset + Renderer40k._margin;
        this._maxWidth = canvas.width - this._currentX;
        this._maxHeight = Math.max(0, canvas.height - this._currentY);
        this.renderHeader(unit, ctx);
        ctx.fillStyle = Renderer40k._blackColor;
        let weapons = [];
        let spells = [];
        let explosions = [];
        let psykers = [];
        let models = [];
        const unitLabelWidths = [];
        this._unitLabelWidthsNormalized.forEach(element => {
            unitLabelWidths.push(element * this._maxWidth);
        });
        for (var model of unit._models) {
            models.push(model);
            for (let weapon of model._weapons) {
                weapons.push(weapon);
            }
            for (let spell of model._psychicPowers) {
                spells.push(spell);
            }
            for (let expl of model._explosions) {
                explosions.push(expl);
            }
            if (model._psyker) {
                psykers.push(model._psyker);
            }
        }
        const uniqueModels = [];
        const scrathModels = new Map();
        for (const m of models) {
            if (!scrathModels.has(m._name)) {
                scrathModels.set(m._name, m);
                uniqueModels.push(m);
            }
        }
        this.renderTableHeader(ctx, Renderer40k._unitLabels, unitLabelWidths);
        let i = 0;
        for (var model of uniqueModels) {
            this.renderModel(ctx, model, unitLabelWidths, i % 2);
            i++;
        }
        const uniqueWeapons = [];
        const scratchMap = new Map();
        for (const w of weapons) {
            if (!scratchMap.has(w._name)) {
                scratchMap.set(w._name, w);
                uniqueWeapons.push(w);
            }
        }
        if (uniqueWeapons.length > 0) {
            const weaponLabelWidths = [];
            this._weaponLabelWidthNormalized.forEach(element => {
                weaponLabelWidths.push(element * this._maxWidth);
            });
            this.renderLine(ctx);
            this.renderTableHeader(ctx, Renderer40k._weaponLabels, weaponLabelWidths);
            this.renderWeapons(ctx, uniqueWeapons, weaponLabelWidths);
        }
        if (spells.length > 0) {
            const spellLabelWidths = [];
            this._spellLabelWidthNormalized.forEach(element => {
                spellLabelWidths.push(element * this._maxWidth);
            });
            this.renderLine(ctx);
            this.renderTableHeader(ctx, Renderer40k._spellLabels, spellLabelWidths);
            this.renderSpells(ctx, spells, spellLabelWidths);
        }
        if (unit._abilities.size > 0) {
            this.renderLine(ctx);
            this._currentY += 2;
            this.renderAbilities(ctx, unit);
        }
        if (psykers.length > 0) {
            this.renderLine(ctx);
            this._currentY += 2;
            this.renderPsykers(ctx, psykers);
        }
        if (unit._rules.size > 0) {
            this.renderLine(ctx);
            this._currentY += 2;
            this.renderRules(ctx, unit);
        }
        if (unit._factions.size > 0) {
            this.renderLine(ctx);
            this._currentY += 2;
            this.renderFactions(ctx, unit);
        }
        if (unit._keywords.size > 0) {
            this.renderLine(ctx);
            this._currentY += 2;
            this.renderKeywords(ctx, unit);
        }
        if (unit._models.length > 0) {
            this.renderLine(ctx);
            this._currentY += 2;
            this.renderModelList(ctx, uniqueModels);
        }
        if (unit._woundTracker.length > 0) {
            this._currentY += 2;
            this.renderLine(ctx);
            const trackerLabelWidths = [];
            this._trackerLabelWidth.forEach(element => {
                trackerLabelWidths.push(element * this._maxWidth);
            });
            let labels = Renderer40k._trackerLabels;
            if (unit._woundTracker.length == 4) {
                let i = 1;
                for (let key of unit._woundTracker[0]._table.values()) {
                    labels[i++] = key;
                }
            }
            else if (unit._woundTracker.length == 3) {
                let i = 1;
                for (let key of unit._woundTracker[0]._table.keys()) {
                    labels[i++] = key;
                }
            }
            this.renderTableHeader(ctx, labels, trackerLabelWidths);
            this.renderWoundTable(ctx, unit, trackerLabelWidths);
        }
        if (explosions.length > 0) {
            this._currentY += 2;
            this.renderLine(ctx);
            const explLabelWidths = [];
            this._explosionLabelWidthNormalized.forEach(element => {
                explLabelWidths.push(element * this._maxWidth);
            });
            this.renderTableHeader(ctx, Renderer40k._explosionLabels, explLabelWidths);
            this.renderExplosion(ctx, explosions, explLabelWidths);
        }
        if (this._showWoundBoxes) {
            let hasTracks = false;
            for (let model of unit._models) {
                if (model._wounds > 2) {
                    hasTracks = true;
                }
            }
            if (hasTracks) {
                this.renderLine(ctx);
                this._currentY += 5;
                this.renderWoundBoxes(ctx, unit._models);
            }
        }
        this._currentY += 2;
        const totalHeight = this._currentY - (yOffset + Renderer40k._margin);
        const totalWidth = this._maxWidth;
        this.renderBorder(ctx, this._currentX, yOffset + Renderer40k._margin, totalWidth, totalHeight);
        this.renderWatermark(ctx);
        return [this._maxWidth, this._currentY];
    }
    renderHeader(unit, ctx) {
        ctx.globalAlpha = 1;
        ctx.fillStyle = Renderer40k._blackColor;
        const xStart = this._currentX;
        const xEnd = this._currentX + this._maxWidth;
        const yStart = this._currentY;
        const titleHeight = 36;
        const yEnd = yStart + titleHeight;
        ctx.beginPath();
        ctx.moveTo(xStart, yStart + Renderer40k._bevelSize);
        ctx.lineTo(xStart, yEnd);
        ctx.lineTo(xEnd, yEnd);
        ctx.lineTo(xEnd, yStart + Renderer40k._bevelSize);
        ctx.lineTo(xEnd - Renderer40k._bevelSize, yStart);
        ctx.lineTo(xStart + Renderer40k._bevelSize, yStart);
        ctx.closePath();
        ctx.fill();
        let imgX = xStart + 6;
        if (this._octagon) {
            ctx.drawImage(this._octagon, imgX, yStart + 2, 32, 32);
            const roleImg = this._roles.get(unit._role);
            if (roleImg) {
                ctx.drawImage(roleImg, imgX + 4, yStart + 2 + 4, 24, 24);
            }
            ctx.fillStyle = 'white';
            ctx.font = "18px serif";
            imgX += 34;
            ctx.drawImage(this._octagon, imgX, yStart + 2, 32, 32);
            Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, unit._powerLevel.toString(), imgX, yStart + 2, 32, 32, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
            imgX += 34;
            ctx.drawImage(this._octagon, imgX, yStart + 2, 32, 32);
            Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, unit._points.toString(), imgX, yStart + 2, 32, 32, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        }
        let iters = 0;
        let title_size = 28;
        const title_x = imgX + 6;
        ctx.font = title_size + 'px ' + 'bold serif';
        const unitName = unit._name.toLocaleUpperCase();
        let check = ctx.measureText(unitName);
        const maxWidth = this._maxWidth - title_x;
        while (iters < 6 && check.width > maxWidth) {
            iters += 1;
            title_size -= 2;
            ctx.font = title_size + 'px ' + 'bold serif';
            check = ctx.measureText(unitName);
        }
        ctx.fillStyle = 'white';
        ctx.textBaseline = 'top';
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, unitName, title_x, yStart, maxWidth, titleHeight, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        this._currentY += titleHeight;
    }
    renderPsykers(ctx, psykers) {
        ctx.font = '14px sans-serif';
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, "PSYKERS", this._currentX + 20, this._currentY, 100, 16, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Left);
        ctx.font = '12px serif';
        this._currentY += 2;
        for (let psyker of psykers) {
            this._currentY = Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderParagraph"])(ctx, "CAST: " + psyker._cast, this._currentX + this._descriptionStartX, this._currentY, this._descriptionWidth);
            this._currentY += 2;
            this._currentY = Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderParagraph"])(ctx, "DENY: " + psyker._deny, this._currentX + this._descriptionStartX, this._currentY, this._descriptionWidth);
            this._currentY += 2;
            this._currentY = Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderParagraph"])(ctx, "POWERS KNOWN: " + psyker._powers, this._currentX + this._descriptionStartX, this._currentY, this._descriptionWidth);
            this._currentY += 2;
            if (psyker._other) {
                this._currentY = Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderParagraph"])(ctx, "OTHER: " + psyker._other, this._currentX + this._descriptionStartX, this._currentY, this._descriptionWidth);
                this._currentY += 2;
            }
        }
    }
}
Renderer40k._res = 144;
Renderer40k._margin = 0;
Renderer40k._bevelSize = 15;
Renderer40k._blackColor = '#1d272a';
Renderer40k._grey1 = '#b3bbb5';
Renderer40k._greyLight = '#dde1df';
Renderer40k._fillColor = '#f6f6f6';
Renderer40k._unitLabels = ["MODEL", "M", "WS", "BS", "S", "T", "W", "A", "LD", "SAVE"];
Renderer40k._weaponLabels = ["WEAPONS", "RANGE", "TYPE", "S", "AP", "D", "ABILITIES"];
Renderer40k._spellLabels = ["PSYCHIC POWER", "MANIFEST", "RANGE", "DETAILS"];
Renderer40k._explosionLabels = ["EXPLOSION", "DICE ROLL", "DISTANCE", "MORTAL WOUNDS"];
Renderer40k._trackerLabels = ["WOUND TRACK", "REMAINING W", "ATTRIBUTE", "ATTRIBUTE", "ATTRIBUTE"];
;


/***/ }),

/***/ "./src/rendererAoS.ts":
/*!****************************!*\
  !*** ./src/rendererAoS.ts ***!
  \****************************/
/*! exports provided: RendererAoS */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RendererAoS", function() { return RendererAoS; });
/* harmony import */ var _rosterAoS__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rosterAoS */ "./src/rosterAoS.ts");
/* harmony import */ var _renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./renderer */ "./src/renderer.ts");


class RendererAoS {
    constructor(roster) {
        this._statsWheel = null;
        this._roster = null;
        this._currentX = 0;
        this._currentY = 0;
        this._maxWidth = 0;
        this._maxHeight = 0;
        this._unitLabelWidthsNormalized = [0.4, 0.15, 0.15, 0.15, 0.15];
        this._weaponLabelWidthNormalized = [0.4, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1];
        this._spellLabelWidthNormalized = [0.3, 0.2, 0.5];
        this._prayerLabelWidthNormalized = [0.4, 0.6];
        this._trackerLabelWidth = [0.3, 0.2, 0.15, 0.15, 0.15];
        this._roster = roster;
        this._statsWheel = document.getElementById('aos_stats');
    }
    render(title, list, forces) {
        if (this._roster == null) {
            return;
        }
        if (title) {
            title.innerHTML = '<h3>' + this._roster._name + ' (' + this._roster._points + ' pts, ' + this._roster._commandPoints + ' CP)</h3>';
        }
        for (let force of this._roster._forces) {
            const forceTitle = document.createElement('div');
            if (forceTitle) {
                forceTitle.innerHTML = '<p>' + force._catalog + ' ' + force._name + '</p>';
            }
            if (list)
                list.appendChild(forceTitle);
            const table = document.createElement('table');
            table.classList.add('table');
            table.classList.add('table-sm');
            table.classList.add('table-striped');
            const thead = document.createElement('thead');
            table.appendChild(thead);
            thead.classList.add('thead-light');
            const tr = document.createElement('tr');
            thead.appendChild(tr);
            const headerInfo = [{ name: "NAME", w: '35%' }, { name: "ROLE", w: '25%' }, { name: "MODELS", w: '25%' }, { name: "POINTS", w: '15%' }];
            headerInfo.forEach(element => {
                let th = document.createElement('th');
                th.scope = "col";
                th.innerHTML = element.name;
                th.style.width = element.w;
                tr.appendChild(th);
            });
            forceTitle.appendChild(table);
            let body = document.createElement('tbody');
            table.appendChild(body);
            for (let unit of force._units) {
                let tr = document.createElement('tr');
                let uname = document.createElement('td');
                uname.innerHTML = unit._name;
                let role = document.createElement('td');
                role.innerHTML = _rosterAoS__WEBPACK_IMPORTED_MODULE_0__["AoSUnitRoleToString"][unit._role];
                let models = document.createElement('td');
                models.innerHTML = "";
                let pts = document.createElement('td');
                pts.innerHTML = unit._points.toString();
                tr.appendChild(uname);
                tr.appendChild(role);
                tr.appendChild(models);
                tr.appendChild(pts);
                body.appendChild(tr);
            }
            let allegianceAbilities = document.createElement('div');
            if (force._allegiance._commandAbilities.size > 0) {
                let allegianceHeader = document.createElement('h3');
                allegianceAbilities.appendChild(allegianceHeader);
                allegianceHeader.textContent = force._allegiance._name + " Allegiance Abilities";
                for (let command of force._allegiance._commandAbilities) {
                    let row = document.createElement('div');
                    let name = document.createElement('h4');
                    name.textContent = command[0];
                    let desc = document.createElement('p');
                    desc.textContent = command[1];
                    row.appendChild(name);
                    row.appendChild(desc);
                    allegianceAbilities.appendChild(row);
                }
            }
            if (force._allegiance._battleTraits.size > 0) {
                let traitHeader = document.createElement('h3');
                allegianceAbilities.appendChild(traitHeader);
                traitHeader.textContent = force._allegiance._name + " Allegiance Battle Traits";
                for (let trait of force._allegiance._battleTraits) {
                    let row = document.createElement('div');
                    let name = document.createElement('h4');
                    name.textContent = trait[0];
                    let desc = document.createElement('p');
                    desc.textContent = trait[1];
                    row.appendChild(name);
                    row.appendChild(desc);
                    allegianceAbilities.appendChild(row);
                }
            }
            if (forces)
                forces.appendChild(allegianceAbilities);
            for (let unit of force._units) {
                let canvas = document.createElement('canvas');
                canvas.width = RendererAoS._res * 5.5;
                canvas.height = RendererAoS._res * 8.5;
                const dims = this.renderUnit(unit, canvas, 0, 0);
                const border = 25;
                let finalCanvas = document.createElement('canvas');
                finalCanvas.width = dims[0] + border * 2;
                finalCanvas.height = dims[1] + border * 2;
                let finalCtx = finalCanvas.getContext('2d');
                finalCtx === null || finalCtx === void 0 ? void 0 : finalCtx.drawImage(canvas, border, border);
                if (forces)
                    forces.appendChild(finalCanvas);
            }
        }
    }
    renderUnit(unit, canvas, xOffset, yOffset) {
        let ctx = canvas.getContext('2d');
        if (!ctx) {
            return [0, 0];
        }
        this._currentX = xOffset + RendererAoS._margin;
        this._currentY = yOffset + RendererAoS._margin;
        this._maxWidth = canvas.width - this._currentX;
        this._maxHeight = Math.max(0, canvas.height - this._currentY);
        this.renderHeader(unit, ctx);
        const unitLabelWidths = [];
        this._unitLabelWidthsNormalized.forEach(element => {
            unitLabelWidths.push(element * this._maxWidth);
        });
        this.renderTableHeader(ctx, RendererAoS._unitLabels, unitLabelWidths);
        this.renderUnitStats(ctx, unit, unitLabelWidths, 0);
        const uniqueWeapons = [];
        const scratchMap = new Map();
        for (const w of unit._weapons) {
            if (!scratchMap.has(w._name)) {
                scratchMap.set(w._name, w);
                uniqueWeapons.push(w);
            }
        }
        let missileWeapons = [];
        let meleeWeapons = [];
        for (let weapon of uniqueWeapons) {
            if (weapon._type == "Melee") {
                meleeWeapons.push(weapon);
            }
            else {
                missileWeapons.push(weapon);
            }
        }
        if (missileWeapons.length) {
            const weaponLabelWidths = [];
            this._weaponLabelWidthNormalized.forEach(element => {
                weaponLabelWidths.push(element * this._maxWidth);
            });
            this.renderLine(ctx);
            this.renderTableHeader(ctx, RendererAoS._weaponLabels, weaponLabelWidths);
            this.renderWeapons(ctx, missileWeapons, weaponLabelWidths);
        }
        if (meleeWeapons.length) {
            const meleeLabelWidths = [];
            this._weaponLabelWidthNormalized.forEach(element => {
                meleeLabelWidths.push(element * this._maxWidth);
            });
            this.renderLine(ctx);
            this.renderTableHeader(ctx, RendererAoS._meleeLabels, meleeLabelWidths);
            this.renderWeapons(ctx, meleeWeapons, meleeLabelWidths);
        }
        if (unit._spells.length > 0) {
            const spellLabelWidths = [];
            this._spellLabelWidthNormalized.forEach(element => {
                spellLabelWidths.push(element * this._maxWidth);
            });
            this.renderLine(ctx);
            this.renderTableHeader(ctx, RendererAoS._spellLabels, spellLabelWidths);
            this.renderSpells(ctx, unit._spells, spellLabelWidths);
        }
        if (unit._prayers.length > 0) {
            const prayerLabelWidths = [];
            this._prayerLabelWidthNormalized.forEach(element => {
                prayerLabelWidths.push(element * this._maxWidth);
            });
            this.renderLine(ctx);
            this.renderTableHeader(ctx, RendererAoS._prayerLabels, prayerLabelWidths);
            this.renderPrayers(ctx, unit._prayers, prayerLabelWidths);
        }
        if (unit._abilities.size > 0) {
            this.renderLine(ctx);
            this._currentY += 2;
            this.renderMap(ctx, "ABILITIES", unit._abilities);
        }
        if (unit._commandAbilities.size > 0) {
            this.renderLine(ctx);
            this._currentY += 2;
            this.renderMap(ctx, "COMMAND ABILITIES", unit._commandAbilities);
        }
        if (unit._commandTraits.size > 0) {
            this.renderLine(ctx);
            this._currentY += 2;
            this.renderMap(ctx, "COMMAND TRAITS", unit._commandTraits);
        }
        if (unit._artefacts.size > 0) {
            this.renderLine(ctx);
            this._currentY += 2;
            this.renderMap(ctx, "ARTEFACTS", unit._artefacts);
        }
        if (unit._magic.size > 0) {
            this.renderLine(ctx);
            this._currentY += 2;
            this.renderMap(ctx, "MAGIC", unit._magic);
        }
        if (unit._woundTracker) {
            this.renderLine(ctx);
            const trackerLabelWidths = [];
            this._trackerLabelWidth.forEach(element => {
                trackerLabelWidths.push(element * this._maxWidth);
            });
            this.renderTableHeader(ctx, unit._woundTracker._woundTrackerLabels, trackerLabelWidths);
            this.renderWoundTable(ctx, unit, trackerLabelWidths);
        }
        if (unit._keywords.size > 0) {
            this.renderLine(ctx);
            this._currentY += 2;
            this.renderKeywords(ctx, unit);
        }
        const totalHeight = this._currentY - (yOffset + RendererAoS._margin);
        const totalWidth = this._maxWidth;
        this.renderBorder(ctx, this._currentX, yOffset + RendererAoS._margin, totalWidth, totalHeight);
        return [this._maxWidth, this._currentY];
    }
    renderHeader(unit, ctx) {
        ctx.globalAlpha = 1;
        ctx.fillStyle = RendererAoS._blackColor;
        const xStart = this._currentX;
        const xEnd = this._currentX + this._maxWidth;
        const yStart = this._currentY;
        const titleHeight = 36;
        const yEnd = yStart + titleHeight;
        ctx.beginPath();
        ctx.moveTo(xStart, yStart + RendererAoS._bevelSize);
        ctx.lineTo(xStart, yEnd);
        ctx.lineTo(xEnd, yEnd);
        ctx.lineTo(xEnd, yStart + RendererAoS._bevelSize);
        ctx.lineTo(xEnd - RendererAoS._bevelSize, yStart);
        ctx.lineTo(xStart + RendererAoS._bevelSize, yStart);
        ctx.closePath();
        ctx.fill();
        let imgX = xStart + 6;
        let iters = 0;
        let title_size = 28;
        const title_x = imgX + 6;
        ctx.font = title_size + 'px ' + 'bold serif';
        const unitName = unit._name.toLocaleUpperCase();
        let check = ctx.measureText(unitName);
        const maxWidth = this._maxWidth - title_x;
        while (iters < 6 && check.width > maxWidth) {
            iters += 1;
            title_size -= 2;
            ctx.font = title_size + 'px ' + 'bold serif';
            check = ctx.measureText(unitName);
        }
        ctx.fillStyle = 'white';
        ctx.textBaseline = 'top';
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, unitName, title_x, yStart, maxWidth, titleHeight, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        this._currentY += titleHeight;
    }
    renderTableHeader(ctx, labels, columnWidths) {
        let x = this._currentX;
        const height = 22;
        const width = this._maxWidth;
        ctx.fillStyle = RendererAoS._grey1;
        ctx.fillRect(this._currentX, this._currentY, width, height);
        ctx.fillStyle = RendererAoS._blackColor;
        ctx.font = '14px sans-serif';
        var w = 50;
        if (labels) {
            ctx.font = '12px sans-serif';
            for (let i = 0; i < labels.length; i++) {
                if (columnWidths)
                    w = columnWidths[i];
                Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, labels[i], x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
                x += w;
            }
        }
        this._currentY += height;
    }
    renderKeywords(ctx, unit) {
        ctx.font = '14px sans-serif';
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, "KEYWORDS", this._currentX + 20, this._currentY, 100, 16, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Left);
        ctx.font = '12px serif';
        const kwlist = [...unit._keywords];
        const kw = kwlist.join(", ").toLocaleUpperCase();
        this._currentY = Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderParagraph"])(ctx, kw, this._currentX + 190, this._currentY, 500);
        this._currentY += 4;
    }
    renderLine(ctx) {
        ctx.lineWidth = 2;
        ctx.strokeStyle = RendererAoS._blackColor;
        ctx.beginPath();
        ctx.moveTo(this._currentX, this._currentY);
        ctx.lineTo(this._currentX + this._maxWidth, this._currentY);
        ctx.stroke();
        this._currentY += 1;
    }
    renderWeapons(ctx, weapons, columnWidths) {
        ctx.font = '12px sans-serif';
        const height = 22;
        ctx.save();
        let i = 0;
        let w = 50;
        for (const weapon of weapons) {
            let ci = 0;
            let x = this._currentX;
            let xStart = this._currentX;
            let yStart = this._currentY;
            ctx.fillStyle = RendererAoS._blackColor;
            if (columnWidths)
                w = columnWidths[ci++];
            Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, weapon._name.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
            x += w;
            if (columnWidths)
                w = columnWidths[ci++];
            Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, weapon._range.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
            x += w;
            if (columnWidths)
                w = columnWidths[ci++];
            Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, weapon._attacks.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
            x += w;
            if (columnWidths)
                w = columnWidths[ci++];
            Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, weapon._toHit.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
            x += w;
            if (columnWidths)
                w = columnWidths[ci++];
            Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, weapon._toWound.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
            x += w;
            if (columnWidths)
                w = columnWidths[ci++];
            Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, weapon._rend.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
            x += w;
            if (columnWidths)
                w = columnWidths[ci++];
            Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, weapon._damage.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
            x += w;
            this._currentY += height;
            ctx.save();
            ctx.globalCompositeOperation = "destination-over";
            const actualHeight = this._currentY - yStart;
            if (i % 2)
                ctx.fillStyle = RendererAoS._greyLight;
            else
                ctx.fillStyle = '#ffffff';
            ctx.fillRect(xStart, yStart, this._maxWidth, actualHeight);
            i++;
            ctx.restore();
        }
        ctx.restore();
    }
    renderMap(ctx, title, data) {
        ctx.font = '14px sans-serif';
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, title, this._currentX + 20, this._currentY, 100, 16, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Left);
        ctx.font = '12px serif';
        for (let ab of data) {
            const content = ab[0].toUpperCase();
            const desc = ab[1];
            this._currentY += 2;
            this._currentY = Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderParagraph"])(ctx, content + ": " + desc, this._currentX + 190, this._currentY, 500);
        }
        this._currentY += 4;
    }
    renderSpells(ctx, spells, columnWidths) {
        ctx.font = '12px sans-serif';
        const height = 22;
        let i = 0;
        let w = 50;
        ctx.save();
        for (const spell of spells) {
            let ci = 0;
            let x = this._currentX;
            let xStart = this._currentX;
            let yStart = this._currentY;
            ctx.fillStyle = RendererAoS._blackColor;
            if (columnWidths)
                w = columnWidths[ci++];
            Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, spell._name.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
            x += w;
            if (columnWidths)
                w = columnWidths[ci++];
            Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, spell._castingValue.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
            x += w;
            if (columnWidths)
                w = columnWidths[ci++];
            this._currentY += 2;
            this._currentY = Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderParagraph"])(ctx, spell._description, x, this._currentY, w);
            x += w;
            ctx.save();
            if (i % 2)
                ctx.fillStyle = RendererAoS._greyLight;
            else
                ctx.fillStyle = '#ffffff';
            ctx.globalCompositeOperation = "destination-over";
            const actualHeight = this._currentY - yStart;
            ctx.fillRect(xStart, yStart, this._maxWidth, actualHeight);
            i++;
            ctx.restore();
        }
        ctx.restore();
    }
    renderPrayers(ctx, prayers, columnWidths) {
        ctx.font = '12px sans-serif';
        const height = 22;
        let i = 0;
        let w = 50;
        ctx.save();
        for (const prayer of prayers) {
            let ci = 0;
            let x = this._currentX;
            let xStart = this._currentX;
            let yStart = this._currentY;
            ctx.fillStyle = RendererAoS._blackColor;
            if (columnWidths)
                w = columnWidths[ci++];
            Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, prayer._name.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
            x += w;
            if (columnWidths)
                w = columnWidths[ci++];
            this._currentY += 2;
            this._currentY = Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderParagraph"])(ctx, prayer._description, x, this._currentY, w);
            x += w;
            ctx.save();
            if (i % 2)
                ctx.fillStyle = RendererAoS._greyLight;
            else
                ctx.fillStyle = '#ffffff';
            ctx.globalCompositeOperation = "destination-over";
            const actualHeight = this._currentY - yStart;
            ctx.fillRect(xStart, yStart, this._maxWidth, actualHeight);
            i++;
            ctx.restore();
        }
        ctx.restore();
    }
    renderUnitStats(ctx, unit, columnWidths, bg) {
        const height = 22;
        let w = 50;
        let x = this._currentX;
        let ci = 0;
        if (bg % 2)
            ctx.fillStyle = RendererAoS._greyLight;
        else
            ctx.fillStyle = '#ffffff';
        ctx.fillRect(x, this._currentY, this._maxWidth, height);
        ctx.fillStyle = RendererAoS._blackColor;
        ctx.font = '12px sans-serif';
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, unit._name.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, unit._move.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, unit._wounds.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, unit._bravery.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, unit._save.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        this._currentY += height;
    }
    renderWoundTable(ctx, unit, columnWidths) {
        const height = 22;
        if (unit._woundTracker == null) {
            return;
        }
        let w = 50;
        let x = this._currentX;
        let ci = 0;
        ctx.fillStyle = RendererAoS._greyLight;
        ctx.fillRect(x, this._currentY, this._maxWidth, height);
        ctx.fillStyle = RendererAoS._blackColor;
        ctx.font = '12px sans-serif';
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, unit._woundTracker._name, x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        for (let attr of unit._woundTracker._table) {
            if (columnWidths)
                w = columnWidths[ci++];
            Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, attr[1], x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
            x += w;
        }
        this._currentY += height;
    }
    renderBorder(ctx, x, y, w, h) {
        ctx.strokeStyle = RendererAoS._blackColor;
        ctx.beginPath();
        ctx.moveTo(x, y + RendererAoS._bevelSize);
        ctx.lineTo(x, y + h - RendererAoS._bevelSize);
        ctx.lineTo(x + RendererAoS._bevelSize, y + h);
        ctx.lineTo(x + w - RendererAoS._bevelSize, y + h);
        ctx.lineTo(x + w, y + h - RendererAoS._bevelSize);
        ctx.lineTo(x + w, y + RendererAoS._bevelSize);
        ctx.lineTo(x + w - RendererAoS._bevelSize, y);
        ctx.lineTo(x + RendererAoS._bevelSize, y);
        ctx.closePath();
        ctx.stroke();
        ctx.save();
        ctx.fillStyle = RendererAoS._fillColor;
        ctx.globalCompositeOperation = "destination-over";
        ctx.beginPath();
        ctx.moveTo(x, y + RendererAoS._bevelSize);
        ctx.lineTo(x, y + h - RendererAoS._bevelSize);
        ctx.lineTo(x + RendererAoS._bevelSize, y + h);
        ctx.lineTo(x + w - RendererAoS._bevelSize, y + h);
        ctx.lineTo(x + w, y + h - RendererAoS._bevelSize);
        ctx.lineTo(x + w, y + RendererAoS._bevelSize);
        ctx.lineTo(x + w - RendererAoS._bevelSize, y);
        ctx.lineTo(x + RendererAoS._bevelSize, y);
        ctx.closePath();
        ctx.fill();
        ctx.restore();
    }
}
RendererAoS._res = 144;
RendererAoS._margin = 0;
RendererAoS._bevelSize = 15;
RendererAoS._blackColor = '#1d272a';
RendererAoS._grey1 = '#b3bbb5';
RendererAoS._greyLight = '#dde1df';
RendererAoS._fillColor = '#f6f6f6';
RendererAoS._unitLabels = ["UNIT", "MOVE", "WOUNDS", "BRAVERY", "SAVE"];
RendererAoS._weaponLabels = ["MISSILE WEAPONS", "RANGE", "ATTACKS", "TO HIT", "TO WOUND", "REND", "DAMAGE"];
RendererAoS._meleeLabels = ["MELEE WEAPONS", "RANGE", "ATTACKS", "TO HIT", "TO WOUND", "REND", "DAMAGE"];
RendererAoS._spellLabels = ["SPELL", "CASTING VALUE", "DESCRIPTION"];
RendererAoS._prayerLabels = ["PRAYER", "DESCRIPTION"];


/***/ }),

/***/ "./src/rendererWarcry.ts":
/*!*******************************!*\
  !*** ./src/rendererWarcry.ts ***!
  \*******************************/
/*! exports provided: RendererWarcry */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RendererWarcry", function() { return RendererWarcry; });
/* harmony import */ var _rosterWarcry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rosterWarcry */ "./src/rosterWarcry.ts");
/* harmony import */ var _renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./renderer */ "./src/renderer.ts");


class RendererWarcry {
    constructor(roster) {
        this._roster = null;
        this._currentX = 0;
        this._currentY = 0;
        this._maxWidth = 0;
        this._maxHeight = 0;
        this._unitLabelWidthsNormalized = [0.4, 0.20, 0.20, 0.20];
        this._weaponLabelWidthNormalized = [0.4, 0.15, 0.15, 0.15, 0.15];
        this._roster = roster;
    }
    render(title, list, forces) {
        if (this._roster == null) {
            return;
        }
        if (title) {
            title.innerHTML = '<h3>' + this._roster._name + ' (' + this._roster._points + ' pts</h3>';
        }
        for (let force of this._roster._forces) {
            const forceTitle = document.createElement('div');
            if (forceTitle) {
                forceTitle.innerHTML = '<p>' + force._catalog + ' ' + force._name + '</p>';
            }
            if (list)
                list.appendChild(forceTitle);
            const table = document.createElement('table');
            table.classList.add('table');
            table.classList.add('table-sm');
            table.classList.add('table-striped');
            const thead = document.createElement('thead');
            table.appendChild(thead);
            thead.classList.add('thead-light');
            const tr = document.createElement('tr');
            thead.appendChild(tr);
            const headerInfo = [{ name: "NAME", w: '35%' }, { name: "ROLE", w: '25%' }, { name: "POINTS", w: '15%' }];
            headerInfo.forEach(element => {
                let th = document.createElement('th');
                th.scope = "col";
                th.innerHTML = element.name;
                th.style.width = element.w;
                tr.appendChild(th);
            });
            forceTitle.appendChild(table);
            let body = document.createElement('tbody');
            table.appendChild(body);
            for (let unit of force._units) {
                let tr = document.createElement('tr');
                let uname = document.createElement('td');
                uname.innerHTML = unit._name;
                let role = document.createElement('td');
                role.innerHTML = _rosterWarcry__WEBPACK_IMPORTED_MODULE_0__["WarcryUnitRoleToString"][unit._role];
                let pts = document.createElement('td');
                pts.innerHTML = unit._points.toString();
                tr.appendChild(uname);
                tr.appendChild(role);
                tr.appendChild(pts);
                body.appendChild(tr);
            }
            let allegianceAbilities = document.createElement('div');
            if (force._allegiance._rules.size > 0) {
                let abilityHeader = document.createElement('h3');
                allegianceAbilities.appendChild(abilityHeader);
                abilityHeader.textContent = force._allegiance._name + " Abilities";
                for (let trait of force._allegiance._rules) {
                    let row = document.createElement('div');
                    let name = document.createElement('h4');
                    name.textContent = trait[0];
                    let desc = document.createElement('p');
                    desc.textContent = trait[1];
                    row.appendChild(name);
                    row.appendChild(desc);
                    allegianceAbilities.appendChild(row);
                }
            }
            if (forces)
                forces.appendChild(allegianceAbilities);
            for (let unit of force._units) {
                let canvas = document.createElement('canvas');
                canvas.width = RendererWarcry._res * 5.5;
                canvas.height = RendererWarcry._res * 8.5;
                const dims = this.renderUnit(unit, canvas, 0, 0);
                const border = 25;
                let finalCanvas = document.createElement('canvas');
                finalCanvas.width = dims[0] + border * 2;
                finalCanvas.height = dims[1] + border * 2;
                let finalCtx = finalCanvas.getContext('2d');
                finalCtx === null || finalCtx === void 0 ? void 0 : finalCtx.drawImage(canvas, border, border);
                if (forces)
                    forces.appendChild(finalCanvas);
            }
        }
    }
    renderUnit(unit, canvas, xOffset, yOffset) {
        let ctx = canvas.getContext('2d');
        if (!ctx) {
            return [0, 0];
        }
        this._currentX = xOffset + RendererWarcry._margin;
        this._currentY = yOffset + RendererWarcry._margin;
        this._maxWidth = canvas.width - this._currentX;
        this._maxHeight = Math.max(0, canvas.height - this._currentY);
        this.renderHeader(unit, ctx);
        const unitLabelWidths = [];
        this._unitLabelWidthsNormalized.forEach(element => {
            unitLabelWidths.push(element * this._maxWidth);
        });
        this.renderTableHeader(ctx, RendererWarcry._unitLabels, unitLabelWidths);
        this.renderUnitStats(ctx, unit, unitLabelWidths, 0);
        const weaponLabelWidths = [];
        this._weaponLabelWidthNormalized.forEach(element => {
            weaponLabelWidths.push(element * this._maxWidth);
        });
        this.renderLine(ctx);
        this.renderTableHeader(ctx, RendererWarcry._weaponLabels, weaponLabelWidths);
        this.renderWeapons(ctx, unit._weapons, weaponLabelWidths);
        if (unit._keywords.size > 0) {
            this.renderLine(ctx);
            this._currentY += 2;
            this.renderKeywords(ctx, unit);
        }
        const totalHeight = this._currentY - (yOffset + RendererWarcry._margin);
        const totalWidth = this._maxWidth;
        this.renderBorder(ctx, this._currentX, yOffset + RendererWarcry._margin, totalWidth, totalHeight);
        return [this._maxWidth, this._currentY];
    }
    renderHeader(unit, ctx) {
        ctx.globalAlpha = 1;
        ctx.fillStyle = RendererWarcry._blackColor;
        const xStart = this._currentX;
        const xEnd = this._currentX + this._maxWidth;
        const yStart = this._currentY;
        const titleHeight = 36;
        const yEnd = yStart + titleHeight;
        ctx.beginPath();
        ctx.moveTo(xStart, yStart + RendererWarcry._bevelSize);
        ctx.lineTo(xStart, yEnd);
        ctx.lineTo(xEnd, yEnd);
        ctx.lineTo(xEnd, yStart + RendererWarcry._bevelSize);
        ctx.lineTo(xEnd - RendererWarcry._bevelSize, yStart);
        ctx.lineTo(xStart + RendererWarcry._bevelSize, yStart);
        ctx.closePath();
        ctx.fill();
        let imgX = xStart + 6;
        let iters = 0;
        let title_size = 28;
        const title_x = imgX + 6;
        ctx.font = title_size + 'px ' + 'bold serif';
        const unitName = unit._name.toLocaleUpperCase();
        let check = ctx.measureText(unitName);
        const maxWidth = this._maxWidth - title_x;
        while (iters < 6 && check.width > maxWidth) {
            iters += 1;
            title_size -= 2;
            ctx.font = title_size + 'px ' + 'bold serif';
            check = ctx.measureText(unitName);
        }
        ctx.fillStyle = 'white';
        ctx.textBaseline = 'top';
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, unitName, title_x, yStart, maxWidth, titleHeight, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        this._currentY += titleHeight;
    }
    renderTableHeader(ctx, labels, columnWidths) {
        let x = this._currentX;
        const height = 22;
        const width = this._maxWidth;
        ctx.fillStyle = RendererWarcry._grey1;
        ctx.fillRect(this._currentX, this._currentY, width, height);
        ctx.fillStyle = RendererWarcry._blackColor;
        ctx.font = '14px sans-serif';
        var w = 50;
        if (labels) {
            ctx.font = '12px sans-serif';
            for (let i = 0; i < labels.length; i++) {
                if (columnWidths)
                    w = columnWidths[i];
                Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, labels[i], x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
                x += w;
            }
        }
        this._currentY += height;
    }
    renderKeywords(ctx, unit) {
        ctx.font = '14px sans-serif';
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, "KEYWORDS", this._currentX + 20, this._currentY, 100, 16, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Left);
        ctx.font = '12px serif';
        const kwlist = [...unit._keywords];
        const kw = kwlist.join(", ").toLocaleUpperCase();
        this._currentY = Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderParagraph"])(ctx, kw, this._currentX + 190, this._currentY, 500);
        this._currentY += 4;
    }
    renderUnitStats(ctx, unit, columnWidths, bg) {
        const height = 22;
        let w = 50;
        let x = this._currentX;
        let ci = 0;
        if (bg % 2)
            ctx.fillStyle = RendererWarcry._greyLight;
        else
            ctx.fillStyle = '#ffffff';
        ctx.fillRect(x, this._currentY, this._maxWidth, height);
        ctx.fillStyle = RendererWarcry._blackColor;
        ctx.font = '12px sans-serif';
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, unit._name.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, unit._move.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, unit._wounds.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        if (columnWidths)
            w = columnWidths[ci++];
        Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, unit._toughness.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
        x += w;
        this._currentY += height;
    }
    renderWeapons(ctx, weapons, columnWidths) {
        ctx.font = '12px sans-serif';
        const height = 22;
        ctx.save();
        let i = 0;
        let w = 50;
        for (const weapon of weapons) {
            let ci = 0;
            let x = this._currentX;
            let xStart = this._currentX;
            let yStart = this._currentY;
            ctx.fillStyle = RendererWarcry._blackColor;
            if (columnWidths)
                w = columnWidths[ci++];
            Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, weapon._name.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
            x += w;
            if (columnWidths)
                w = columnWidths[ci++];
            Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, weapon._range.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
            x += w;
            if (columnWidths)
                w = columnWidths[ci++];
            Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, weapon._attacks.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
            x += w;
            if (columnWidths)
                w = columnWidths[ci++];
            Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, weapon._strength.toString(), x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
            x += w;
            if (columnWidths)
                w = columnWidths[ci++];
            Object(_renderer__WEBPACK_IMPORTED_MODULE_1__["RenderText"])(ctx, weapon._damage, x, this._currentY, w, height, _renderer__WEBPACK_IMPORTED_MODULE_1__["Justification"].Center);
            x += w;
            this._currentY += height;
            ctx.save();
            ctx.globalCompositeOperation = "destination-over";
            const actualHeight = this._currentY - yStart;
            if (i % 2)
                ctx.fillStyle = RendererWarcry._greyLight;
            else
                ctx.fillStyle = '#ffffff';
            ctx.fillRect(xStart, yStart, this._maxWidth, actualHeight);
            i++;
            ctx.restore();
        }
        ctx.restore();
    }
    renderBorder(ctx, x, y, w, h) {
        ctx.strokeStyle = RendererWarcry._blackColor;
        ctx.beginPath();
        ctx.moveTo(x, y + RendererWarcry._bevelSize);
        ctx.lineTo(x, y + h - RendererWarcry._bevelSize);
        ctx.lineTo(x + RendererWarcry._bevelSize, y + h);
        ctx.lineTo(x + w - RendererWarcry._bevelSize, y + h);
        ctx.lineTo(x + w, y + h - RendererWarcry._bevelSize);
        ctx.lineTo(x + w, y + RendererWarcry._bevelSize);
        ctx.lineTo(x + w - RendererWarcry._bevelSize, y);
        ctx.lineTo(x + RendererWarcry._bevelSize, y);
        ctx.closePath();
        ctx.stroke();
        ctx.save();
        ctx.fillStyle = RendererWarcry._fillColor;
        ctx.globalCompositeOperation = "destination-over";
        ctx.beginPath();
        ctx.moveTo(x, y + RendererWarcry._bevelSize);
        ctx.lineTo(x, y + h - RendererWarcry._bevelSize);
        ctx.lineTo(x + RendererWarcry._bevelSize, y + h);
        ctx.lineTo(x + w - RendererWarcry._bevelSize, y + h);
        ctx.lineTo(x + w, y + h - RendererWarcry._bevelSize);
        ctx.lineTo(x + w, y + RendererWarcry._bevelSize);
        ctx.lineTo(x + w - RendererWarcry._bevelSize, y);
        ctx.lineTo(x + RendererWarcry._bevelSize, y);
        ctx.closePath();
        ctx.fill();
        ctx.restore();
    }
    renderLine(ctx) {
        ctx.lineWidth = 2;
        ctx.strokeStyle = RendererWarcry._blackColor;
        ctx.beginPath();
        ctx.moveTo(this._currentX, this._currentY);
        ctx.lineTo(this._currentX + this._maxWidth, this._currentY);
        ctx.stroke();
        this._currentY += 1;
    }
}
RendererWarcry._res = 144;
RendererWarcry._margin = 0;
RendererWarcry._bevelSize = 15;
RendererWarcry._blackColor = '#1d272a';
RendererWarcry._grey1 = '#b3bbb5';
RendererWarcry._greyLight = '#dde1df';
RendererWarcry._fillColor = '#f6f6f6';
RendererWarcry._unitLabels = ["UNIT", "MOVE", "WOUNDS", "TOUGHNESS"];
RendererWarcry._weaponLabels = ["WEAPON", "RANGE", "ATTACKS", "STRENGTH", "DAMAGE"];


/***/ }),

/***/ "./src/roster30k.ts":
/*!**************************!*\
  !*** ./src/roster30k.ts ***!
  \**************************/
/*! exports provided: Weapon30k, Psyker30k, PsychicPower30k, UnitRole30k, UnitRoleToString30k, Vehicle30k, Walker30k, Flyer30k, Model30k, Fortification30k, Unit30k, Force30k, Roster30k, Create30kRoster */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Weapon30k", function() { return Weapon30k; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Psyker30k", function() { return Psyker30k; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PsychicPower30k", function() { return PsychicPower30k; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnitRole30k", function() { return UnitRole30k; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnitRoleToString30k", function() { return UnitRoleToString30k; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Vehicle30k", function() { return Vehicle30k; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Walker30k", function() { return Walker30k; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Flyer30k", function() { return Flyer30k; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Model30k", function() { return Model30k; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Fortification30k", function() { return Fortification30k; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Unit30k", function() { return Unit30k; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Force30k", function() { return Force30k; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Roster30k", function() { return Roster30k; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Create30kRoster", function() { return Create30kRoster; });
class Weapon30k {
    constructor() {
        this._name = "";
        this._range = "Melee";
        this._str = "user";
        this._ap = "";
        this._type = "Melee";
    }
}
class Psyker30k {
    constructor() {
        this._name = "";
        this._masteryLevel = "";
        this._disciplines = "";
    }
}
class PsychicPower30k {
    constructor() {
        this._name = "";
        this._warpCharge = 0;
        this._category = "";
        this._range = "";
        this._details = "";
    }
}
var UnitRole30k;
(function (UnitRole30k) {
    UnitRole30k[UnitRole30k["NONE"] = 0] = "NONE";
    UnitRole30k[UnitRole30k["HQ"] = 1] = "HQ";
    UnitRole30k[UnitRole30k["TR"] = 2] = "TR";
    UnitRole30k[UnitRole30k["EL"] = 3] = "EL";
    UnitRole30k[UnitRole30k["FA"] = 4] = "FA";
    UnitRole30k[UnitRole30k["HS"] = 5] = "HS";
    UnitRole30k[UnitRole30k["FL"] = 6] = "FL";
    UnitRole30k[UnitRole30k["DT"] = 7] = "DT";
    UnitRole30k[UnitRole30k["FT"] = 8] = "FT";
    UnitRole30k[UnitRole30k["LW"] = 9] = "LW";
})(UnitRole30k || (UnitRole30k = {}));
const UnitRoleToString30k = [
    'None',
    'HQ',
    'Troops',
    'Elites',
    'Fast Attack',
    'Heavy Support',
    'Flyer',
    'Dedicated Transport',
    'Fortification',
    'Lord of War',
];
class Vehicle30k {
    constructor() {
        this._name = "";
        this._bs = "";
        this._front = 4;
        this._side = 4;
        this._rear = 4;
        this._hp = 1;
        this._type = "";
        this._weapons = [];
    }
}
class Walker30k {
    constructor() {
        this._name = "";
        this._ws = "";
        this._bs = "";
        this._str = 4;
        this._front = 4;
        this._side = 4;
        this._rear = 4;
        this._initiative = 1;
        this._attacks = "";
        this._hp = 1;
        this._type = "";
        this._weapons = [];
    }
}
class Flyer30k {
    constructor() {
        this._name = "";
        this._bs = "";
        this._front = 4;
        this._side = 4;
        this._rear = 4;
        this._hp = 1;
        this._type = "";
        this._role = "";
        this._pursuit = "";
        this._agility = "";
        this._weapons = [];
    }
}
class Model30k {
    constructor() {
        this._name = "";
        this._count = 0;
        this._ws = "";
        this._bs = "";
        this._str = 4;
        this._toughness = 4;
        this._wounds = 1;
        this._initiative = 1;
        this._attacks = "";
        this._leadership = 7;
        this._save = "";
        this._weapons = [];
        this._psyker = null;
        this._psychicPowers = [];
    }
}
;
class Fortification30k {
    constructor() {
        this._name = "";
        this._composition = "";
        this._type = "";
    }
}
;
class Unit30k {
    constructor() {
        this._name = "";
        this._role = UnitRole30k.NONE;
        this._factions = new Set();
        this._keywords = new Set();
        this._abilities = new Map();
        this._rules = new Map();
        this._models = [];
        this._walkers = [];
        this._vehicles = [];
        this._flyers = [];
        this._points = 0;
    }
}
class Force30k {
    constructor() {
        this._catalog = "";
        this._name = "Unknown";
        this._faction = "Unknown";
        this._rules = new Map();
        this._units = [];
    }
}
;
class Roster30k {
    constructor() {
        this._commandPoints = 0;
        this._points = 0;
        this._name = "";
        this._forces = [];
    }
}
;
function Create30kRoster(doc) {
    var _a;
    if (doc) {
        let info = doc.querySelector("roster");
        if (info) {
            const roster = new Roster30k();
            const name = (_a = info.getAttributeNode("name")) === null || _a === void 0 ? void 0 : _a.nodeValue;
            if (name) {
                roster._name = name;
            }
            else {
                roster._name = "30k Army Roster";
            }
            ParseRosterPoints(doc, roster);
            ParseForces(doc, roster);
            return roster;
        }
    }
    return null;
}
function ParseRosterPoints(doc, roster) {
    var _a, _b;
    let costs = doc.querySelectorAll("roster>costs>cost");
    for (let cost of costs) {
        if (cost.hasAttribute("name") && cost.hasAttribute("value")) {
            let which = (_a = cost.getAttributeNode("name")) === null || _a === void 0 ? void 0 : _a.nodeValue;
            let value = (_b = cost.getAttributeNode("value")) === null || _b === void 0 ? void 0 : _b.nodeValue;
            if (value) {
                if (which === "pts") {
                    roster._points = +value;
                }
                else if (which === "CP") {
                    roster._commandPoints = +value;
                }
            }
        }
    }
}
function ParseForces(doc, roster) {
    var _a, _b, _c;
    let forcesRoot = doc.querySelectorAll("roster>forces>force");
    for (let root of forcesRoot) {
        if (root.hasAttribute("name") && root.hasAttribute("catalogueName")) {
            let f = new Force30k();
            let which = (_a = root.getAttributeNode("name")) === null || _a === void 0 ? void 0 : _a.nodeValue;
            let value = (_b = root.getAttributeNode("catalogueName")) === null || _b === void 0 ? void 0 : _b.nodeValue;
            if (which) {
                f._name = which;
            }
            if (value) {
                f._catalog = value;
            }
            if (!DuplicateForce(f, roster)) {
                const rules = root.querySelectorAll("force>rules>rule");
                for (let rule of rules) {
                    if (rule.hasAttribute("name")) {
                        let ruleName = (_c = rule.getAttributeNode("name")) === null || _c === void 0 ? void 0 : _c.nodeValue;
                        const desc = rule.querySelector("rule>description");
                        if (ruleName && desc) {
                            f._rules.set(ruleName, desc.textContent);
                        }
                    }
                }
            }
            ParseUnits(root, f);
            roster._forces.push(f);
        }
    }
}
function DuplicateForce(force, roster) {
    if (!roster || !force)
        return false;
    for (let f of roster._forces) {
        if (f._catalog === force._catalog)
            return true;
    }
    return false;
}
function ParseUnits(root, force) {
    let selections = root.querySelectorAll("force>selections>selection");
    for (let selection of selections) {
        let unit = CreateUnit(selection);
        if (unit && unit._role != UnitRole30k.NONE) {
            force._units.push(unit);
        }
    }
    force._units.sort((a, b) => {
        if (a._role > b._role)
            return 1;
        else if (a._role == b._role)
            return 0;
        return -1;
    });
}
function LookupRole(roleText) {
    switch (roleText) {
        case 'HQ': return UnitRole30k.HQ;
        case 'Troops': return UnitRole30k.TR;
        case 'Elites': return UnitRole30k.EL;
        case 'Fast Attack': return UnitRole30k.FA;
        case 'Heavy Support': return UnitRole30k.HS;
        case 'Flyer': return UnitRole30k.FL;
        case 'Dedicated Transport': return UnitRole30k.DT;
        case 'Fortification': return UnitRole30k.FT;
        case 'Lord of War': return UnitRole30k.LW;
    }
    return UnitRole30k.NONE;
}
function CreateUnit(root) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;
    let unit = new Unit30k();
    let unitName = (_a = root.getAttributeNode("name")) === null || _a === void 0 ? void 0 : _a.nodeValue;
    if (unitName) {
        unit._name = unitName;
    }
    let categories = root.querySelectorAll(":scope categories>category");
    for (let cat of categories) {
        let catName = (_b = cat.getAttributeNode("name")) === null || _b === void 0 ? void 0 : _b.nodeValue;
        if (catName) {
            const factPattern = "Faction: ";
            const factIndex = catName.lastIndexOf(factPattern);
            if (factIndex >= 0) {
                const factKeyword = catName.slice(factIndex + factPattern.length);
                unit._factions.add(factKeyword);
            }
            else {
                const roleText = catName.trim();
                const unitRole = LookupRole(roleText);
                if (unitRole != UnitRole30k.NONE) {
                    unit._role = unitRole;
                }
                else {
                    unit._keywords.add(catName);
                }
            }
        }
    }
    let activeModel = null;
    let activeWalker = null;
    let activeVehicle = null;
    let activeFlyer = null;
    let props = root.querySelectorAll(":scope profiles>profile");
    for (let prop of props) {
        let propName = (_c = prop.getAttributeNode("name")) === null || _c === void 0 ? void 0 : _c.nodeValue;
        let propType = (_d = prop.getAttributeNode("typeName")) === null || _d === void 0 ? void 0 : _d.nodeValue;
        if (propName && propType) {
            if (propType === "Unit") {
                activeModel = new Model30k();
                activeModel._name = propName;
                let chars = prop.querySelectorAll("characteristics>characteristic");
                for (let char of chars) {
                    let charName = (_e = char.getAttributeNode("name")) === null || _e === void 0 ? void 0 : _e.nodeValue;
                    if (charName) {
                        if (char.textContent) {
                            switch (charName) {
                                case 'WS':
                                    activeModel._ws = char.textContent;
                                    break;
                                case 'BS':
                                    activeModel._bs = char.textContent;
                                    break;
                                case 'S':
                                    activeModel._str = +char.textContent;
                                    break;
                                case 'T':
                                    activeModel._toughness = +char.textContent;
                                    break;
                                case 'W':
                                    activeModel._wounds = +char.textContent;
                                    break;
                                case 'I':
                                    activeModel._initiative = +char.textContent;
                                    break;
                                case 'A':
                                    activeModel._attacks = char.textContent;
                                    break;
                                case 'Ld':
                                    activeModel._leadership = +char.textContent;
                                    break;
                                case 'Save':
                                    activeModel._save = char.textContent;
                                    break;
                            }
                        }
                    }
                    if (prop.parentElement && prop.parentElement.parentElement) {
                        const parentSelection = prop.parentElement.parentElement;
                        let countValue = (_f = parentSelection.getAttributeNode("number")) === null || _f === void 0 ? void 0 : _f.nodeValue;
                        if (countValue) {
                            activeModel._count = +countValue;
                        }
                    }
                }
                unit._models.push(activeModel);
            }
            else if (propType === "Walker") {
                activeWalker = new Walker30k();
                activeWalker._name = propName;
                let chars = prop.querySelectorAll("characteristics>characteristic");
                for (let char of chars) {
                    let charName = (_g = char.getAttributeNode("name")) === null || _g === void 0 ? void 0 : _g.nodeValue;
                    if (charName) {
                        if (char.textContent) {
                            switch (charName) {
                                case 'WS':
                                    activeWalker._ws = char.textContent;
                                    break;
                                case 'BS':
                                    activeWalker._bs = char.textContent;
                                    break;
                                case 'S':
                                    activeWalker._str = +char.textContent;
                                    break;
                                case 'Front':
                                    activeWalker._front = +char.textContent;
                                    break;
                                case 'Side':
                                    activeWalker._side = +char.textContent;
                                    break;
                                case 'Rear':
                                    activeWalker._rear = +char.textContent;
                                    break;
                                case 'I':
                                    activeWalker._initiative = +char.textContent;
                                    break;
                                case 'A':
                                    activeWalker._attacks = char.textContent;
                                    break;
                                case 'HP':
                                    activeWalker._hp = +char.textContent;
                                    break;
                                case 'Type':
                                    activeWalker._type = char.textContent;
                                    break;
                            }
                        }
                    }
                }
                unit._walkers.push(activeWalker);
            }
            else if (propType === "Vehicle") {
                activeVehicle = new Vehicle30k();
                activeVehicle._name = propName;
                let chars = prop.querySelectorAll("characteristics>characteristic");
                for (let char of chars) {
                    let charName = (_h = char.getAttributeNode("name")) === null || _h === void 0 ? void 0 : _h.nodeValue;
                    if (charName) {
                        if (char.textContent) {
                            switch (charName) {
                                case 'BS':
                                    activeVehicle._bs = char.textContent;
                                    break;
                                case 'Front':
                                    activeVehicle._front = +char.textContent;
                                    break;
                                case 'Side':
                                    activeVehicle._side = +char.textContent;
                                    break;
                                case 'Rear':
                                    activeVehicle._rear = +char.textContent;
                                    break;
                                case 'HP':
                                    activeVehicle._hp = +char.textContent;
                                    break;
                                case 'Type':
                                    activeVehicle._type = char.textContent;
                                    break;
                            }
                        }
                    }
                }
                unit._vehicles.push(activeVehicle);
            }
            else if (propType === "Flyer") {
                activeFlyer = new Flyer30k();
                activeFlyer._name = propName;
                let chars = prop.querySelectorAll("characteristics>characteristic");
                for (let char of chars) {
                    let charName = (_j = char.getAttributeNode("name")) === null || _j === void 0 ? void 0 : _j.nodeValue;
                    if (charName) {
                        if (char.textContent) {
                            switch (charName) {
                                case 'BS':
                                    activeFlyer._bs = char.textContent;
                                    break;
                                case 'Front':
                                    activeFlyer._front = +char.textContent;
                                    break;
                                case 'Side':
                                    activeFlyer._side = +char.textContent;
                                    break;
                                case 'Rear':
                                    activeFlyer._rear = +char.textContent;
                                    break;
                                case 'HP':
                                    activeFlyer._hp = +char.textContent;
                                    break;
                                case 'Combat Role':
                                    activeFlyer._role = char.textContent;
                                    break;
                                case 'Pursuit':
                                    activeFlyer._pursuit = char.textContent;
                                    break;
                                case 'Agility':
                                    activeFlyer._agility = char.textContent;
                                    break;
                            }
                        }
                    }
                }
                unit._flyers.push(activeFlyer);
            }
        }
    }
    for (let prop of props) {
        let propName = (_k = prop.getAttributeNode("name")) === null || _k === void 0 ? void 0 : _k.nodeValue;
        let propType = (_l = prop.getAttributeNode("typeName")) === null || _l === void 0 ? void 0 : _l.nodeValue;
        if (propName && propType) {
            if (propType === "Wargear Item") {
                let chars = prop.querySelectorAll("characteristics>characteristic");
                for (let char of chars) {
                    let charName = (_m = char.getAttributeNode("name")) === null || _m === void 0 ? void 0 : _m.nodeValue;
                    if (charName && char.textContent && propName) {
                        if (charName === "Description") {
                            unit._abilities.set(propName, char.textContent);
                        }
                    }
                }
            }
            else if (propType === "Weapon") {
                let weapon = new Weapon30k();
                weapon._name = propName;
                let chars = prop.querySelectorAll("characteristics>characteristic");
                for (let char of chars) {
                    let charName = (_o = char.getAttributeNode("name")) === null || _o === void 0 ? void 0 : _o.nodeValue;
                    if (charName) {
                        if (char.textContent) {
                            switch (charName) {
                                case 'Range':
                                    weapon._range = char.textContent;
                                    break;
                                case 'Type':
                                    weapon._type = char.textContent;
                                    break;
                                case 'Strength':
                                    weapon._str = char.textContent;
                                    break;
                                case 'AP':
                                    weapon._ap = char.textContent;
                                    break;
                            }
                        }
                    }
                }
                if (activeModel)
                    activeModel._weapons.push(weapon);
                else if (activeWalker)
                    activeWalker._weapons.push(weapon);
                else if (activeVehicle)
                    activeVehicle._weapons.push(weapon);
                else if (activeFlyer)
                    activeFlyer._weapons.push(weapon);
                else {
                    console.log("Unexpected: Created a weapon without an active model.  Unit: " + unitName);
                }
            }
            else if (propType == "Transport") {
                let chars = prop.querySelectorAll("characteristics>characteristic");
                for (let char of chars) {
                    let charName = (_p = char.getAttributeNode("name")) === null || _p === void 0 ? void 0 : _p.nodeValue;
                    if (charName && char.textContent && propName) {
                        if (charName === "Capacity") {
                            unit._abilities.set(propName, char.textContent);
                        }
                    }
                }
            }
            else if (propType == "Psychic Power") {
                let power = new PsychicPower30k();
                power._name = propName;
                let chars = prop.querySelectorAll("characteristics>characteristic");
                for (let char of chars) {
                    let charName = (_q = char.getAttributeNode("name")) === null || _q === void 0 ? void 0 : _q.nodeValue;
                    if (charName) {
                        if (char.textContent) {
                            switch (charName) {
                                case 'Warp Charge':
                                    power._warpCharge = +char.textContent;
                                    break;
                                case 'Power Category':
                                    power._category = char.textContent;
                                    break;
                                case 'Range':
                                    power._range = char.textContent;
                                    break;
                                case 'Details':
                                    power._details = char.textContent;
                                    break;
                            }
                        }
                    }
                }
                if (activeModel)
                    activeModel._psychicPowers.push(power);
                else {
                    console.log("Unexpected: Created a psychic power without an active model.  Unit: " + unitName);
                }
            }
            else if (propType == "Psyker") {
                let psyker = new Psyker30k();
                psyker._name = propName;
                let chars = prop.querySelectorAll("characteristics>characteristic");
                for (let char of chars) {
                    let charName = (_r = char.getAttributeNode("name")) === null || _r === void 0 ? void 0 : _r.nodeValue;
                    if (charName && char.textContent) {
                        switch (charName) {
                            case 'Mastery Level':
                                psyker._masteryLevel = char.textContent;
                                break;
                            case 'Disciplines':
                                psyker._disciplines = char.textContent;
                                break;
                        }
                    }
                }
                if (activeModel)
                    activeModel._psyker = psyker;
                else {
                    console.log("Unexpected: Created a psyker without an active model.  Unit: " + unitName);
                }
            }
        }
        else if ((propType === "Unit") || (propType === "Walker") || (propType === "Vehicle")) {
        }
        else {
            console.log("Unknown property type: " + propType);
        }
    }
    let costs = root.querySelectorAll(":scope costs>cost");
    for (let cost of costs) {
        if (cost.hasAttribute("name") && cost.hasAttribute("value")) {
            let which = (_s = cost.getAttributeNode("name")) === null || _s === void 0 ? void 0 : _s.nodeValue;
            let value = (_t = cost.getAttributeNode("value")) === null || _t === void 0 ? void 0 : _t.nodeValue;
            if (value) {
                if (which == "pts") {
                    unit._points += +value;
                }
            }
        }
    }
    let rules = root.querySelectorAll(":scope rules > rule");
    for (let rule of rules) {
        if (rule.hasAttribute("name")) {
            let ruleName = (_u = rule.getAttributeNode("name")) === null || _u === void 0 ? void 0 : _u.nodeValue;
            let desc = rule.querySelector("description");
            if (ruleName && desc && desc.textContent) {
                unit._rules.set(ruleName, desc.textContent);
            }
        }
    }
    return unit;
}


/***/ }),

/***/ "./src/roster40k.ts":
/*!**************************!*\
  !*** ./src/roster40k.ts ***!
  \**************************/
/*! exports provided: Weapon, WoundTracker, Explosion, Psyker, PsychicPower, UnitRole, UnitRoleToString, Model, ProfileTable, Unit, Force, Roster40k, Create40kRoster */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Weapon", function() { return Weapon; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WoundTracker", function() { return WoundTracker; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Explosion", function() { return Explosion; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Psyker", function() { return Psyker; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PsychicPower", function() { return PsychicPower; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnitRole", function() { return UnitRole; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnitRoleToString", function() { return UnitRoleToString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Model", function() { return Model; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProfileTable", function() { return ProfileTable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Unit", function() { return Unit; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Force", function() { return Force; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Roster40k", function() { return Roster40k; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Create40kRoster", function() { return Create40kRoster; });
class Weapon {
    constructor() {
        this._name = "";
        this._range = "Melee";
        this._type = "Melee";
        this._str = "user";
        this._ap = "";
        this._damage = "";
        this._abilities = "";
    }
}
class WoundTracker {
    constructor() {
        this._name = "";
        this._table = new Map();
    }
}
class Explosion {
    constructor() {
        this._name = "";
        this._diceRoll = "";
        this._distance = "";
        this._mortalWounds = "";
    }
}
class Psyker {
    constructor() {
        this._name = "";
        this._cast = "";
        this._deny = "";
        this._powers = "";
        this._other = "";
    }
}
class PsychicPower {
    constructor() {
        this._name = "";
        this._manifest = 0;
        this._range = "";
        this._details = "";
    }
}
var UnitRole;
(function (UnitRole) {
    UnitRole[UnitRole["NONE"] = 0] = "NONE";
    UnitRole[UnitRole["HQ"] = 1] = "HQ";
    UnitRole[UnitRole["TR"] = 2] = "TR";
    UnitRole[UnitRole["EL"] = 3] = "EL";
    UnitRole[UnitRole["FA"] = 4] = "FA";
    UnitRole[UnitRole["HS"] = 5] = "HS";
    UnitRole[UnitRole["FL"] = 6] = "FL";
    UnitRole[UnitRole["DT"] = 7] = "DT";
    UnitRole[UnitRole["FT"] = 8] = "FT";
    UnitRole[UnitRole["LW"] = 9] = "LW";
    UnitRole[UnitRole["COMMANDER"] = 10] = "COMMANDER";
    UnitRole[UnitRole["LEADER"] = 11] = "LEADER";
    UnitRole[UnitRole["SPECIALIST"] = 12] = "SPECIALIST";
    UnitRole[UnitRole["NON_SPECIALIST"] = 13] = "NON_SPECIALIST";
})(UnitRole || (UnitRole = {}));
const UnitRoleToString = [
    'None',
    'HQ',
    'Troops',
    'Elites',
    'Fast Attack',
    'Heavy Support',
    'Flyer',
    'Dedicated Transport',
    'Fortification',
    'Lord of War',
    'Commander',
    'Leader',
    'Specialist',
    'Non-specialist'
];
class Model {
    constructor() {
        this._name = "";
        this._count = 0;
        this._move = "0\"";
        this._ws = "";
        this._bs = "";
        this._str = 4;
        this._toughness = 4;
        this._wounds = 1;
        this._attacks = "";
        this._leadership = 7;
        this._save = "";
        this._weapons = [];
        this._psyker = null;
        this._psychicPowers = [];
        this._explosions = [];
    }
}
;
class ProfileTable {
    constructor() {
        this._name = "";
        this._table = [];
    }
}
class Unit {
    constructor() {
        this._name = "";
        this._role = UnitRole.NONE;
        this._factions = new Set();
        this._keywords = new Set();
        this._abilities = new Map();
        this._rules = new Map();
        this._models = [];
        this._points = 0;
        this._powerLevel = 0;
        this._commandPoints = 0;
        this._woundTracker = [];
        this._profileTables = new Map();
    }
}
class Force {
    constructor() {
        this._catalog = "";
        this._name = "Unknown";
        this._faction = "Unknown";
        this._rules = new Map();
        this._units = [];
    }
}
;
class Roster40k {
    constructor() {
        this._powerLevel = 0;
        this._commandPoints = 0;
        this._points = 0;
        this._name = "";
        this._forces = [];
    }
}
;
function Create40kRoster(doc, is40k = true) {
    var _a;
    if (doc) {
        var info = doc.querySelector("roster");
        if (info) {
            const roster = new Roster40k();
            const name = (_a = info.getAttributeNode("name")) === null || _a === void 0 ? void 0 : _a.nodeValue;
            if (name) {
                roster._name = name;
            }
            else {
                roster._name = "40k Army Roster";
            }
            ParseRosterPoints(doc, roster);
            ParseForces(doc, roster, is40k);
            return roster;
        }
    }
    return null;
}
function ParseRosterPoints(doc, roster) {
    var _a, _b;
    var costs = doc.querySelectorAll("roster>costs>cost");
    for (let cost of costs) {
        if (cost.hasAttribute("name") && cost.hasAttribute("value")) {
            let which = (_a = cost.getAttributeNode("name")) === null || _a === void 0 ? void 0 : _a.nodeValue;
            let value = (_b = cost.getAttributeNode("value")) === null || _b === void 0 ? void 0 : _b.nodeValue;
            if (value) {
                if (which == " PL") {
                    roster._powerLevel = +value;
                }
                else if (which === "pts") {
                    roster._points = +value;
                }
                else if (which === "CP") {
                    roster._commandPoints = +value;
                }
            }
        }
    }
}
function ParseForces(doc, roster, is40k) {
    var _a, _b, _c;
    var forcesRoot = doc.querySelectorAll("roster>forces>force");
    for (let root of forcesRoot) {
        if (root.hasAttribute("name") && root.hasAttribute("catalogueName")) {
            let f = new Force();
            let which = (_a = root.getAttributeNode("name")) === null || _a === void 0 ? void 0 : _a.nodeValue;
            let value = (_b = root.getAttributeNode("catalogueName")) === null || _b === void 0 ? void 0 : _b.nodeValue;
            if (which) {
                f._name = which;
            }
            if (value) {
                f._catalog = value;
            }
            if (!DuplicateForce(f, roster)) {
                var rules = root.querySelectorAll("force>rules>rule");
                for (let rule of rules) {
                    if (rule.hasAttribute("name")) {
                        let ruleName = (_c = rule.getAttributeNode("name")) === null || _c === void 0 ? void 0 : _c.nodeValue;
                        var desc = rule.querySelector("rule>description");
                        if (ruleName && desc) {
                            f._rules.set(ruleName, desc.textContent);
                        }
                    }
                }
            }
            ParseUnits(root, f, is40k);
            roster._forces.push(f);
        }
    }
}
function DuplicateForce(force, roster) {
    if (!roster || !force)
        return false;
    for (let f of roster._forces) {
        if (f._catalog === force._catalog)
            return true;
    }
    return false;
}
function ParseUnits(root, force, is40k) {
    var selections = root.querySelectorAll("force>selections>selection");
    for (let selection of selections) {
        var unit = CreateUnit(selection, is40k);
        if (unit && unit._role != UnitRole.NONE) {
            force._units.push(unit);
        }
    }
    force._units.sort((a, b) => {
        if (a._role > b._role)
            return 1;
        else if (a._role == b._role)
            return 0;
        return -1;
    });
}
function LookupRole(roleText) {
    switch (roleText) {
        case 'HQ': return UnitRole.HQ;
        case 'Troops': return UnitRole.TR;
        case 'Elites': return UnitRole.EL;
        case 'Fast Attack': return UnitRole.FA;
        case 'Heavy Support': return UnitRole.HS;
        case 'Flyer': return UnitRole.FL;
        case 'Dedicated Transport': return UnitRole.DT;
        case 'Fortification': return UnitRole.FT;
        case 'Lord of War': return UnitRole.LW;
    }
    return UnitRole.NONE;
}
function LookupRoleKillTeam(roleText) {
    switch (roleText) {
        case 'Commander': return UnitRole.COMMANDER;
        case 'Leader': return UnitRole.LEADER;
        case 'Specialist': return UnitRole.SPECIALIST;
        case 'Non-specialist': return UnitRole.NON_SPECIALIST;
    }
    return UnitRole.NONE;
}
function parseUnknownProfile(prop, unit) {
    var _a, _b;
    let propName = (_a = prop.getAttributeNode("name")) === null || _a === void 0 ? void 0 : _a.nodeValue;
    let propType = (_b = prop.getAttributeNode("typeName")) === null || _b === void 0 ? void 0 : _b.nodeValue;
    console.log("Unknown profile type: " + propType + " with name: " + propName + ".  Found in unit: " + unit._name);
}
function CreateUnit(root, is40k) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
    var unit = new Unit();
    var unitName = (_a = root.getAttributeNode("name")) === null || _a === void 0 ? void 0 : _a.nodeValue;
    if (unitName) {
        unit._name = unitName;
    }
    var categories = root.querySelectorAll(":scope categories>category");
    for (let cat of categories) {
        let catName = (_b = cat.getAttributeNode("name")) === null || _b === void 0 ? void 0 : _b.nodeValue;
        if (catName) {
            const factPattern = "Faction: ";
            const factIndex = catName.lastIndexOf(factPattern);
            if (factIndex >= 0) {
                const factKeyword = catName.slice(factIndex + factPattern.length);
                unit._factions.add(factKeyword);
            }
            else {
                const roleText = catName.trim();
                var unitRole = LookupRole(roleText);
                if (unitRole != UnitRole.NONE) {
                    unit._role = unitRole;
                }
                else {
                    if (!is40k) {
                        unitRole = LookupRoleKillTeam(roleText);
                        if (unitRole != UnitRole.NONE) {
                            unit._role = unitRole;
                        }
                        else {
                            unit._keywords.add(catName);
                        }
                    }
                    else {
                        unit._keywords.add(catName);
                    }
                }
            }
        }
    }
    var props = root.querySelectorAll(":scope profiles>profile");
    for (let prop of props) {
        let propName = (_c = prop.getAttributeNode("name")) === null || _c === void 0 ? void 0 : _c.nodeValue;
        let propType = (_d = prop.getAttributeNode("typeName")) === null || _d === void 0 ? void 0 : _d.nodeValue;
        if (propName && propType) {
            if ((propType === "Unit") || (propType === "Model")) {
                var model = new Model();
                model._name = propName;
                let chars = prop.querySelectorAll("characteristics>characteristic");
                for (let char of chars) {
                    let charName = (_e = char.getAttributeNode("name")) === null || _e === void 0 ? void 0 : _e.nodeValue;
                    if (charName) {
                        if (char.textContent) {
                            switch (charName) {
                                case 'M':
                                    model._move = char.textContent;
                                    break;
                                case 'WS':
                                    model._ws = char.textContent;
                                    break;
                                case 'BS':
                                    model._bs = char.textContent;
                                    break;
                                case 'S':
                                    model._str = +char.textContent;
                                    break;
                                case 'T':
                                    model._toughness = +char.textContent;
                                    break;
                                case 'W':
                                    model._wounds = +char.textContent;
                                    break;
                                case 'A':
                                    model._attacks = char.textContent;
                                    break;
                                case 'Ld':
                                    model._leadership = +char.textContent;
                                    break;
                                case 'Save':
                                    model._save = char.textContent;
                                    break;
                            }
                        }
                    }
                    if (prop.parentElement && prop.parentElement.parentElement) {
                        const parentSelection = prop.parentElement.parentElement;
                        let countValue = (_f = parentSelection.getAttributeNode("number")) === null || _f === void 0 ? void 0 : _f.nodeValue;
                        if (countValue) {
                            model._count = +countValue;
                        }
                    }
                }
                unit._models.push(model);
            }
        }
    }
    for (let prop of props) {
        let propName = (_g = prop.getAttributeNode("name")) === null || _g === void 0 ? void 0 : _g.nodeValue;
        let propType = (_h = prop.getAttributeNode("typeName")) === null || _h === void 0 ? void 0 : _h.nodeValue;
        if (propName && propType) {
            if ((propType === "Abilities") || (propType === "Wargear") || (propType === "Ability") ||
                (propType === "Household Tradition") || (propType === "Warlord Trait") || (propType === "Astra Militarum Orders") ||
                (propType === "Tank Orders") || (propType == "Lethal Ambush")) {
                let chars = prop.querySelectorAll("characteristics>characteristic");
                for (let char of chars) {
                    let charName = (_j = char.getAttributeNode("name")) === null || _j === void 0 ? void 0 : _j.nodeValue;
                    if (charName && char.textContent && propName) {
                        if ((charName === "Description") || (charName === "Ability") || (charName == "Effect")) {
                            unit._abilities.set(propName, char.textContent);
                        }
                    }
                }
            }
            else if (propType === "Weapon") {
                let weapon = new Weapon();
                weapon._name = propName;
                let chars = prop.querySelectorAll("characteristics>characteristic");
                for (let char of chars) {
                    let charName = (_k = char.getAttributeNode("name")) === null || _k === void 0 ? void 0 : _k.nodeValue;
                    if (charName) {
                        if (char.textContent) {
                            switch (charName) {
                                case 'Range':
                                    weapon._range = char.textContent;
                                    break;
                                case 'Type':
                                    weapon._type = char.textContent;
                                    break;
                                case 'S':
                                    weapon._str = char.textContent;
                                    break;
                                case 'AP':
                                    weapon._ap = char.textContent;
                                    break;
                                case 'D':
                                    weapon._damage = char.textContent;
                                    break;
                                case 'Abilities':
                                    weapon._abilities = char.textContent;
                                    break;
                            }
                        }
                    }
                }
                if (unit._models.length) {
                    unit._models[unit._models.length - 1]._weapons.push(weapon);
                }
                else {
                    console.log("Unexpected: Created a weapon without an active model.  Unit: " + unitName);
                }
            }
            else if (propType.includes("Wound Track") || propType.includes("Stat Damage")) {
                let tracker = new WoundTracker();
                tracker._name = propName;
                let chars = prop.querySelectorAll("characteristics>characteristic");
                for (let char of chars) {
                    let charName = (_l = char.getAttributeNode("name")) === null || _l === void 0 ? void 0 : _l.nodeValue;
                    if (charName && propName) {
                        if (char.textContent) {
                            tracker._table.set(charName, char.textContent);
                        }
                        else {
                            tracker._table.set(charName, "-");
                        }
                    }
                }
                unit._woundTracker.push(tracker);
            }
            else if (propType == "Transport") {
                let chars = prop.querySelectorAll("characteristics>characteristic");
                for (let char of chars) {
                    let charName = (_m = char.getAttributeNode("name")) === null || _m === void 0 ? void 0 : _m.nodeValue;
                    if (charName && char.textContent && propName) {
                        if (charName === "Capacity") {
                            unit._abilities.set(propName, char.textContent);
                        }
                    }
                }
            }
            else if (propType == "Psychic Power") {
                let power = new PsychicPower();
                power._name = propName;
                let chars = prop.querySelectorAll("characteristics>characteristic");
                for (let char of chars) {
                    let charName = (_o = char.getAttributeNode("name")) === null || _o === void 0 ? void 0 : _o.nodeValue;
                    if (charName) {
                        if (char.textContent) {
                            switch (charName) {
                                case 'Range':
                                    power._range = char.textContent;
                                    break;
                                case 'Warp Charge':
                                    power._manifest = +char.textContent;
                                    break;
                                case 'Details':
                                    power._details = char.textContent;
                                    break;
                            }
                        }
                    }
                }
                if (unit._models.length) {
                    unit._models[unit._models.length - 1]._psychicPowers.push(power);
                }
                else {
                    console.log("Unexpected: Created a psychic power without an active model.  Unit: " + unitName);
                }
            }
            else if (propType.includes("Explosion")) {
                let explosion = new Explosion();
                explosion._name = propName;
                let chars = prop.querySelectorAll("characteristics>characteristic");
                for (let char of chars) {
                    let charName = (_p = char.getAttributeNode("name")) === null || _p === void 0 ? void 0 : _p.nodeValue;
                    if (charName) {
                        if (char.textContent) {
                            switch (charName) {
                                case 'Dice Roll':
                                    explosion._diceRoll = char.textContent;
                                    break;
                                case 'Distance':
                                    explosion._distance = char.textContent;
                                    break;
                                case 'Mortal Wounds':
                                    explosion._mortalWounds = char.textContent;
                                    break;
                            }
                        }
                    }
                }
                if (unit._models.length) {
                    unit._models[unit._models.length - 1]._explosions.push(explosion);
                }
                else {
                    console.log("Unexpected: Created an explosion without an active model.  Unit: " + unitName);
                }
            }
            else if (propType == "Psyker") {
                let psyker = new Psyker();
                psyker._name = propName;
                let chars = prop.querySelectorAll("characteristics>characteristic");
                for (let char of chars) {
                    let charName = (_q = char.getAttributeNode("name")) === null || _q === void 0 ? void 0 : _q.nodeValue;
                    if (charName && char.textContent) {
                        switch (charName) {
                            case 'Cast':
                                psyker._cast = char.textContent;
                                break;
                            case 'Deny':
                                psyker._deny = char.textContent;
                                break;
                            case 'Powers Known':
                                psyker._powers = char.textContent;
                                break;
                            case 'Other':
                                psyker._other = char.textContent;
                                break;
                        }
                    }
                }
                if (unit._models.length) {
                    unit._models[unit._models.length - 1]._psyker = psyker;
                }
                else {
                    console.log("Unexpected: Created a psyker without an active model.  Unit: " + unitName);
                }
            }
            else if ((propType === "Unit") || (propType === "Model")) {
            }
            else {
                parseUnknownProfile(prop, unit);
            }
        }
    }
    var costs = root.querySelectorAll(":scope costs>cost");
    for (let cost of costs) {
        if (cost.hasAttribute("name") && cost.hasAttribute("value")) {
            let which = (_r = cost.getAttributeNode("name")) === null || _r === void 0 ? void 0 : _r.nodeValue;
            let value = (_s = cost.getAttributeNode("value")) === null || _s === void 0 ? void 0 : _s.nodeValue;
            if (value) {
                if (which == " PL") {
                    unit._powerLevel += +value;
                }
                else if (which == "pts") {
                    unit._points += +value;
                }
                else if (which == "CP") {
                    unit._commandPoints += +value;
                }
            }
        }
    }
    var rules = root.querySelectorAll(":scope rules > rule");
    for (let rule of rules) {
        if (rule.hasAttribute("name")) {
            let ruleName = (_t = rule.getAttributeNode("name")) === null || _t === void 0 ? void 0 : _t.nodeValue;
            var desc = rule.querySelector("description");
            if (ruleName && desc && desc.textContent) {
                unit._rules.set(ruleName, desc.textContent);
            }
        }
    }
    return unit;
}


/***/ }),

/***/ "./src/rosterAoS.ts":
/*!**************************!*\
  !*** ./src/rosterAoS.ts ***!
  \**************************/
/*! exports provided: AoSWeapon, AoSWoundTracker, AoSSpell, AoSPrayer, AoSAllegiance, AoSUnitRole, AoSUnitRoleToString, AoSUnit, AoSForce, RosterAoS, CreateAoSRoster */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AoSWeapon", function() { return AoSWeapon; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AoSWoundTracker", function() { return AoSWoundTracker; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AoSSpell", function() { return AoSSpell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AoSPrayer", function() { return AoSPrayer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AoSAllegiance", function() { return AoSAllegiance; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AoSUnitRole", function() { return AoSUnitRole; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AoSUnitRoleToString", function() { return AoSUnitRoleToString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AoSUnit", function() { return AoSUnit; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AoSForce", function() { return AoSForce; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RosterAoS", function() { return RosterAoS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CreateAoSRoster", function() { return CreateAoSRoster; });
class AoSWeapon {
    constructor() {
        this._name = "";
        this._type = "Melee";
        this._range = "";
        this._attacks = "";
        this._toHit = "";
        this._toWound = "";
        this._rend = "";
        this._damage = "";
    }
}
class AoSWoundTracker {
    constructor() {
        this._name = "";
        this._woundTrackerLabels = [];
        this._table = new Map();
    }
}
;
class AoSSpell {
    constructor() {
        this._name = "";
        this._castingValue = 0;
        this._description = "";
    }
}
class AoSPrayer {
    constructor() {
        this._name = "";
        this._description = "";
    }
}
class AoSAllegiance {
    constructor() {
        this._name = "";
        this._battleTraits = new Map();
        this._commandAbilities = new Map();
    }
}
var AoSUnitRole;
(function (AoSUnitRole) {
    AoSUnitRole[AoSUnitRole["NONE"] = 0] = "NONE";
    AoSUnitRole[AoSUnitRole["LEADER"] = 1] = "LEADER";
    AoSUnitRole[AoSUnitRole["BATTLELINE"] = 2] = "BATTLELINE";
    AoSUnitRole[AoSUnitRole["BEHEMOTH"] = 3] = "BEHEMOTH";
    AoSUnitRole[AoSUnitRole["ARTILLERY"] = 4] = "ARTILLERY";
    AoSUnitRole[AoSUnitRole["OTHER"] = 5] = "OTHER";
    AoSUnitRole[AoSUnitRole["SCENERY"] = 6] = "SCENERY";
    AoSUnitRole[AoSUnitRole["BATTALION"] = 7] = "BATTALION";
    AoSUnitRole[AoSUnitRole["MALIGN_SORCERY"] = 8] = "MALIGN_SORCERY";
    AoSUnitRole[AoSUnitRole["REALM"] = 9] = "REALM";
})(AoSUnitRole || (AoSUnitRole = {}));
;
const AoSUnitRoleToString = [
    'None',
    'Leader',
    'Battleline',
    'Behemoth',
    'Artillery',
    'Other',
    'Scenery',
    'Battalion',
    'Malign Sorcery',
    'Realm'
];
class AoSUnit {
    constructor() {
        this._name = "";
        this._role = AoSUnitRole.NONE;
        this._keywords = new Set();
        this._abilities = new Map();
        this._commandAbilities = new Map();
        this._commandTraits = new Map();
        this._magic = new Map();
        this._artefacts = new Map();
        this._count = 0;
        this._move = "0\"";
        this._wounds = 1;
        this._bravery = 7;
        this._save = "";
        this._weapons = [];
        this._spells = [];
        this._prayers = [];
        this._points = 0;
        this._woundTracker = null;
    }
}
class AoSForce {
    constructor() {
        this._catalog = "";
        this._name = "Unknown";
        this._units = [];
        this._allegiance = new AoSAllegiance();
    }
}
;
class RosterAoS {
    constructor() {
        this._commandPoints = 0;
        this._points = 0;
        this._name = "";
        this._forces = [];
    }
}
;
function LookupRole(roleText) {
    switch (roleText) {
        case 'Leader': return AoSUnitRole.LEADER;
        case 'Battleline': return AoSUnitRole.BATTLELINE;
        case 'Other': return AoSUnitRole.OTHER;
        case 'Behemoth': return AoSUnitRole.BEHEMOTH;
        case 'Artillery': return AoSUnitRole.ARTILLERY;
        case 'Scenery': return AoSUnitRole.SCENERY;
        case 'Battalion': return AoSUnitRole.BATTALION;
        case 'Malign Sorcery': return AoSUnitRole.MALIGN_SORCERY;
        case 'Realm': return AoSUnitRole.REALM;
    }
    return AoSUnitRole.NONE;
}
function CreateAoSRoster(doc) {
    var _a;
    if (doc) {
        let info = doc.querySelector("roster");
        if (info) {
            const roster = new RosterAoS();
            const name = (_a = info.getAttributeNode("name")) === null || _a === void 0 ? void 0 : _a.nodeValue;
            if (name) {
                roster._name = name;
            }
            else {
                roster._name = "Age of Sigmar Roster";
            }
            ParseRosterPoints(doc, roster);
            ParseForces(doc, roster);
            return roster;
        }
    }
    return null;
}
function ParseRosterPoints(doc, roster) {
    var _a, _b;
    let costs = doc.querySelectorAll("roster>costs>cost");
    for (let cost of costs) {
        if (cost.hasAttribute("name") && cost.hasAttribute("value")) {
            let which = (_a = cost.getAttributeNode("name")) === null || _a === void 0 ? void 0 : _a.nodeValue;
            let value = (_b = cost.getAttributeNode("value")) === null || _b === void 0 ? void 0 : _b.nodeValue;
            if (value) {
                if (which === "pts") {
                    roster._points = +value;
                }
            }
        }
    }
}
function ParseForces(doc, roster) {
    var _a, _b;
    let forcesRoot = doc.querySelectorAll("roster>forces>force");
    for (let root of forcesRoot) {
        if (root.hasAttribute("name") && root.hasAttribute("catalogueName")) {
            let f = new AoSForce();
            let which = (_a = root.getAttributeNode("name")) === null || _a === void 0 ? void 0 : _a.nodeValue;
            let value = (_b = root.getAttributeNode("catalogueName")) === null || _b === void 0 ? void 0 : _b.nodeValue;
            if (which) {
                f._name = which;
            }
            if (value) {
                f._catalog = value;
            }
            ParseSelections(root, f);
            roster._forces.push(f);
        }
    }
}
function ParseSelections(root, force) {
    var _a, _b;
    let selections = root.querySelectorAll("force>selections>selection");
    for (let selection of selections) {
        let selectionType = (_a = selection.getAttributeNode("type")) === null || _a === void 0 ? void 0 : _a.nodeValue;
        if (!selectionType)
            continue;
        let selectionName = (_b = selection.getAttributeNode("name")) === null || _b === void 0 ? void 0 : _b.nodeValue;
        if (selectionName && (selectionName.includes("Allegiance"))) {
            let allegiance = ParseAllegiance(selection);
            if (allegiance) {
                force._allegiance = allegiance;
            }
        }
        else {
            let unit = ParseUnit(selection);
            if (unit && (unit._role != AoSUnitRole.NONE)) {
                force._units.push(unit);
            }
        }
    }
    force._units.sort((a, b) => {
        if (a._role > b._role)
            return 1;
        else if (a._role == b._role)
            return 0;
        return -1;
    });
}
function ParseUnit(root) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
    let unit = new AoSUnit();
    let profiles = root.querySelectorAll("profiles>profile");
    for (let prof of profiles) {
        let profName = (_a = prof.getAttributeNode("name")) === null || _a === void 0 ? void 0 : _a.nodeValue;
        let profType = (_b = prof.getAttributeNode("typeName")) === null || _b === void 0 ? void 0 : _b.nodeValue;
        if (profName && profType) {
            if (profType == "Unit") {
                unit._name = profName;
                let chars = prof.querySelectorAll("characteristics>characteristic");
                for (let char of chars) {
                    let charName = (_c = char.getAttributeNode("name")) === null || _c === void 0 ? void 0 : _c.nodeValue;
                    if (charName && char.textContent) {
                        switch (charName) {
                            case 'Move':
                                unit._move = char.textContent;
                                break;
                            case 'Wounds':
                                unit._wounds = +char.textContent;
                                break;
                            case 'Bravery':
                                unit._bravery = +char.textContent;
                                break;
                            case 'Save':
                                unit._save = char.textContent;
                                break;
                        }
                    }
                }
            }
            else if (profType == "Unit Abilities") {
                let char = prof.querySelector("characteristics>characteristic");
                if (char && char.textContent) {
                    unit._abilities.set(profName, char.textContent);
                }
            }
            else if (profType == "Command Abilities") {
                let char = prof.querySelector("characteristics>characteristic");
                if (char && char.textContent) {
                    unit._commandAbilities.set(profName, char.textContent);
                }
            }
            else if (profType == "Magic") {
                let characteristics = prof.querySelectorAll("characteristics>characteristic");
                for (let char of characteristics) {
                    let charName = (_d = char.getAttributeNode("name")) === null || _d === void 0 ? void 0 : _d.nodeValue;
                    if (charName && char.textContent) {
                        unit._magic.set(charName, char.textContent);
                    }
                }
            }
            else if (profType == "Unit Leader") {
                let char = prof.querySelector("characteristics>characteristic");
                if (char && char.textContent) {
                    unit._abilities.set(profType, char.textContent);
                }
            }
            else if (profType == "Spell") {
                let spell = new AoSSpell();
                spell._name = profName;
                let chars = prof.querySelectorAll("characteristics>characteristic");
                for (let char of chars) {
                    let charName = (_e = char.getAttributeNode("name")) === null || _e === void 0 ? void 0 : _e.nodeValue;
                    if (charName && char.textContent) {
                        switch (charName) {
                            case 'Casting Value':
                                spell._castingValue = +char.textContent;
                                break;
                            case 'Description':
                                spell._description = char.textContent;
                                break;
                        }
                    }
                }
                unit._spells.push(spell);
            }
            else if (profType == "Weapon") {
                let weapon = new AoSWeapon();
                weapon._name = profName;
                let chars = prof.querySelectorAll("characteristics>characteristic");
                for (let char of chars) {
                    let charName = (_f = char.getAttributeNode("name")) === null || _f === void 0 ? void 0 : _f.nodeValue;
                    if (charName && char.textContent) {
                        switch (charName) {
                            case 'Range':
                                weapon._range = char.textContent;
                                break;
                            case 'Type':
                                weapon._type = char.textContent;
                                break;
                            case 'Attacks':
                                weapon._attacks = char.textContent;
                                break;
                            case 'Rend':
                                weapon._rend = char.textContent;
                                break;
                            case 'To Hit':
                                weapon._toHit = char.textContent;
                                break;
                            case 'To Wound':
                                weapon._toWound = char.textContent;
                                break;
                            case 'Damage':
                                weapon._damage = char.textContent;
                                break;
                        }
                    }
                }
                unit._weapons.push(weapon);
            }
            else if (profType == "Command Trait") {
                let char = prof.querySelector("characteristics>characteristic");
                if (char && char.textContent) {
                    unit._commandTraits.set(profName, char.textContent);
                }
            }
            else if (profType == "Artefact") {
                let char = prof.querySelector("characteristics>characteristic");
                if (char && char.textContent) {
                    unit._artefacts.set(profName, char.textContent);
                }
            }
            else if (profType == "Prayer") {
                let prayer = new AoSPrayer();
                prayer._name = profName;
                let chars = prof.querySelectorAll("characteristics>characteristic");
                for (let char of chars) {
                    let charName = (_g = char.getAttributeNode("name")) === null || _g === void 0 ? void 0 : _g.nodeValue;
                    if (charName && char.textContent) {
                        switch (charName) {
                            case 'Description':
                                prayer._description = char.textContent;
                                break;
                        }
                    }
                }
                unit._prayers.push(prayer);
            }
            else if (profType.includes("Wound Track") || profType.includes("Damage Table") || profType.includes("Wounds")) {
            }
            else {
                console.log("Unknown unit profile type: " + profType);
            }
        }
    }
    let costs = root.querySelectorAll("costs>cost");
    for (let cost of costs) {
        if (cost.hasAttribute("name") && cost.hasAttribute("value")) {
            let which = (_h = cost.getAttributeNode("name")) === null || _h === void 0 ? void 0 : _h.nodeValue;
            let value = (_j = cost.getAttributeNode("value")) === null || _j === void 0 ? void 0 : _j.nodeValue;
            if (value) {
                if (which === "pts") {
                    unit._points += +value;
                }
            }
        }
    }
    let categories = root.querySelectorAll(":scope categories>category");
    for (let category of categories) {
        let catName = (_k = category.getAttributeNode("name")) === null || _k === void 0 ? void 0 : _k.nodeValue;
        let catPrimary = (_l = category.getAttributeNode("primary")) === null || _l === void 0 ? void 0 : _l.nodeValue;
        if (catName) {
            const roleText = catName.trim();
            var unitRole = LookupRole(roleText);
            if (unitRole != AoSUnitRole.NONE) {
                unit._role = unitRole;
            }
            else {
                unit._keywords.add(catName);
            }
        }
    }
    return unit;
}
function ParseAllegiance(root) {
    var _a, _b, _c;
    let allegiance = null;
    let selection = root.querySelector("selections>selection");
    if (selection) {
        let name = (_a = selection.getAttributeNode("name")) === null || _a === void 0 ? void 0 : _a.nodeValue;
        if (name) {
            allegiance = new AoSAllegiance();
            allegiance._name = name;
        }
        let profiles = selection.querySelectorAll("profiles>profile");
        for (let prof of profiles) {
            let profName = (_b = prof.getAttributeNode("name")) === null || _b === void 0 ? void 0 : _b.nodeValue;
            let profType = (_c = prof.getAttributeNode("typeName")) === null || _c === void 0 ? void 0 : _c.nodeValue;
            if (profName && profType) {
                if (profType == "Battle Trait") {
                    let desc = prof.querySelector("characteristics>characteristic");
                    if (desc) {
                        let description = desc.textContent;
                        if (description) {
                            allegiance === null || allegiance === void 0 ? void 0 : allegiance._battleTraits.set(profName, description);
                        }
                    }
                }
                else if (profType == "Command Abilities") {
                    let desc = prof.querySelector("characteristics>characteristic");
                    if (desc) {
                        let description = desc.textContent;
                        if (description) {
                            allegiance === null || allegiance === void 0 ? void 0 : allegiance._commandAbilities.set(profName, description);
                        }
                    }
                }
                else {
                    console.log("Unexpected allegiance profile type: " + profType);
                }
            }
        }
    }
    return allegiance;
}


/***/ }),

/***/ "./src/rosterWarcry.ts":
/*!*****************************!*\
  !*** ./src/rosterWarcry.ts ***!
  \*****************************/
/*! exports provided: WarcryAllegiance, WarcryWeapon, WarcryUnitRole, WarcryUnitRoleToString, WarcryUnit, WarcryForce, RosterWarcry, CreateWarcryRoster */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WarcryAllegiance", function() { return WarcryAllegiance; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WarcryWeapon", function() { return WarcryWeapon; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WarcryUnitRole", function() { return WarcryUnitRole; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WarcryUnitRoleToString", function() { return WarcryUnitRoleToString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WarcryUnit", function() { return WarcryUnit; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WarcryForce", function() { return WarcryForce; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RosterWarcry", function() { return RosterWarcry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CreateWarcryRoster", function() { return CreateWarcryRoster; });
class WarcryAllegiance {
    constructor() {
        this._name = "";
        this._rules = new Map();
    }
}
class WarcryWeapon {
    constructor() {
        this._name = "";
        this._range = "";
        this._attacks = "";
        this._strength = "";
        this._damage = "";
    }
}
var WarcryUnitRole;
(function (WarcryUnitRole) {
    WarcryUnitRole[WarcryUnitRole["NONE"] = 0] = "NONE";
    WarcryUnitRole[WarcryUnitRole["LEADER"] = 1] = "LEADER";
    WarcryUnitRole[WarcryUnitRole["FIGHTER"] = 2] = "FIGHTER";
    WarcryUnitRole[WarcryUnitRole["ALLY"] = 3] = "ALLY";
})(WarcryUnitRole || (WarcryUnitRole = {}));
;
const WarcryUnitRoleToString = [
    'None',
    'Leader',
    'Fighter',
    'Ally'
];
class WarcryUnit {
    constructor() {
        this._name = "";
        this._role = WarcryUnitRole.NONE;
        this._keywords = new Set();
        this._abilities = new Map();
        this._move = 1;
        this._wounds = 1;
        this._toughness = 1;
        this._weapons = [];
        this._points = 0;
    }
}
class WarcryForce {
    constructor() {
        this._catalog = "";
        this._name = "Unknown";
        this._units = [];
        this._allegiance = new WarcryAllegiance();
    }
}
;
class RosterWarcry {
    constructor() {
        this._points = 0;
        this._name = "";
        this._forces = [];
    }
}
;
function LookupRole(roleText) {
    switch (roleText) {
        case 'Leader': return WarcryUnitRole.LEADER;
        case 'Fighter': return WarcryUnitRole.FIGHTER;
        case 'Ally': return WarcryUnitRole.ALLY;
    }
    return WarcryUnitRole.NONE;
}
function CreateWarcryRoster(doc) {
    var _a;
    if (doc) {
        let info = doc.querySelector("roster");
        if (info) {
            const roster = new RosterWarcry();
            const name = (_a = info.getAttributeNode("name")) === null || _a === void 0 ? void 0 : _a.nodeValue;
            if (name) {
                roster._name = name;
            }
            else {
                roster._name = "Age of Sigmar Warcry Roster";
            }
            ParseRosterPoints(doc, roster);
            ParseForces(doc, roster);
            return roster;
        }
    }
    return null;
}
function ParseRosterPoints(doc, roster) {
    var _a, _b;
    let costs = doc.querySelectorAll("roster>costs>cost");
    for (let cost of costs) {
        if (cost.hasAttribute("name") && cost.hasAttribute("value")) {
            let which = (_a = cost.getAttributeNode("name")) === null || _a === void 0 ? void 0 : _a.nodeValue;
            let value = (_b = cost.getAttributeNode("value")) === null || _b === void 0 ? void 0 : _b.nodeValue;
            if (value) {
                if (which === "pts") {
                    roster._points = +value;
                }
            }
        }
    }
}
function ParseForces(doc, roster) {
    var _a, _b;
    let forcesRoot = doc.querySelectorAll("roster>forces>force");
    for (let root of forcesRoot) {
        if (root.hasAttribute("name") && root.hasAttribute("catalogueName")) {
            let f = new WarcryForce();
            let which = (_a = root.getAttributeNode("name")) === null || _a === void 0 ? void 0 : _a.nodeValue;
            let value = (_b = root.getAttributeNode("catalogueName")) === null || _b === void 0 ? void 0 : _b.nodeValue;
            if (which) {
                f._name = which;
            }
            if (value) {
                f._catalog = value;
            }
            ParseAllegiance(root, f);
            ParseSelections(root, f);
            roster._forces.push(f);
        }
    }
    console.log(roster);
}
function ParseAllegiance(root, force) {
    var _a;
    let allegiance = new WarcryAllegiance();
    let rules = root.querySelectorAll("rules>rule");
    for (let rule of rules) {
        if (rule.hasAttribute("name")) {
            let ruleName = (_a = rule.getAttributeNode("name")) === null || _a === void 0 ? void 0 : _a.nodeValue;
            var desc = rule.querySelector("rule>description");
            if (ruleName && desc && desc.textContent) {
                allegiance._rules.set(ruleName, desc.textContent);
            }
        }
    }
    force._allegiance = allegiance;
}
function ParseSelections(root, force) {
    var _a, _b;
    let selections = root.querySelectorAll("force>selections>selection");
    for (let selection of selections) {
        let selectionType = (_a = selection.getAttributeNode("type")) === null || _a === void 0 ? void 0 : _a.nodeValue;
        if (!selectionType)
            continue;
        let selectionName = (_b = selection.getAttributeNode("name")) === null || _b === void 0 ? void 0 : _b.nodeValue;
        let unit = ParseUnit(selection);
        if (unit && (unit._role != WarcryUnitRole.NONE)) {
            force._units.push(unit);
        }
    }
    force._units.sort((a, b) => {
        if (a._role > b._role)
            return 1;
        else if (a._role == b._role)
            return 0;
        return -1;
    });
}
function ParseUnit(root) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    let unit = new WarcryUnit();
    let profiles = root.querySelectorAll("profiles>profile");
    for (let prof of profiles) {
        let profName = (_a = prof.getAttributeNode("name")) === null || _a === void 0 ? void 0 : _a.nodeValue;
        let profType = (_b = prof.getAttributeNode("typeName")) === null || _b === void 0 ? void 0 : _b.nodeValue;
        if (profName && profType) {
            if (profType == "Model") {
                unit._name = profName;
                let chars = prof.querySelectorAll("characteristics>characteristic");
                for (let char of chars) {
                    let charName = (_c = char.getAttributeNode("name")) === null || _c === void 0 ? void 0 : _c.nodeValue;
                    if (charName && char.textContent) {
                        switch (charName) {
                            case 'Move':
                                unit._move = +char.textContent;
                                break;
                            case 'Wounds':
                                unit._wounds = +char.textContent;
                                break;
                            case 'Toughness':
                                unit._toughness = +char.textContent;
                                break;
                        }
                    }
                }
            }
            else if (profType == "Weapon") {
                let weapon = new WarcryWeapon();
                weapon._name = profName;
                let chars = prof.querySelectorAll("characteristics>characteristic");
                for (let char of chars) {
                    let charName = (_d = char.getAttributeNode("name")) === null || _d === void 0 ? void 0 : _d.nodeValue;
                    if (charName && char.textContent) {
                        switch (charName) {
                            case 'Range':
                                weapon._range = char.textContent;
                                break;
                            case 'Attacks':
                                weapon._attacks = char.textContent;
                                break;
                            case 'Strength':
                                weapon._strength = char.textContent;
                                break;
                            case 'Damage':
                                weapon._damage = char.textContent;
                                break;
                        }
                    }
                }
                unit._weapons.push(weapon);
            }
            else {
                console.log("Unknown unit profile type: " + profType);
            }
        }
    }
    let costs = root.querySelectorAll("costs>cost");
    for (let cost of costs) {
        if (cost.hasAttribute("name") && cost.hasAttribute("value")) {
            let which = (_e = cost.getAttributeNode("name")) === null || _e === void 0 ? void 0 : _e.nodeValue;
            let value = (_f = cost.getAttributeNode("value")) === null || _f === void 0 ? void 0 : _f.nodeValue;
            if (value) {
                if (which === "pts") {
                    unit._points += +value;
                }
            }
        }
    }
    let categories = root.querySelectorAll(":scope categories>category");
    for (let category of categories) {
        let catName = (_g = category.getAttributeNode("name")) === null || _g === void 0 ? void 0 : _g.nodeValue;
        let catPrimary = (_h = category.getAttributeNode("primary")) === null || _h === void 0 ? void 0 : _h.nodeValue;
        if (catName) {
            const roleText = catName.trim();
            var unitRole = LookupRole(roleText);
            if (unitRole != WarcryUnitRole.NONE) {
                unit._role = unitRole;
            }
            else {
                unit._keywords.add(catName);
            }
        }
    }
    return unit;
}


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jhc2U2NC1qcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9idWZmZXIvbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2llZWU3NTQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzemlwL2Rpc3QvanN6aXAubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NldGltbWVkaWF0ZS9zZXRJbW1lZGlhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RpbWVycy1icm93c2VyaWZ5L21haW4uanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwLnRzIiwid2VicGFjazovLy8uL3NyYy9yZW5kZXJlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcmVuZGVyZXIzMGsudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlbmRlcmVyNDBrLnRzIiwid2VicGFjazovLy8uL3NyYy9yZW5kZXJlckFvUy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcmVuZGVyZXJXYXJjcnkudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3Jvc3RlcjMway50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcm9zdGVyNDBrLnRzIiwid2VicGFjazovLy8uL3NyYy9yb3N0ZXJBb1MudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3Jvc3RlcldhcmNyeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO1FBQUE7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNB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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsVUFBVTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsWUFBWTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBLHVDQUF1QyxTQUFTO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsaUJBQWlCO0FBQ2hDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxpQkFBaUI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELEVBQUU7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGVBQWU7QUFDdkM7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0Esd0JBQXdCLFFBQVE7QUFDaEM7QUFDQSxxQkFBcUIsZUFBZTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsWUFBWTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEscUJBQXFCLFNBQVM7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLHFCQUFxQixTQUFTO0FBQzlCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLHFCQUFxQixTQUFTO0FBQzlCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixrQkFBa0I7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLG1CQUFtQixjQUFjO0FBQ2pDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1REFBdUQsT0FBTztBQUM5RDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdURBQXVELE9BQU87QUFDOUQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EscUJBQXFCLFFBQVE7QUFDN0I7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGVBQWUsU0FBUztBQUN4QjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLG1CQUFtQixTQUFTO0FBQzVCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGlCQUFpQjtBQUNoQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlCQUFpQixZQUFZO0FBQzdCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpQkFBaUIsZ0JBQWdCO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLGdCQUFnQjtBQUNqQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUIsWUFBWTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7OztBQzV2REEsaUJBQWlCOztBQUVqQjtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7OztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLFdBQVc7O0FBRW5CO0FBQ0E7QUFDQTtBQUNBLFFBQVEsV0FBVzs7QUFFbkI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFFBQVEsV0FBVzs7QUFFbkI7QUFDQTtBQUNBLFFBQVEsVUFBVTs7QUFFbEI7QUFDQTs7Ozs7Ozs7Ozs7O0FDbkZBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsYUFBYSxHQUFHLElBQW9ELG9CQUFvQixLQUFLLEVBQThLLENBQUMsWUFBWSx5QkFBeUIsZ0JBQWdCLFVBQVUsVUFBVSwwQ0FBMEMsZ0JBQWdCLE9BQUMsT0FBTyxvQkFBb0IsOENBQThDLGtDQUFrQyxZQUFZLFlBQVksbUNBQW1DLGlCQUFpQixlQUFlLHNCQUFzQixvQkFBb0Isa0RBQWtELFdBQVcsWUFBWSxTQUFTLEVBQUUsbUJBQW1CLGFBQWEsMEdBQTBHLHFCQUFxQiwwRUFBMEUsV0FBVywrT0FBK08sa0JBQWtCLHNCQUFzQixrQ0FBa0MsK0ZBQStGLDJEQUEyRCx5SkFBeUosc0RBQXNELFdBQVcsa01BQWtNLFVBQVUsRUFBRSw0QkFBNEIscUJBQXFCLGFBQWEsNEdBQTRHLGdDQUFnQyxzQkFBc0IsdUdBQXVHLGFBQWEsNEJBQTRCLG1JQUFtSSw2QkFBNkIsNkdBQTZHLElBQUksZ0NBQWdDLHlQQUF5UCxvQ0FBb0MsNklBQTZJLGFBQWEsRUFBRSwrRkFBK0YscUJBQXFCLGFBQWEsa0NBQWtDLFNBQVMsd0NBQXdDLGtDQUFrQyw2QkFBNkIscUNBQXFDLHdCQUF3QixFQUFFLHdDQUF3QyxxQkFBcUIsYUFBYSxtQkFBbUIsaUJBQWlCLG1CQUFtQixNQUFNLEtBQUssSUFBSSxZQUFZLElBQUksaUNBQWlDLE9BQU8sU0FBUyxHQUFHLHdCQUF3Qix3RUFBd0UsY0FBYyxNQUFNLFlBQVksSUFBSSw0QkFBNEIsV0FBVyxxQ0FBcUMsY0FBYyxNQUFNLFlBQVksSUFBSSx1Q0FBdUMsV0FBVyxzQkFBc0IsRUFBRSxhQUFhLHFCQUFxQixhQUFhLHlLQUF5SyxHQUFHLHFCQUFxQixhQUFhLFdBQVcsMERBQTBELFdBQVcsRUFBRSxPQUFPLHFCQUFxQixhQUFhLHlMQUF5TCxnQkFBZ0Isa0dBQWtHLG9FQUFvRSxtR0FBbUcsOEJBQThCLDBGQUEwRixnQ0FBZ0MsK0NBQStDLG9DQUFvQyxvQ0FBb0MseUNBQXlDLEVBQUUsV0FBVyw4QkFBOEIsUUFBUSxtQkFBbUIsR0FBRyw4QkFBOEIsMEJBQTBCLCtCQUErQix5QkFBeUIsR0FBRyxFQUFFLGlEQUFpRCxxQkFBcUIsYUFBYSxnQkFBZ0IsV0FBVyxRQUFRLElBQUkseUNBQXlDLFNBQVMsd0JBQXdCLGdUQUFnVCw2Q0FBNkMsaUdBQWlHLFFBQVEsK0JBQStCLFlBQVksOENBQThDLFFBQVEsMENBQTBDLDRDQUE0QyxpQkFBaUIsK1FBQStRLFNBQVMsaUtBQWlLLDRIQUE0SCxzR0FBc0csb0JBQW9CLGlSQUFpUiw2Q0FBNkMsbUVBQW1FLHlHQUF5RyxrQkFBa0IsOERBQThELEdBQUcsc0NBQXNDLHdFQUF3RSxvQ0FBb0MsTUFBTSw4RUFBOEUsV0FBVyx3QkFBd0IsV0FBVyxFQUFFLHdCQUF3QixzQ0FBc0MsbUJBQW1CLDhHQUE4RyxrREFBa0QsaUJBQWlCLG9GQUFvRixVQUFVLGFBQWEsRUFBRSxvQkFBb0Isd0JBQXdCLFdBQVcsRUFBRSwwQkFBMEIsdUNBQXVDLHNCQUFzQiw4QkFBOEIsZ0NBQWdDLHlCQUF5QixlQUFlLDhCQUE4QixhQUFhLEVBQUUsZ0RBQWdELG1DQUFtQyxzRkFBc0YsaUVBQWlFLFdBQVcsYUFBYSxhQUFhLEVBQUUsMENBQTBDLDJJQUEySSwwQ0FBMEMsc0JBQXNCLFdBQVcsK0JBQStCLGtCQUFrQix3QkFBd0Isc0ZBQXNGLDJCQUEyQixXQUFXLE9BQU8sK0JBQStCLDRMQUE0TCwrQkFBK0Isb0JBQW9CLDRDQUE0QyxZQUFZLFdBQVcsUUFBUSxjQUFjLFVBQVUsU0FBUyw2QkFBNkIsNEJBQTRCLDRCQUE0QixXQUFXLGdCQUFnQixhQUFhLEVBQUUsdUZBQXVGLHFCQUFxQixhQUFhLGtEQUFrRCxpQ0FBaUMsNkRBQTZELElBQUksd0JBQXdCLElBQUksb0JBQW9CLGtCQUFrQixnRUFBZ0UsU0FBUyw4RkFBOEYsa0JBQWtCLDhDQUE4Qyw0R0FBNEcsVUFBVSxtQkFBbUIsU0FBUyxXQUFXLFVBQVUsRUFBRSx3Q0FBd0Msc0JBQXNCLGFBQWEsYUFBYSxxQ0FBcUMsc0lBQXNJLGFBQWEsc0RBQXNELFlBQVksNkRBQTZELFVBQVUsa0pBQWtKLDZCQUE2Qix3Q0FBd0MsRUFBRSx1RUFBdUUsc0JBQXNCLGFBQWEsd0lBQXdJLGNBQWMsbUNBQW1DLG9EQUFvRCx5QkFBeUIsS0FBSyxzQkFBc0IsNkZBQTZGLFdBQVcsRUFBRSx3QkFBd0IsV0FBVyx1QkFBdUIsRUFBRSw4RkFBOEYsNk1BQTZNLGVBQWUsbUJBQW1CLG1CQUFtQix1Q0FBdUMsNEJBQTRCLFdBQVcsb0JBQW9CLHdCQUF3QixtQkFBbUIsa0NBQWtDLFdBQVcsS0FBSyxXQUFXLHFDQUFxQywrTUFBK00sRUFBRSx1REFBdUQsR0FBRyxFQUFFLHNHQUFzRyxzQkFBc0IsYUFBYSxtREFBbUQsZ0JBQWdCLDZGQUE2RixvREFBb0QsV0FBVyxpREFBaUQsUUFBUSxhQUFhLFdBQVcsRUFBRSx5QkFBeUIsNENBQTRDLHNCQUFzQix1Q0FBdUMsRUFBRSw4QkFBOEIsZ0VBQWdFLCtCQUErQixpR0FBaUcsYUFBYSxFQUFFLDJDQUEyQyxzQkFBc0IsYUFBYSxvQ0FBb0Msa0JBQWtCLDhCQUE4QixXQUFXLDBCQUEwQixxQ0FBcUMseUJBQXlCLGtCQUFrQixzQkFBc0IsYUFBYSxFQUFFLHlEQUF5RCxzQkFBc0IsYUFBYSxFQUFFLG1DQUFtQyxzQkFBc0IsYUFBYSxXQUFXLDhEQUE4RCxzRUFBc0Usa0ZBQWtGLHVCQUF1Qix5QkFBeUIsdUNBQXVDLG9CQUFvQixtQkFBbUIsc0JBQXNCLDBCQUEwQixzQkFBc0IsNkZBQTZGLEdBQUcsc0JBQXNCLGFBQWEsa0JBQWtCLHVDQUF1QyxJQUFJLHNWQUFzVixpREFBaUQsdUtBQXVLLFdBQVcsc0lBQXNJLG1CQUFtQixnQkFBZ0IseVBBQXlQLGlEQUFpRCx5QkFBeUIsK0JBQStCLGVBQWUsb0NBQW9DLGlCQUFpQixnRkFBZ0YsdUJBQXVCLGlCQUFpQixjQUFjLDREQUE0RCxPQUFPLGdCQUFnQiw4RkFBOEYscUJBQXFCLFVBQVUsNEpBQTRKLG9CQUFvQixTQUFTLGtDQUFrQyxrQkFBa0IsSUFBSSxzQkFBc0IscUVBQXFFLFNBQVMsUUFBUSxpQ0FBaUMsd0JBQXdCLEVBQUUsOEJBQThCLHdCQUF3QixvQkFBb0Isa0JBQWtCLHlDQUF5Qyx3QkFBd0IsRUFBRSxrREFBa0QsdUJBQXVCLG9CQUFvQixjQUFjLG9CQUFvQixtRkFBbUYseUNBQXlDLG9DQUFvQyxNQUFNLFdBQVcsaUNBQWlDLFlBQVksc0JBQXNCLDhGQUE4RixvQ0FBb0MsV0FBVyxJQUFJLG9CQUFvQixFQUFFLHNKQUFzSix1S0FBdUssK0tBQStLLGtDQUFrQyw2QkFBNkIsU0FBUyw0QkFBNEIsNENBQTRDLDZCQUE2QixvREFBb0Qsa0NBQWtDLGNBQWMsaUZBQWlGLFlBQVksRUFBRSxnTkFBZ04sc0JBQXNCLHNCQUFzQixFQUFFLGNBQWMsc0JBQXNCLGFBQWEsd0JBQXdCLGNBQWMsZUFBZSxZQUFZLG1CQUFtQixrQkFBa0IsMkRBQTJELDhCQUE4Qiw4Q0FBOEMsZ0dBQWdHLEtBQUssdUdBQXVHLFNBQVMsK0NBQStDLCtGQUErRiw4Q0FBOEMsa0NBQWtDLHNDQUFzQyxtRUFBbUUsdUJBQXVCLGFBQWEsRUFBRSxnQ0FBZ0Msc0JBQXNCLGFBQWEsb0JBQW9CLGNBQWMsMERBQTBELGFBQWEsd0JBQXdCLDhCQUE4Qix3QkFBd0IsNklBQTZJLHNCQUFzQixnQ0FBZ0Msa0JBQWtCLDRCQUE0QixxQkFBcUIscUJBQXFCLFVBQVUseUNBQXlDLGNBQWMsNEJBQTRCLHVCQUF1Qix3QkFBd0IsZ0RBQWdELHVCQUF1QixtQ0FBbUMsb0NBQW9DLHFCQUFxQixzQkFBc0IsOEZBQThGLGFBQWEsRUFBRSxjQUFjLHNCQUFzQixhQUFhLDhCQUE4QixjQUFjLGVBQWUsNkRBQTZELG9CQUFvQixtRUFBbUUsdUJBQXVCLGFBQWEsRUFBRSxzQ0FBc0Msc0JBQXNCLGFBQWEsd0JBQXdCLGNBQWMsZUFBZSwyREFBMkQseUNBQXlDLDhDQUE4QywwQ0FBMEMsK0NBQStDLDRCQUE0QixrQ0FBa0Msb0JBQW9CLG1FQUFtRSx1QkFBdUIsYUFBYSxFQUFFLGdDQUFnQyxzQkFBc0IsYUFBYSx5QkFBeUIsY0FBYyxlQUFlLDZEQUE2RCxzREFBc0Qsc0VBQXNFLHVCQUF1QixhQUFhLEVBQUUsaUNBQWlDLHNCQUFzQixhQUFhLHFJQUFxSSxzQkFBc0IscUJBQXFCLDBLQUEwSyxFQUFFLHFIQUFxSCxzQkFBc0IsYUFBYSwrTEFBK0wsR0FBRyxzQkFBc0IsYUFBYSwyQ0FBMkMsY0FBYyxtREFBbUQscURBQXFELFdBQVcscURBQXFELEVBQUUsYUFBYSxFQUFFLG1DQUFtQyxzQkFBc0IsYUFBYSwyQ0FBMkMsYUFBYSx5REFBeUQsaUVBQWlFLHNFQUFzRSxhQUFhLEVBQUUsZ0RBQWdELHNCQUFzQixhQUFhLDJDQUEyQyxjQUFjLCtFQUErRSxxREFBcUQsTUFBTSx3Q0FBd0MsK0NBQStDLHNDQUFzQyxhQUFhLEVBQUUsbUNBQW1DLHNCQUFzQixhQUFhLDJDQUEyQyxjQUFjLDBCQUEwQixXQUFXLGtIQUFrSCxvR0FBb0csYUFBYSxXQUFXLEVBQUUsK0NBQStDLDhDQUE4QywrQkFBK0Isa0pBQWtKLHVDQUF1QyxxSkFBcUosOEJBQThCLDJDQUEyQyxpREFBaUQsMENBQTBDLGtCQUFrQixpREFBaUQsTUFBTSxvREFBb0QsTUFBTSw2REFBNkQsK0JBQStCLGFBQWEsNENBQTRDLEVBQUUsYUFBYSxFQUFFLG1DQUFtQyxzQkFBc0IsYUFBYSxjQUFjLHlDQUF5QyxpREFBaUQsdUVBQXVFLHdCQUF3QixvQkFBb0IsYUFBYSxpQkFBaUIsb0JBQW9CLGdCQUFnQiw0QkFBNEIsYUFBYSxJQUFJLG1EQUFtRCxTQUFTLHFCQUFxQixTQUFTLG1CQUFtQixnS0FBZ0ssa0JBQWtCLHVDQUF1QyxvQkFBb0IsaUZBQWlGLG9CQUFvQixrQ0FBa0MsNEJBQTRCLHVDQUF1QyxrQkFBa0IsZ0NBQWdDLDhCQUE4QixpRkFBaUYsb0VBQW9FLFdBQVcsK0JBQStCLGtCQUFrQix3QkFBd0IsUUFBUSwyQkFBMkIsV0FBVyxPQUFPLGtCQUFrQixtR0FBbUcsbUJBQW1CLDRDQUE0Qyx1QkFBdUIsNEdBQTRHLG1CQUFtQiwwQkFBMEIsYUFBYSw4QkFBOEIsNkRBQTZELDRCQUE0Qix1SEFBdUgsaUJBQWlCLGlGQUFpRixxREFBcUQscUJBQXFCLDBCQUEwQiwrQ0FBK0MsYUFBYSxHQUFHLHNCQUFzQixhQUFhLCtIQUErSCxvQkFBb0IsMkNBQTJDLFVBQVUsZ0JBQWdCLG1DQUFtQyx5REFBeUQsMEJBQTBCLGtCQUFrQix5QkFBeUIsVUFBVSxzQkFBc0IsSUFBSSxzQkFBc0IsVUFBVSw4REFBOEQsZ0NBQWdDLG1DQUFtQyxpQkFBaUIscUJBQXFCLFFBQVEsV0FBVyxtQkFBbUIsVUFBVSwrQkFBK0Isc0RBQXNELDZDQUE2QyxXQUFXLGlDQUFpQyxTQUFTLHlDQUF5Qyw4REFBOEQsU0FBUyxLQUFLLFNBQVMsS0FBSyxLQUFLLFdBQVcsRUFBRSxrQkFBa0IsUUFBUSxVQUFVLDRDQUE0QyxNQUFNLHdCQUF3QixJQUFJLGtIQUFrSCxTQUFTLG1EQUFtRCxhQUFhLHVCQUF1QixpQkFBaUIsa0JBQWtCLFdBQVcsK0NBQStDLHdCQUF3QiwrQkFBK0IsdUJBQXVCLE9BQU8sbUJBQW1CLHlEQUF5RCxrQkFBa0IsaUNBQWlDLDRCQUE0QixxSUFBcUksbUJBQW1CLDJDQUEyQyxLQUFLLGFBQWEsRUFBRSwrSUFBK0ksc0JBQXNCLGFBQWEsa1BBQWtQLEtBQUsseUJBQXlCLElBQUkseUJBQXlCLHVCQUF1QixPQUFPLFNBQVMsSUFBSSw2RkFBNkYseURBQXlELFNBQVMsWUFBWSxJQUFJLDZDQUE2QyxTQUFTLGlCQUFpQixFQUFFLHFCQUFxQixzQkFBc0IsYUFBYSxnSEFBZ0gsTUFBTSx3REFBd0QsZ0JBQWdCLGFBQWEsK0NBQStDLGFBQWEsNEJBQTRCLHlCQUF5QiwyREFBMkQsNkJBQTZCLFFBQVEsSUFBSSwySkFBMkosd0RBQXdELElBQUksNlFBQTZRLFNBQVMsSUFBSSwwQkFBMEIsZ0ZBQWdGLHdDQUF3QyxVQUFVLElBQUksNEJBQTRCLHVDQUF1QyxLQUFLLDJCQUEyQixTQUFTLHNCQUFzQix5RkFBeUYsc0ZBQXNGLHVEQUF1RCxzREFBc0QsOERBQThELHdDQUF3QyxpQkFBaUIsUUFBUSxxR0FBcUcsK0JBQStCLG1CQUFtQixvQkFBb0IsTUFBTSxpREFBaUQsc0JBQXNCLEtBQUsscUNBQXFDLFFBQVEsb0pBQW9KLGlDQUFpQyxFQUFFLDhCQUE4QixpREFBaUQseUNBQXlDLHNCQUFzQiwyRUFBMkUsV0FBVyxzQ0FBc0MsRUFBRSxzQkFBc0IsRUFBRSwyRUFBMkUsc0JBQXNCLGFBQWEsc0dBQXNHLGNBQWMsU0FBUyxnQkFBZ0IsWUFBWSxXQUFXLDZCQUE2QixTQUFTLHdCQUF3Qix1QkFBdUIsSUFBSSxxQkFBcUIsT0FBTyxFQUFFLFNBQVMsSUFBSSw2RkFBNkYsZ0NBQWdDLFNBQVMsc0RBQXNELE9BQU8saUNBQWlDLHdCQUF3QixpREFBaUQsS0FBSyxJQUFJLDZLQUE2SyxrQkFBa0IsNkJBQTZCLGlCQUFpQixXQUFXLGlDQUFpQyxTQUFTLGlCQUFpQixzQkFBc0IsSUFBSSxrRkFBa0YsU0FBUyxVQUFVLHlCQUF5QixJQUFJLGlGQUFpRixTQUFTLFVBQVUsS0FBSyxjQUFjLGtDQUFrQywyR0FBMkcsSUFBSSxLQUFLLGlDQUFpQyxTQUFTLGtCQUFrQiw0QkFBNEIsZ0JBQWdCLFlBQVksV0FBVyxjQUFjLFNBQVMsc0JBQXNCLFNBQVMsVUFBVSwyQkFBMkIsZ0NBQWdDLHlCQUF5QixxQ0FBcUMsd0JBQXdCLHFDQUFxQyx3QkFBd0IscUNBQXFDLFVBQVUseUNBQXlDLGdDQUFnQyx3QkFBd0IseUJBQXlCLHdCQUF3QiwyQkFBMkIsZ0JBQWdCLG1CQUFtQiw0QkFBNEIsbUJBQW1CLG9EQUFvRCxzQ0FBc0MseUJBQXlCLHdCQUF3QiwyQ0FBMkMsZUFBZSwyQkFBMkIsZ0NBQWdDLHlCQUF5QixnQkFBZ0IscUNBQXFDLDJCQUEyQixlQUFlLDJCQUEyQixnQ0FBZ0MseUJBQXlCLHlDQUF5Qyx3QkFBd0IscUNBQXFDLGNBQWMsNkJBQTZCLHVCQUF1QixrQkFBa0IscUJBQXFCLGtCQUFrQix5QkFBeUIsd1BBQXdQLDRCQUE0QiwrRUFBK0UscUVBQXFFLGFBQWEsUUFBUSxpQkFBaUIsMEVBQTBFLFNBQVMseUJBQXlCLGFBQWEsdUJBQXVCLEVBQUUsMEJBQTBCLGNBQWMsMENBQTBDLHFCQUFxQixhQUFhLFFBQVEsbUJBQW1CLGdHQUFnRyxTQUFTLHNDQUFzQyw2Q0FBNkMsa0xBQWtMLHFCQUFxQixxQkFBcUIsbUJBQW1CLHVCQUF1QixrQkFBa0Isd0JBQXdCLElBQUksbUJBQW1CLHFCQUFxQixxSEFBcUgsc0VBQXNFLGdKQUFnSixHQUFHLEVBQUUsc0ZBQXNGLHNCQUFzQixhQUFhLGlIQUFpSCxjQUFjLGlDQUFpQyxhQUFhLDJCQUEyQiwwQ0FBMEMscUJBQXFCLGdDQUFnQywyR0FBMkcsMkJBQTJCLHdCQUF3Qix3QkFBd0Isb0NBQW9DLGlDQUFpQyxrQ0FBa0Msc1VBQXNVLDJHQUEyRyxtREFBbUQsdUNBQXVDLDJYQUEyWCw4Q0FBOEMsSUFBSSwwR0FBMEcsdUJBQXVCLDhDQUE4QywyT0FBMk8sMkJBQTJCLFFBQVEsUUFBUSxvQkFBb0IseUtBQXlLLDJCQUEyQixNQUFNLGdEQUFnRCx5REFBeUQsV0FBVyxpQkFBaUIsb0VBQW9FLDZOQUE2Tiw2QkFBNkIsZ0VBQWdFLDBRQUEwUSx3QkFBd0IsUUFBUSxnV0FBZ1csbUxBQW1MLHliQUF5YixtSkFBbUosZ0RBQWdELHFEQUFxRCxVQUFVLHVFQUF1RSw2RUFBNkUsMkJBQTJCLGlCQUFpQixrQkFBa0IsMkZBQTJGLGFBQWEsRUFBRSxpR0FBaUcsc0JBQXNCLGFBQWEsMklBQTJJLGdCQUFnQixrQ0FBa0MsYUFBYSx1QkFBdUIsMkJBQTJCLG9CQUFvQixpQ0FBaUMsMkJBQTJCLFFBQVEsaVVBQWlVLHlCQUF5QixrRUFBa0UsWUFBWSwrS0FBK0ssZ0hBQWdILDZCQUE2Qiw4TkFBOE4sbUJBQW1CLHlTQUF5UyxtSEFBbUgsOEJBQThCLG1EQUFtRCw0QkFBNEIsb09BQW9PLGtDQUFrQyx3QkFBd0IsbUNBQW1DLGlVQUFpVSw2QkFBNkIsMkNBQTJDLDBDQUEwQyxFQUFFLFlBQVksb0VBQW9FLHVCQUF1QixjQUFjLHVCQUF1Qix3Q0FBd0Msa0hBQWtILEtBQUssdUNBQXVDLCtCQUErQixLQUFLLHFDQUFxQyxvREFBb0QsMENBQTBDLGtDQUFrQyxLQUFLLHdDQUF3Qyx5REFBeUQsc0NBQXNDLDhCQUE4QixNQUFNLGlCQUFpQix1R0FBdUcsWUFBWSx5Q0FBeUMsOEJBQThCLE1BQU0saUJBQWlCLDBHQUEwRyxhQUFhLGFBQWEsRUFBRSxzSEFBc0gsc0JBQXNCLGFBQWEsa0JBQWtCLG9NQUFvTSxtRUFBbUUsa0lBQWtJLGFBQWEsMkJBQTJCLHNCQUFzQixJQUFJLG1EQUFtRCxpREFBaUQsd0VBQXdFLHdCQUF3QixvRkFBb0YsU0FBUyw0QkFBNEIscUJBQXFCLHFCQUFxQiw0Q0FBNEMsMEJBQTBCLDhEQUE4RCwrQkFBK0IsMkdBQTJHLCtCQUErQixzRkFBc0YsOEJBQThCLG9IQUFvSCwyRkFBMkYsOEZBQThGLEtBQUssV0FBVyx3QkFBd0IsWUFBWSxFQUFFLG1IQUFtSCxzQkFBc0IsYUFBYSxhQUFhLHVEQUF1RCxNQUFNLG1EQUFtRCxhQUFhLGlCQUFpQixlQUFlLGdCQUFnQix5SUFBeUkseUNBQXlDLGdDQUFnQyxpRUFBaUUsMkNBQTJDLFlBQVksaUJBQWlCLEtBQUssMkJBQTJCLGlDQUFpQyx3QkFBd0IsU0FBUyxhQUFhLFFBQVEsS0FBSyxtQkFBbUIsRUFBRSxFQUFFLGtCQUFrQixNQUFNLFFBQVEsV0FBVyxLQUFLLHNCQUFzQix1QkFBdUIsZ0hBQWdILEVBQUUsR0FBRyxzQkFBc0IsYUFBYSxxQkFBcUIsY0FBYyxRQUFRLDhDQUE4QyxjQUFjLDJFQUEyRSxnRUFBZ0Usa0JBQWtCLHdMQUF3TCxrQkFBa0IsYUFBYSxNQUFNLElBQUksT0FBTyxTQUFTLHFCQUFxQixxRkFBcUYsRUFBRSxjQUFjLGdCQUFnQix5RkFBeUYsc0JBQXNCLGdCQUFnQixTQUFTLGNBQWMsd0JBQXdCLGNBQWMseUJBQXlCLG1CQUFtQixPQUFPLEVBQUUsK0JBQStCLGdCQUFnQixTQUFTLElBQUksZ0NBQWdDLFNBQVMsMkJBQTJCLFNBQVMsNENBQTRDLG9DQUFvQyx1QkFBdUIsNkJBQTZCLHNDQUFzQyxTQUFTLEVBQUUsYUFBYSxzQ0FBc0MsUUFBUSxFQUFFLEVBQUUsK0JBQStCLHlCQUF5QixnQ0FBZ0MsMEZBQTBGLDhCQUE4QixrRkFBa0YsU0FBUyx1Q0FBdUMsMEJBQTBCLDRDQUE0QyxtQ0FBbUMsc0NBQXNDLHlCQUF5QiwyQ0FBMkMsa0NBQWtDLHlCQUF5QixhQUFhLGlEQUFpRCxjQUFjLFlBQVksS0FBSyxzQkFBc0IsOEJBQThCLE1BQU0sNkJBQTZCLFNBQVMsd0JBQXdCLHNCQUFzQiw4QkFBOEIsTUFBTSw0QkFBNEIsU0FBUyx1QkFBdUIsOEJBQThCLGdDQUFnQyxzQkFBc0Isa0JBQWtCLHFCQUFxQixtQkFBbUIsV0FBVyw4R0FBOEcsb0JBQW9CLDhCQUE4QiwwQ0FBMEMsS0FBSyxNQUFNLFdBQVcsU0FBUyxnQkFBZ0IsOEJBQThCLHlDQUF5QyxhQUFhLHdCQUF3QixHQUFHLG9CQUFvQixXQUFXLDhHQUE4RyxvQkFBb0IsOEJBQThCLHVCQUF1QixLQUFLLE1BQU0sc0NBQXNDLHlCQUF5QixhQUFhLHdCQUF3QixFQUFFLE1BQU0sVUFBVSxFQUFFLGFBQWEsc0JBQXNCLGFBQWEsU0FBUyxrSEFBa0gsRUFBRSx3RkFBd0Ysc0JBQXNCLGFBQWEsaUtBQWlLLGNBQWMsd0NBQXdDLHVCQUF1QiwyRUFBMkUsTUFBTSxFQUFFLG1CQUFtQix1TUFBdU0sb0ZBQW9GLCtCQUErQixrRUFBa0UsTUFBTSx3TkFBd04sbUJBQW1CLGdCQUFnQixlQUFlLDRDQUE0QyxnQkFBZ0IsK0JBQStCLDZDQUE2Qyx1QkFBdUIsK0tBQStLLEdBQUcsNElBQTRJLDJMQUEyTCw4Q0FBOEMsbUhBQW1ILGdDQUFnQyxvQkFBb0IsK0JBQStCLCtKQUErSixvREFBb0QsY0FBYyxnQkFBZ0Isc0JBQXNCLGNBQWMsa0JBQWtCLEVBQUUsc0dBQXNHLHNCQUFzQixhQUFhLCtMQUErTCxjQUFjLHdDQUF3Qyx1QkFBdUIsbUNBQW1DLE1BQU0sRUFBRSxtQkFBbUIseVZBQXlWLDZDQUE2QyxvQ0FBb0MsNERBQTRELGdCQUFnQixlQUFlLDRDQUE0QyxnQkFBZ0IsK0JBQStCLG9GQUFvRix1QkFBdUIsc01BQXNNLEdBQUcsOFdBQThXLCtYQUErWCwyREFBMkQsc0xBQXNMLGdDQUFnQyxvQkFBb0IsK0JBQStCLG9LQUFvSyxvREFBb0QsY0FBYyxnQkFBZ0IsWUFBWSxFQUFFLGlKQUFpSixzQkFBc0IsYUFBYSxzR0FBc0cscUJBQXFCLGtEQUFrRCxTQUFTLEVBQUUsZ0JBQWdCLE1BQU0sa0VBQWtFLGlEQUFpRCxTQUFTLDJCQUEyQixpRUFBaUUsT0FBTyw2QkFBNkIscURBQXFELGlCQUFpQixJQUFJLGtCQUFrQiwyQkFBMkIsZ0JBQWdCLHFCQUFxQixJQUFJLG1CQUFtQix5Q0FBeUMsSUFBSSxrQ0FBa0MsVUFBVSxJQUFJLDZCQUE2QixZQUFZLElBQUksa0JBQWtCLDJCQUEyQiw4QkFBOEIsdUJBQXVCLG9JQUFvSSxlQUFlLEdBQUcsc0JBQXNCLGFBQWEsOEJBQThCLElBQUksb0NBQW9DLFNBQVMsS0FBSyxJQUFJLGtEQUFrRCxTQUFTLEtBQUssOEJBQThCLE1BQU0sd0RBQXdELGdCQUFnQixvR0FBb0csaUJBQWlCLElBQUksaUNBQWlDLFNBQVMseUNBQXlDLDZCQUE2QixRQUFRLElBQUksMkpBQTJKLDBCQUEwQixJQUFJLDZRQUE2USxTQUFTLDZCQUE2QixxQkFBcUIsNkJBQTZCLDhDQUE4QyxJQUFJLHlCQUF5QixTQUFTLDRCQUE0QiwyQ0FBMkMsVUFBVSxJQUFJLDRCQUE0Qix1Q0FBdUMsS0FBSywyQkFBMkIsU0FBUyxzQkFBc0IseUZBQXlGLGNBQWMsNEJBQTRCLE1BQU0saURBQWlELHNCQUFzQixLQUFLLHNDQUFzQyxFQUFFLGNBQWMsc0JBQXNCLGFBQWEsNEJBQTRCLHlDQUF5QyxNQUFNLEVBQUUscUJBQXFCLHlCQUF5QixFQUFFLGtCQUFrQixrQkFBa0IsR0FBRyxzQkFBc0IsYUFBYSxXQUFXLCtYQUErWCxHQUFHLHNCQUFzQixhQUFhLGlCQUFpQixtQkFBbUIsTUFBTSxLQUFLLElBQUksWUFBWSxJQUFJLGlDQUFpQyxPQUFPLFNBQVMsR0FBRyw0QkFBNEIsY0FBYyxNQUFNLFlBQVksSUFBSSw0QkFBNEIsWUFBWSxHQUFHLHNCQUFzQixhQUFhLDhNQUE4TSxnQkFBZ0Isb0JBQW9CLGNBQWMsdUJBQXVCLGNBQWMsbUJBQW1CLE9BQU8sUUFBUSxjQUFjLDBCQUEwQixpTkFBaU4sZ0JBQWdCLHFIQUFxSCxnQkFBZ0IsNkJBQTZCLGdCQUFnQixzRUFBc0UsZ0JBQWdCLDZMQUE2TCxvRUFBb0UsR0FBRywrREFBK0QsU0FBUyxJQUFJLG1KQUFtSix3QkFBd0Isa0NBQWtDLHNCQUFzQiw0QkFBNEIsb0NBQW9DLGNBQWMsbUNBQW1DLEdBQUcsK0RBQStELHdHQUF3Ryx1Q0FBdUMsRUFBRSxVQUFVLHVDQUF1QyxFQUFFLEtBQUssNkJBQTZCLHNaQUFzWixzS0FBc0ssR0FBRywwQ0FBMEMsZ0JBQWdCLGFBQWEsRUFBRSxrQkFBa0Isc0NBQXNDLHlCQUF5Qiw4WEFBOFgscUJBQXFCLCtLQUErSyxFQUFFLGFBQWEsaUpBQWlKLHdFQUF3RSw4Q0FBOEMsc0lBQXNJLGdCQUFnQixlQUFlLEVBQUUsa0JBQWtCLHNDQUFzQyx5QkFBeUIseWVBQXllLHdJQUF3SSxvTEFBb0wsRUFBRSxrR0FBa0csMkJBQTJCLGlIQUFpSCxvREFBb0QseU5BQXlOLHNCQUFzQixtRkFBbUYsYUFBYSw4bkNBQThuQyxjQUFjLE1BQU0sNk1BQTZNLGNBQWMsV0FBVywwQkFBMEIsNlNBQTZTLFlBQVksd0JBQXdCLGVBQWUsUUFBUSw4R0FBOEcsYUFBYSxZQUFZLHVlQUF1ZSwrQkFBK0IsWUFBWSxzREFBc0QsRUFBRSxtQkFBbUIsd0NBQXdDLHlCQUF5QixzQ0FBc0Msc0JBQXNCLGtIQUFrSCxpRkFBaUYsb0hBQW9ILDBOQUEwTix1QkFBdUIseUZBQXlGLDREQUE0RCx5QkFBeUIsWUFBWSw0Q0FBNEMseUdBQXlHLG1yQkFBbXJCLEtBQUssMkJBQTJCLHFMQUFxTCxvQ0FBb0MsZ0JBQWdCLDBNQUEwTSxnREFBZ0QsMElBQTBJLGlCQUFpQixtQ0FBbUMsWUFBWSxHQUFHLG1LQUFtSyxJQUFJLE1BQU0sb0ZBQW9GLGFBQWEsOEdBQThHLGlCQUFpQixzQ0FBc0MsWUFBWSxHQUFHLG1LQUFtSyxJQUFJLE1BQU0sMEZBQTBGLGFBQWEsbUdBQW1HLGtCQUFrQixpTUFBaU0saURBQWlELHlEQUF5RCxpREFBaUQsMkRBQTJELG1DQUFtQyxXQUFXLEVBQUUsNENBQTRDLGtCQUFrQixNQUFNLGtJQUFrSSwwR0FBMEcsbUNBQW1DLDRCQUE0QixFQUFFLG1CQUFtQix1Q0FBdUMseUJBQXlCLDBHQUEwRyxlQUFlLElBQUksMkdBQTJHLGdGQUFnRixtUEFBbVAsMEdBQTBHLDJCQUEyQix5RkFBeUYsbU1BQW1NLDZTQUE2UywwQkFBMEIsTUFBTSxrSUFBa0ksc0NBQXNDLCtCQUErQix5QkFBeUIsdUVBQXVFLGdSQUFnUixlQUFlLEVBQUUscUNBQXFDLHlIQUF5SCxFQUFFLGtDQUFrQyw4TEFBOEwsb0RBQW9ELEVBQUUsOEVBQThFLHNCQUFzQixhQUFhLHFCQUFxQix3SUFBd0ksR0FBRyxzQkFBc0IsYUFBYSx3QkFBd0Isc0RBQXNELHlQQUF5UCxLQUFLLHFEQUFxRCxRQUFRLEVBQUUsd0RBQXdELEtBQUssWUFBWSxjQUFjLDRCQUE0QixXQUFXLFNBQVMsVUFBVSxRQUFRLDhDQUE4QyxRQUFRLDZIQUE2SCxRQUFRLEVBQUUsNENBQTRDLGNBQWMsNEJBQTRCLFdBQVcsd0NBQXdDLFFBQVEsd0ZBQXdGLGdEQUFnRCxRQUFRLDBCQUEwQixzQkFBc0IsZ0RBQWdELFFBQVEsa0JBQWtCLGVBQWUsU0FBUyxrQkFBa0IsRUFBRSxXQUFXLGFBQWEsc0JBQXNCLFNBQVMsa0JBQWtCLEVBQUUsWUFBWSxXQUFXLGtCQUFrQixFQUFFLFlBQVksb0JBQW9CLFNBQVMsa0JBQWtCLEVBQUUsVUFBVSxLQUFLLElBQUksZ0RBQWdELHdDQUF3QyxLQUFLLFVBQVUsbURBQW1ELEVBQUUsd0NBQXdDLE9BQU8sT0FBTyxnQkFBZ0IseUlBQXlJLEdBQUcsc0JBQXNCLGFBQWEsK0hBQStILGNBQWMsOERBQThELGFBQWEsK2ZBQStmLGNBQWMsTUFBTSwwUUFBMFEsY0FBYyxNQUFNLG1FQUFtRSxnQkFBZ0IsUUFBUSxtS0FBbUssZ0JBQWdCLFFBQVEsOEVBQThFLGFBQWEsY0FBYyxNQUFNLE1BQU0sNkNBQTZDLE1BQU0sZUFBZSxLQUFLLE1BQU0sZUFBZSxLQUFLLE1BQU0sZUFBZSxLQUFLLE1BQU0sZUFBZSxpQ0FBaUMsT0FBTyxNQUFNLEtBQUssZUFBZSw0QkFBNEIsT0FBTyxPQUFPLGtEQUFrRCxvQkFBb0IsZ0JBQWdCLGtZQUFrWSxrRkFBa0YsZUFBZSwwQ0FBMEMsMkhBQTJILDhEQUE4RCwwSUFBMEksUUFBUSxnQkFBZ0Isc0JBQXNCLFVBQVUsTUFBTSxLQUFLLEtBQUssRUFBRSxpQkFBaUIsc0JBQXNCLHdCQUF3QiwwRUFBMEUsTUFBTSw2RUFBNkUseUNBQXlDLE1BQU0sY0FBYyw2Q0FBNkMsTUFBTSxnREFBZ0QsbUJBQW1CLHNDQUFzQyxNQUFNLHVEQUF1RCxNQUFNLFlBQVksS0FBSyxFQUFFLGlCQUFpQixzQkFBc0IsK0JBQStCLDZDQUE2QyxNQUFNLGtCQUFrQiwyQ0FBMkMsTUFBTSw4R0FBOEcsWUFBWSxLQUFLLEVBQUUsaUJBQWlCLHNCQUFzQix5SUFBeUksWUFBWSxLQUFLLEVBQUUsaUJBQWlCLHNCQUFzQiw4SEFBOEgsd0JBQXdCLEtBQUssS0FBSyxFQUFFLGlCQUFpQixzQkFBc0IsZ0hBQWdILGlDQUFpQyxTQUFTLG9RQUFvUSxvQkFBb0Isd0JBQXdCLGlCQUFpQixRQUFRLG1GQUFtRixFQUFFLCtEQUErRCxnQ0FBZ0Msb0JBQW9CLHdCQUF3QixpQkFBaUIsUUFBUSxzRkFBc0YsRUFBRSwrREFBK0QsbUNBQW1DLFNBQVMsdUJBQXVCLEtBQUssS0FBSyxFQUFFLGlCQUFpQixzQkFBc0Isd0JBQXdCLHNDQUFzQyxNQUFNLE1BQU0sOEVBQThFLE1BQU0sYUFBYSxLQUFLLEVBQUUsaUJBQWlCLHNCQUFzQixxQ0FBcUMseUdBQXlHLDRCQUE0QixnQ0FBZ0MsbUJBQW1CLDBCQUEwQixNQUFNLEtBQUssSUFBSSxFQUFFLGlCQUFpQixzQkFBc0IsbUNBQW1DLGlCQUFpQixNQUFNLHFDQUFxQyxZQUFZLFFBQVEsaUJBQWlCLE1BQU0sNENBQTRDLFlBQVksTUFBTSw0QkFBNEIsS0FBSyxFQUFFLGlCQUFpQixzQkFBc0IsOEJBQThCLCtDQUErQyxNQUFNLGtEQUFrRCxrQkFBa0IsdUJBQXVCLHVDQUF1QyxzREFBc0QsTUFBTSxVQUFVLE1BQU0sYUFBYSxLQUFLLEVBQUUsaUJBQWlCLHNCQUFzQixtSEFBbUgsc0RBQXNELE1BQU0sbUJBQW1CLGFBQWEsZUFBZSxFQUFFLEtBQUssSUFBSSxFQUFFLGlCQUFpQixzQkFBc0Isb0NBQW9DLEtBQUssVUFBVSx1QkFBdUIscUNBQXFDLGVBQWUsNkRBQTZELDJDQUEyQyxNQUFNLG1CQUFtQixhQUFhLHNCQUFzQixFQUFFLEtBQUssd0VBQXdFLEVBQUUsaUJBQWlCLHNCQUFzQix1Q0FBdUMsS0FBSyxXQUFXLFVBQVUsSUFBSSxFQUFFLGlCQUFpQixzQkFBc0IsMkJBQTJCLDRDQUE0QyxNQUFNLHlDQUF5QyxnQkFBZ0IsVUFBVSxJQUFJLEVBQUUsaUJBQWlCLHNCQUFzQixzQ0FBc0MsS0FBSyxVQUFVLElBQUksRUFBRSxpQkFBaUIsc0JBQXNCLHlDQUF5Qyw0QkFBNEIsNENBQTRDLE1BQU0sS0FBSyxJQUFJLHFCQUFxQixxQkFBcUIsb0JBQW9CLHVEQUF1RCxNQUFNLGtCQUFrQixlQUFlLGlFQUFpRSw4Q0FBOEMsTUFBTSx3Q0FBd0MsZ0JBQWdCLHlFQUF5RSx3Q0FBd0MsTUFBTSwyQkFBMkIsa0JBQWtCLHlCQUF5QixpTUFBaU0sTUFBTSxhQUFhLHdFQUF3RSxFQUFFLGlCQUFpQixzQkFBc0Isa0JBQWtCLGdCQUFnQiw2RUFBNkUsRUFBRSxpQkFBaUIsc0JBQXNCLHNCQUFzQiwyQ0FBMkMsVUFBVSxNQUFNLFNBQVMsb0JBQW9CLE1BQU0sU0FBUyw4Q0FBOEMsTUFBTSx1QkFBdUIsb0JBQW9CLGNBQWMsSUFBSSxFQUFFLGlCQUFpQixzQkFBc0IsbUVBQW1FLHlCQUF5QixhQUFhLDBFQUEwRSxFQUFFLGlCQUFpQixzQkFBc0IsZUFBZSxnQkFBZ0IsOEVBQThFLEVBQUUsaUJBQWlCLHNCQUFzQixzQkFBc0IsK0JBQStCLHdDQUF3QyxNQUFNLGtDQUFrQyxvQkFBb0IsY0FBYyxJQUFJLEVBQUUsaUJBQWlCLHNCQUFzQixtRUFBbUUsb0JBQW9CLGdEQUFnRCxNQUFNLFVBQVUseUJBQXlCLHFCQUFxQixtQ0FBbUMsZ0RBQWdELE1BQU0saUZBQWlGLGlDQUFpQyxnQ0FBZ0Msa0JBQWtCLEVBQUUsMEJBQTBCLE1BQU0seUJBQXlCLDhCQUE4QixNQUFNLG1CQUFtQixLQUFLLEtBQUssRUFBRSxpQkFBaUIsc0JBQXNCLHFJQUFxSSx1Q0FBdUMsTUFBTSxNQUFNLFVBQVUsNEJBQTRCLEtBQUssS0FBSyxFQUFFLGlCQUFpQixzQkFBc0IsNkJBQTZCLHlDQUF5QyxNQUFNLE1BQU0sVUFBVSxZQUFZLFFBQVEsYUFBYSxRQUFRLGlCQUFpQix5QkFBeUIsOGRBQThkLDBCQUEwQix5QkFBeUIsY0FBYyxnREFBZ0Qsa0NBQWtDLE1BQU0scUVBQXFFLHNDQUFzQyxpQkFBaUIsd0lBQXdJLG9EQUFvRCxFQUFFLGdGQUFnRixzQkFBc0IsYUFBYSxzYkFBc2Isb0NBQW9DLGlJQUFpSSxRQUFRLE1BQU0sV0FBVyxRQUFRLElBQUksZ0JBQWdCLGFBQWEsZUFBZSxLQUFLLHNFQUFzRSxRQUFRLGNBQWMsS0FBSyxxQkFBcUIsTUFBTSxrQ0FBa0MsZ0NBQWdDLGVBQWUsS0FBSyxxQkFBcUIsUUFBUSxJQUFJLG1DQUFtQywrSUFBK0ksTUFBTSxFQUFFLHdGQUF3Rix5Q0FBeUMsRUFBRSxhQUFhLElBQUksT0FBTywwQ0FBMEMsZUFBZSxZQUFZLG1CQUFtQixtQ0FBbUMseUJBQXlCLFdBQVcsK0NBQStDLDRCQUE0QixvREFBb0QsRUFBRSxxQkFBcUIsc0JBQXNCLGFBQWEsV0FBVyw0S0FBNEssR0FBRyxzQkFBc0IsYUFBYSxtQ0FBbUMsY0FBYyxtQkFBbUIsT0FBTyxRQUFRLHdVQUF3VSxLQUFLLHFCQUFxQixLQUFLLHFCQUFxQixLQUFLLHFCQUFxQixLQUFLLG1CQUFtQixLQUFLLHlCQUF5QixzQkFBc0IsaUhBQWlILGdCQUFnQixpREFBaUQsY0FBYyxpQ0FBaUMsZ0JBQWdCLHNFQUFzRSxrQkFBa0Isb0pBQW9KLGtCQUFrQixxQkFBcUIsZ0JBQWdCLFlBQVksMEJBQTBCLEVBQUUsYUFBYSxrQkFBa0IsNkJBQTZCLFFBQVEsS0FBSyx1QkFBdUIsUUFBUSxLQUFLLEtBQUssZUFBZSw2QkFBNkIsY0FBYyxNQUFNLFFBQVEsSUFBSSx1QkFBdUIsUUFBUSxJQUFJLHVCQUF1QixRQUFRLElBQUkscUJBQXFCLG1FQUFtRSxjQUFjLHVHQUF1RyxvQkFBb0IsZ0JBQWdCLDBDQUEwQyxrQkFBa0IsMkJBQTJCLGlHQUFpRywrQkFBK0IsWUFBWSxrQkFBa0IsZ0JBQWdCLHVCQUF1Qix3TkFBd04sRUFBRSxTQUFTLGdCQUFnQixrR0FBa0csa0NBQWtDLElBQUksa0VBQWtFLEtBQUssYUFBYSxnR0FBZ0csaUNBQWlDLEtBQUssYUFBYSxRQUFRLHdQQUF3UCxFQUFFLDZDQUE2QywyS0FBMkssUUFBUSxLQUFLLG9CQUFvQiwrQ0FBK0MsSUFBSSx3S0FBd0ssVUFBVSxHQUFHLFVBQVUsa0JBQWtCLEtBQUssd0RBQXdELFdBQVcsUUFBUSxNQUFNLHdCQUF3QixNQUFNLHFGQUFxRix3QkFBd0Isa0JBQWtCLGdDQUFnQyw4Q0FBOEMsS0FBSyxzTUFBc00sa0JBQWtCLGdDQUFnQywyQkFBMkIsS0FBSywyQ0FBMkMsWUFBWSx3QkFBd0IsRUFBRSwwSUFBMEksaURBQWlELEtBQUssU0FBUyxvQkFBb0Isd0NBQXdDLHVGQUF1RixXQUFXLHVCQUF1QixlQUFlLCtCQUErQixVQUFVLE1BQU0sbUJBQW1CLFVBQVUsYUFBYSxtQkFBbUIsS0FBSyxtQkFBbUIsVUFBVSxhQUFhLFVBQVUsSUFBSSxzQkFBc0IsWUFBWSxpQkFBaUIsUUFBUSxLQUFLLFdBQVcsUUFBUSxPQUFPLHVCQUF1QixLQUFLLE9BQU8sdUJBQXVCLEtBQUssT0FBTyx1QkFBdUIsS0FBSyxPQUFPLHVCQUF1QixtQkFBbUIsSUFBSSw2QkFBNkIsc0VBQXNFLCtIQUErSCwwREFBMEQsWUFBWSwrREFBK0QsbUJBQW1CLFFBQVEsTUFBTSxpREFBaUQsMEVBQTBFLFNBQVMsSUFBSSxxQ0FBcUMsU0FBUywrQ0FBK0MsTUFBTSwrRkFBK0YsOEJBQThCLEtBQUssa0NBQWtDLG9MQUFvTCxNQUFNLDJDQUEyQyxJQUFJLCtCQUErQiwwQ0FBMEMsMkZBQTJGLDZCQUE2QixnUkFBZ1IseUJBQXlCLDhCQUE4Qiw0SUFBNEksS0FBSyxFQUFFLHFCQUFxQixzQkFBc0IsYUFBYSxxQkFBcUIsNkxBQTZMLEdBQUcsc0JBQXNCLGFBQWEsa0VBQWtFLGdDQUFnQywwQ0FBMEMsR0FBRyxFQUFFLEdBQUcsV0FBVyxFOzs7Ozs7Ozs7Ozs7QUNaN3Q2RjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLHNCQUFzQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEscUNBQXFDOztBQUVyQztBQUNBO0FBQ0E7O0FBRUEsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixVQUFVOzs7Ozs7Ozs7Ozs7QUN2THRDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLHVCQUF1QjtBQUN2QjtBQUNB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LENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM5QyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUMsVUFBVSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUM5QyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsV0FBVyxDQUFDLFVBQVUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDbEQsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2xELEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzlDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxXQUFXLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzlDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDMUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ2hCLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUViLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNYLEdBQUcsQ0FBQyxTQUFTLEdBQUcsV0FBVyxDQUFDLFVBQVUsQ0FBQztRQUN2QyxHQUFHLENBQUMsd0JBQXdCLEdBQUcsa0JBQWtCLENBQUM7UUFDbEQsR0FBRyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ2hCLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDMUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxXQUFXLENBQUMsVUFB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QUMsU0FBUyxFQUFFLENBQUM7UUFDaEIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMxQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM5QyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUMsVUFBVSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUM5QyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsV0FBVyxDQUFDLFVBQVUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDbEQsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2xELEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzlDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxXQUFXLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzlDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDMUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ2hCLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUViLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNYLEdBQUcsQ0FBQyxTQUFTLEdBQUcsV0FBVyxDQUFDLFVBQVUsQ0FBQztRQUN2QyxHQUFHLENBQUMsd0JBQXdCLEdBQUcsa0JBQWtCLENBQUM7UUFDbEQsR0FBRyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ2hCLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDMUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDOUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDLFVBQVUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDOUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ2xELEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNsRCxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM5QyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsV0FBVyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM5QyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNoQixHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFWCxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDbEIsQ0FBQztJQUVPLGVBQWUsQ0FBQyxHQUE2QjtJQUVyRCxDQUFDO0lBRU8sVUFBVSxDQUFDLEdBQTZCO1FBQzVDLEdBQUcsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO1FBQ2xCLEdBQUcsQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDLFdBQVcsQ0FBQztRQUMxQyxHQUFHLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDaEIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUMzQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDNUQsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLENBQUM7SUFDeEIsQ0FBQztJQUVPLGlCQUFpQixDQUFDLEdBQTZCLEVBQUUsTUFBZ0IsRUFBRSxZQUE2QjtRQUNwRyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ3ZCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUNsQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQzdCLEdBQUcsQ0FBQyxTQUFTLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQztRQUNuQyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFNUQsR0FBRyxDQUFDLFNBQVMsR0FBRyxXQUFXLENBQUMsV0FBVyxDQUFDO1FBQ3hDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsaUJBQWlCLENBQUM7UUFDN0IsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ1gsSUFBSSxNQUFNLEVBQUU7WUFDUixHQUFHLENBQUMsSUFBSSxHQUFHLGlCQUFpQixDQUFDO1lBQzdCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUNwQyxJQUFJLFlBQVk7b0JBQUUsQ0FBQyxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDdEMsNERBQVUsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsdURBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDL0UsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNWO1NBQ0o7UUFFRCxJQUFJLENBQUMsU0FBUyxJQUFJLE1BQU0sQ0FBQztJQUM3QixDQUFDO0lBRU8sWUFBWSxDQUFDLEdBQTZCLEVBQUUsTUFBc0IsRUFBRSxZQUE2QjtRQUNyRyxHQUFHLENBQUMsSUFBSSxHQUFHLGlCQUFpQixDQUFDO1FBRTdCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUVsQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDVixJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFFWCxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFWCxLQUFLLE1BQU0sS0FBSyxJQUFJLE1BQU0sRUFBRTtZQUN4QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDWCxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO1lBRXZCLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDNUIsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUU1QixHQUFHLENBQUMsU0FBUyxHQUFHLFdBQVcsQ0FBQyxXQUFXLENBQUM7WUFDeEMsSUFBSSxZQUFZO2dCQUFFLENBQUMsR0FBRyxZQUFZLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUN6Qyw0REFBVSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsdURBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUM1RixDQUFDLElBQUksQ0FBQyxDQUFDO1lBRVAsSUFBSSxZQUFZO2dCQUFFLENBQUMsR0FBRyxZQUFZLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUN6Qyw0REFBVSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsdURBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNoRyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBRVAsSUFBSSxZQUFZO2dCQUFFLENBQUMsR0FBRyxZQUFZLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUN6Qyw0REFBVSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsdURBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUM3RixDQUFDLElBQUksQ0FBQyxDQUFDO1lBRVAsSUFBSSxZQUFZO2dCQUFFLENBQUMsR0FBRyxZQUFZLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUN6QyxJQUFJLENBQUMsU0FBUyxJQUFJLENBQUMsQ0FBQztZQUNwQixJQUFJLENBQUMsU0FBUyxHQUFHLGlFQUFlLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDNUUsSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLENBQUM7WUFDcEIsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUdQLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNYLElBQUksQ0FBQyxHQUFHLENBQUM7Z0JBQUUsR0FBRyxDQUFDLFNBQVMsR0FBRyxXQUFXLENBQUMsVUFBVSxDQUFDOztnQkFDN0MsR0FBRyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7WUFDL0IsR0FBRyxDQUFDLHdCQUF3QixHQUFHLGtCQUFrQixDQUFDO1lBQ2xELE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDO1lBQzdDLEdBQUcsQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLFlBQVksQ0FBQyxDQUFDO1lBQzNELENBQUMsRUFBRSxDQUFDO1lBRUosR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQ2pCO1FBQ0QsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2xCLENBQUM7SUFFTyxlQUFlLENBQUMsR0FBNkIsRUFBRSxVQUF1QixFQUFFLFlBQTZCO1FBQ3pHLEdBQUcsQ0FBQyxJQUFJLEdBQUcsaUJBQWlCLENBQUM7UUFFN0IsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBRWxCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNWLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUVYLEtBQUssTUFBTSxJQUFJLElBQUksVUFBVSxFQUFFO1lBQzNCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztZQUNYLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7WUFFdkIsSUFBSSxDQUFDLEdBQUcsQ0FBQztnQkFBRSxHQUFHLENBQUMsU0FBUyxHQUFHLFdBQVcsQ0FBQyxVQUFVLENBQUM7O2dCQUM3QyxHQUFHLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztZQUMvQixHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDeEQsQ0FBQyxFQUFFLENBQUM7WUFFSixHQUFHLENBQUMsU0FBUyxHQUFHLFdBQVcsQ0FBQyxXQUFXLENBQUM7WUFFeEMsSUFBSSxZQUFZO2dCQUFFLENBQUMsR0FBRyxZQUFZLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUN6Qyw0REFBVSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsdURBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNoRixDQUFDLElBQUksQ0FBQyxDQUFDO1lBRVAsSUFBSSxZQUFZO2dCQUFFLENBQUMsR0FBRyxZQUFZLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUN6Qyw0REFBVSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsdURBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNwRixDQUFDLElBQUksQ0FBQyxDQUFDO1lBRVAsSUFBSSxZQUFZO2dCQUFFLENBQUMsR0FBRyxZQUFZLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUN6Qyw0REFBVSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsdURBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNwRixDQUFDLElBQUksQ0FBQyxDQUFDO1lBRVAsSUFBSSxZQUFZO2dCQUFFLENBQUMsR0FBRyxZQUFZLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUN6Qyw0REFBVSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsdURBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN4RixDQUFDLElBQUksQ0FBQyxDQUFDO1lBRVAsSUFBSSxDQUFDLFNBQVMsSUFBSSxNQUFNLENBQUM7U0FDNUI7SUFDTCxDQUFDO0lBRU8sYUFBYSxDQUFDLEdBQTZCLEVBQUUsT0FBaUIsRUFBRSxZQUE2QjtRQUNqRyxHQUFHLENBQUMsSUFBSSxHQUFHLGlCQUFpQixDQUFDO1FBRTdCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUVsQixHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFWCxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDVixJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDWCxLQUFLLE1BQU0sTUFBTSxJQUFJLE9BQU8sRUFBRTtZQUUxQixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDWCxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO1lBRXZCLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDNUIsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUU1QixHQUFHLENBQUMsU0FBUyxHQUFHLFdBQVcsQ0FBQyxXQUFXLENBQUM7WUFDeEMsSUFBSSxZQUFZO2dCQUFFLENBQUMsR0FBRyxZQUFZLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUN6Qyw0REFBVSxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsdURBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUM3RixDQUFDLElBQUksQ0FBQyxDQUFDO1lBRVAsSUFBSSxZQUFZO2dCQUFFLENBQUMsR0FBRyxZQUFZLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUN6Qyw0REFBVSxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsdURBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUM5RixDQUFDLElBQUksQ0FBQyxDQUFDO1lBRVAsSUFBSSxZQUFZO2dCQUFFLENBQUMsR0FBRyxZQUFZLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUN6Qyw0REFBVSxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsdURBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUM3RixDQUFDLElBQUksQ0FBQyxDQUFDO1lBRVAsSUFBSSxZQUFZO2dCQUFFLENBQUMsR0FBRyxZQUFZLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUN6Qyw0REFBVSxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsdURBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUM1RixDQUFDLElBQUksQ0FBQyxDQUFDO1lBRVAsSUFBSSxZQUFZO2dCQUFFLENBQUMsR0FBRyxZQUFZLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUN6Qyw0REFBVSxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsdURBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUMzRixDQUFDLElBQUksQ0FBQyxDQUFDO1lBRVAsSUFBSSxZQUFZO2dCQUFFLENBQUMsR0FBRyxZQUFZLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUN6Qyw0REFBVSxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsdURBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUMvRixDQUFDLElBQUksQ0FBQyxDQUFDO1lBRVAsSUFBSSxZQUFZO2dCQUFFLENBQUMsR0FBRyxZQUFZLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUN6QyxJQUFJLE1BQU0sQ0FBQyxVQUFVLEVBQUU7Z0JBQ25CLElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQyxDQUFDO2dCQUNwQixJQUFJLENBQUMsU0FBUyxHQUFHLGlFQUFlLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxD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QUcsWUFBWSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDekMsNERBQVUsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLHVEQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDaEcsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUVQLElBQUksWUFBWTtnQkFBRSxDQUFDLEdBQUcsWUFBWSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDekMsNERBQVUsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLHVEQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDOUYsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUVQLElBQUksWUFBWTtnQkFBRSxDQUFDLEdBQUcsWUFBWSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDekMsNERBQVUsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLHVEQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDaEcsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUVQLElBQUksWUFBWTtnQkFBRSxDQUFDLEdBQUcsWUFBWSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDekMsNERBQVUsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLHVEQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDN0YsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUVQLElBQUksWUFBWTtnQkFBRSxDQUFDLEdB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R0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2xELEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzlDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxXQUFXLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzlDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDMUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ2hCLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUViLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNYLEdBQUcsQ0FBQyxTQUFTLEdBQUcsV0FBVyxDQUFDLFVBQVUsQ0FBQztRQUN2QyxHQUFHLENBQUMsd0JBQXdCLEdBQUcsa0JBQWtCLENBQUM7UUFDbEQsR0FBRyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ2hCLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDMUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDOUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDLFVBQVUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDOUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ2xELEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFD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LDREQUFVLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSx1REFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzdGLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFUCxJQUFJLFlBQVk7Z0JBQUUsQ0FBQyxHQUFHLFlBQVksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ3pDLDREQUFVLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSx1REFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzlGLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFUCxJQUFJLFlBQVk7Z0JBQUUsQ0FBQyxHQUFHLFlBQVksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ3pDLDREQUFVLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSx1REFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ2hHLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFUCxJQUFJLFlBQVk7Z0JBQUUsQ0FBQyxHQUFHLFlBQVksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ3pDLDREQUFVLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSx1REFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ2pHLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFUCxJQUFJLFlBQVk7Z0JBQUUsQ0FBQyxHQUFHLFlBQVksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ3pD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QUVELE9BQU8sSUFBSSxDQUFDO0FBQ2hCLENBQUMiLCJmaWxlIjoicHJldHR5c2NyaWJlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJkaXN0XCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSBcIi4vc3JjL2FwcC50c1wiKTtcbiIsIid1c2Ugc3RyaWN0J1xuXG5leHBvcnRzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5leHBvcnRzLnRvQnl0ZUFycmF5ID0gdG9CeXRlQXJyYXlcbmV4cG9ydHMuZnJvbUJ5dGVBcnJheSA9IGZyb21CeXRlQXJyYXlcblxudmFyIGxvb2t1cCA9IFtdXG52YXIgcmV2TG9va3VwID0gW11cbnZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXlcblxudmFyIGNvZGUgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLydcbmZvciAodmFyIGkgPSAwLCBsZW4gPSBjb2RlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gIGxvb2t1cFtpXSA9IGNvZGVbaV1cbiAgcmV2TG9va3VwW2NvZGUuY2hhckNvZGVBdChpKV0gPSBpXG59XG5cbi8vIFN1cHBvcnQgZGVjb2RpbmcgVVJMLXNhZmUgYmFzZTY0IHN0cmluZ3MsIGFzIE5vZGUuanMgZG9lcy5cbi8vIFNlZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmFzZTY0I1VSTF9hcHBsaWNhdGlvbnNcbnJldkxvb2t1cFsnLScuY2hhckNvZGVBdCgwKV0gPSA2MlxucmV2TG9va3VwWydfJy5jaGFyQ29kZUF0KDApXSA9IDYzXG5cbmZ1bmN0aW9uIGdldExlbnMgKGI2NCkge1xuICB2YXIgbGVuID0gYjY0Lmxlbmd0aFxuXG4gIGlmIChsZW4gJSA0ID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCcpXG4gIH1cblxuICAvLyBUcmltIG9mZiBleHRyYSBieXRlcyBhZnRlciBwbGFjZWhvbGRlciBieXRlcyBhcmUgZm91bmRcbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vYmVhdGdhbW1pdC9iYXNlNjQtanMvaXNzdWVzLzQyXG4gIHZhciB2YWxpZExlbiA9IGI2NC5pbmRleE9mKCc9JylcbiAgaWYgKHZhbGlkTGVuID09PSAtMSkgdmFsaWRMZW4gPSBsZW5cblxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gdmFsaWRMZW4gPT09IGxlblxuICAgID8gMFxuICAgIDogNCAtICh2YWxpZExlbiAlIDQpXG5cbiAgcmV0dXJuIFt2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuXVxufVxuXG4vLyBiYXNlNjQgaXMgNC8zICsgdXAgdG8gdHdvIGNoYXJhY3RlcnMgb2YgdGhlIG9yaWdpbmFsIGRhdGFcbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKGI2NCkge1xuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiBfYnl0ZUxlbmd0aCAoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSB7XG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiB0b0J5dGVBcnJheSAoYjY0KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuXG4gIHZhciBhcnIgPSBuZXcgQXJyKF9ieXRlTGVuZ3RoKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikpXG5cbiAgdmFyIGN1ckJ5dGUgPSAwXG5cbiAgLy8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFyc1xuICB2YXIgbGVuID0gcGxhY2VIb2xkZXJzTGVuID4gMFxuICAgID8gdmFsaWRMZW4gLSA0XG4gICAgOiB2YWxpZExlblxuXG4gIHZhciBpXG4gIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxOCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDEyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPDwgNikgfFxuICAgICAgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAzKV1cbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gMTYpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDIpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldID4+IDQpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAxKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDEwKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgNCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildID4+IDIpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuICByZXR1cm4gbG9va3VwW251bSA+PiAxOCAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDEyICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtICYgMHgzRl1cbn1cblxuZnVuY3Rpb24gZW5jb2RlQ2h1bmsgKHVpbnQ4LCBzdGFydCwgZW5kKSB7XG4gIHZhciB0bXBcbiAgdmFyIG91dHB1dCA9IFtdXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSAzKSB7XG4gICAgdG1wID1cbiAgICAgICgodWludDhbaV0gPDwgMTYpICYgMHhGRjAwMDApICtcbiAgICAgICgodWludDhbaSArIDFdIDw8IDgpICYgMHhGRjAwKSArXG4gICAgICAodWludDhbaSArIDJdICYgMHhGRilcbiAgICBvdXRwdXQucHVzaCh0cmlwbGV0VG9CYXNlNjQodG1wKSlcbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGZyb21CeXRlQXJyYXkgKHVpbnQ4KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbiA9IHVpbnQ4Lmxlbmd0aFxuICB2YXIgZXh0cmFCeXRlcyA9IGxlbiAlIDMgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcbiAgdmFyIHBhcnRzID0gW11cbiAgdmFyIG1heENodW5rTGVuZ3RoID0gMTYzODMgLy8gbXVzdCBiZSBtdWx0aXBsZSBvZiAzXG5cbiAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuICBmb3IgKHZhciBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IG1heENodW5rTGVuZ3RoKSB7XG4gICAgcGFydHMucHVzaChlbmNvZGVDaHVuayhcbiAgICAgIHVpbnQ4LCBpLCAoaSArIG1heENodW5rTGVuZ3RoKSA+IGxlbjIgPyBsZW4yIDogKGkgKyBtYXhDaHVua0xlbmd0aClcbiAgICApKVxuICB9XG5cbiAgLy8gcGFkIHRoZSBlbmQgd2l0aCB6ZXJvcywgYnV0IG1ha2Ugc3VyZSB0byBub3QgZm9yZ2V0IHRoZSBleHRyYSBieXRlc1xuICBpZiAoZXh0cmFCeXRlcyA9PT0gMSkge1xuICAgIHRtcCA9IHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgNCkgJiAweDNGXSArXG4gICAgICAnPT0nXG4gICAgKVxuICB9IGVsc2UgaWYgKGV4dHJhQnl0ZXMgPT09IDIpIHtcbiAgICB0bXAgPSAodWludDhbbGVuIC0gMl0gPDwgOCkgKyB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDEwXSArXG4gICAgICBsb29rdXBbKHRtcCA+PiA0KSAmIDB4M0ZdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDIpICYgMHgzRl0gK1xuICAgICAgJz0nXG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIHBhcnRzLmpvaW4oJycpXG59XG4iLCIvKiFcbiAqIFRoZSBidWZmZXIgbW9kdWxlIGZyb20gbm9kZS5qcywgZm9yIHRoZSBicm93c2VyLlxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbnZhciBiYXNlNjQgPSByZXF1aXJlKCdiYXNlNjQtanMnKVxudmFyIGllZWU3NTQgPSByZXF1aXJlKCdpZWVlNzU0JylcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbmV4cG9ydHMuQnVmZmVyID0gQnVmZmVyXG5leHBvcnRzLlNsb3dCdWZmZXIgPSBTbG93QnVmZmVyXG5leHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTID0gNTBcblxuLyoqXG4gKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgVXNlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNilcbiAqXG4gKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssIENocm9tZSA3KywgU2FmYXJpIDUuMSssXG4gKiBPcGVyYSAxMS42KywgaU9TIDQuMisuXG4gKlxuICogRHVlIHRvIHZhcmlvdXMgYnJvd3NlciBidWdzLCBzb21ldGltZXMgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiB3aWxsIGJlIHVzZWQgZXZlblxuICogd2hlbiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0eXBlZCBhcnJheXMuXG4gKlxuICogTm90ZTpcbiAqXG4gKiAgIC0gRmlyZWZveCA0LTI5IGxhY2tzIHN1cHBvcnQgZm9yIGFkZGluZyBuZXcgcHJvcGVydGllcyB0byBgVWludDhBcnJheWAgaW5zdGFuY2VzLFxuICogICAgIFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4LlxuICpcbiAqICAgLSBDaHJvbWUgOS0xMCBpcyBtaXNzaW5nIHRoZSBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uLlxuICpcbiAqICAgLSBJRTEwIGhhcyBhIGJyb2tlbiBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYXJyYXlzIG9mXG4gKiAgICAgaW5jb3JyZWN0IGxlbmd0aCBpbiBzb21lIHNpdHVhdGlvbnMuXG5cbiAqIFdlIGRldGVjdCB0aGVzZSBidWdneSBicm93c2VycyBhbmQgc2V0IGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGAgdG8gYGZhbHNlYCBzbyB0aGV5XG4gKiBnZXQgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggaXMgc2xvd2VyIGJ1dCBiZWhhdmVzIGNvcnJlY3RseS5cbiAqL1xuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVCAhPT0gdW5kZWZpbmVkXG4gID8gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgOiB0eXBlZEFycmF5U3VwcG9ydCgpXG5cbi8qXG4gKiBFeHBvcnQga01heExlbmd0aCBhZnRlciB0eXBlZCBhcnJheSBzdXBwb3J0IGlzIGRldGVybWluZWQuXG4gKi9cbmV4cG9ydHMua01heExlbmd0aCA9IGtNYXhMZW5ndGgoKVxuXG5mdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KDEpXG4gICAgYXJyLl9fcHJvdG9fXyA9IHtfX3Byb3RvX186IFVpbnQ4QXJyYXkucHJvdG90eXBlLCBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH19XG4gICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDIgJiYgLy8gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWRcbiAgICAgICAgdHlwZW9mIGFyci5zdWJhcnJheSA9PT0gJ2Z1bmN0aW9uJyAmJiAvLyBjaHJvbWUgOS0xMCBsYWNrIGBzdWJhcnJheWBcbiAgICAgICAgYXJyLnN1YmFycmF5KDEsIDEpLmJ5dGVMZW5ndGggPT09IDAgLy8gaWUxMCBoYXMgYnJva2VuIGBzdWJhcnJheWBcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmZ1bmN0aW9uIGtNYXhMZW5ndGggKCkge1xuICByZXR1cm4gQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgICA/IDB4N2ZmZmZmZmZcbiAgICA6IDB4M2ZmZmZmZmZcbn1cblxuZnVuY3Rpb24gY3JlYXRlQnVmZmVyICh0aGF0LCBsZW5ndGgpIHtcbiAgaWYgKGtNYXhMZW5ndGgoKSA8IGxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHR5cGVkIGFycmF5IGxlbmd0aCcpXG4gIH1cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgaWYgKHRoYXQgPT09IG51bGwpIHtcbiAgICAgIHRoYXQgPSBuZXcgQnVmZmVyKGxlbmd0aClcbiAgICB9XG4gICAgdGhhdC5sZW5ndGggPSBsZW5ndGhcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogVGhlIEJ1ZmZlciBjb25zdHJ1Y3RvciByZXR1cm5zIGluc3RhbmNlcyBvZiBgVWludDhBcnJheWAgdGhhdCBoYXZlIHRoZWlyXG4gKiBwcm90b3R5cGUgY2hhbmdlZCB0byBgQnVmZmVyLnByb3RvdHlwZWAuIEZ1cnRoZXJtb3JlLCBgQnVmZmVyYCBpcyBhIHN1YmNsYXNzIG9mXG4gKiBgVWludDhBcnJheWAsIHNvIHRoZSByZXR1cm5lZCBpbnN0YW5jZXMgd2lsbCBoYXZlIGFsbCB0aGUgbm9kZSBgQnVmZmVyYCBtZXRob2RzXG4gKiBhbmQgdGhlIGBVaW50OEFycmF5YCBtZXRob2RzLiBTcXVhcmUgYnJhY2tldCBub3RhdGlvbiB3b3JrcyBhcyBleHBlY3RlZCAtLSBpdFxuICogcmV0dXJucyBhIHNpbmdsZSBvY3RldC5cbiAqXG4gKiBUaGUgYFVpbnQ4QXJyYXlgIHByb3RvdHlwZSByZW1haW5zIHVubW9kaWZpZWQuXG4gKi9cblxuZnVuY3Rpb24gQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmICEodGhpcyBpbnN0YW5jZW9mIEJ1ZmZlcikpIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIC8vIENvbW1vbiBjYXNlLlxuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nT3JPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdJZiBlbmNvZGluZyBpcyBzcGVjaWZpZWQgdGhlbiB0aGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZydcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIGFsbG9jVW5zYWZlKHRoaXMsIGFyZylcbiAgfVxuICByZXR1cm4gZnJvbSh0aGlzLCBhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbi8vIFRPRE86IExlZ2FjeSwgbm90IG5lZWRlZCBhbnltb3JlLiBSZW1vdmUgaW4gbmV4dCBtYWpvciB2ZXJzaW9uLlxuQnVmZmVyLl9hdWdtZW50ID0gZnVuY3Rpb24gKGFycikge1xuICBhcnIuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIGZyb20gKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpXG4gIH1cblxuICByZXR1cm4gZnJvbU9iamVjdCh0aGF0LCB2YWx1ZSlcbn1cblxuLyoqXG4gKiBGdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB0byBCdWZmZXIoYXJnLCBlbmNvZGluZykgYnV0IHRocm93cyBhIFR5cGVFcnJvclxuICogaWYgdmFsdWUgaXMgYSBudW1iZXIuXG4gKiBCdWZmZXIuZnJvbShzdHJbLCBlbmNvZGluZ10pXG4gKiBCdWZmZXIuZnJvbShhcnJheSlcbiAqIEJ1ZmZlci5mcm9tKGJ1ZmZlcilcbiAqIEJ1ZmZlci5mcm9tKGFycmF5QnVmZmVyWywgYnl0ZU9mZnNldFssIGxlbmd0aF1dKVxuICoqL1xuQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gZnJvbShudWxsLCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5pZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgQnVmZmVyLnByb3RvdHlwZS5fX3Byb3RvX18gPSBVaW50OEFycmF5LnByb3RvdHlwZVxuICBCdWZmZXIuX19wcm90b19fID0gVWludDhBcnJheVxuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnNwZWNpZXMgJiZcbiAgICAgIEJ1ZmZlcltTeW1ib2wuc3BlY2llc10gPT09IEJ1ZmZlcikge1xuICAgIC8vIEZpeCBzdWJhcnJheSgpIGluIEVTMjAxNi4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9wdWxsLzk3XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlciwgU3ltYm9sLnNwZWNpZXMsIHtcbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRTaXplIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfSBlbHNlIGlmIChzaXplIDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBuZWdhdGl2ZScpXG4gIH1cbn1cblxuZnVuY3Rpb24gYWxsb2MgKHRoYXQsIHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgaWYgKHNpemUgPD0gMCkge1xuICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbiAgfVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT25seSBwYXkgYXR0ZW50aW9uIHRvIGVuY29kaW5nIGlmIGl0J3MgYSBzdHJpbmcuIFRoaXNcbiAgICAvLyBwcmV2ZW50cyBhY2NpZGVudGFsbHkgc2VuZGluZyBpbiBhIG51bWJlciB0aGF0IHdvdWxkXG4gICAgLy8gYmUgaW50ZXJwcmV0dGVkIGFzIGEgc3RhcnQgb2Zmc2V0LlxuICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnXG4gICAgICA/IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgICAgOiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsKVxuICB9XG4gIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiBhbGxvYyhzaXplWywgZmlsbFssIGVuY29kaW5nXV0pXG4gKiovXG5CdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGFsbG9jKG51bGwsIHNpemUsIGZpbGwsIGVuY29kaW5nKVxufVxuXG5mdW5jdGlvbiBhbGxvY1Vuc2FmZSAodGhhdCwgc2l6ZSkge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7ICsraSkge1xuICAgICAgdGhhdFtpXSA9IDBcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIEJ1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIFNsb3dCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nICh0aGF0LCBzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gIH1cblxuICBpZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZW5jb2RpbmdcIiBtdXN0IGJlIGEgdmFsaWQgc3RyaW5nIGVuY29kaW5nJylcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcblxuICB2YXIgYWN0dWFsID0gdGhhdC53cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuXG4gIGlmIChhY3R1YWwgIT09IGxlbmd0aCkge1xuICAgIC8vIFdyaXRpbmcgYSBoZXggc3RyaW5nLCBmb3IgZXhhbXBsZSwgdGhhdCBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgd2lsbFxuICAgIC8vIGNhdXNlIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIGZpcnN0IGludmFsaWQgY2hhcmFjdGVyIHRvIGJlIGlnbm9yZWQuIChlLmcuXG4gICAgLy8gJ2FieHhjZCcgd2lsbCBiZSB0cmVhdGVkIGFzICdhYicpXG4gICAgdGhhdCA9IHRoYXQuc2xpY2UoMCwgYWN0dWFsKVxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5TGlrZSAodGhhdCwgYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCA8IDAgPyAwIDogY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoYXRbaV0gPSBhcnJheVtpXSAmIDI1NVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAodGhhdCwgYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBhcnJheS5ieXRlTGVuZ3RoIC8vIHRoaXMgdGhyb3dzIGlmIGBhcnJheWAgaXMgbm90IGEgdmFsaWQgQXJyYXlCdWZmZXJcblxuICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnb2Zmc2V0XFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdsZW5ndGhcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYnl0ZU9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSlcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQpXG4gIH0gZWxzZSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IGFycmF5XG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIHRoYXQgPSBmcm9tQXJyYXlMaWtlKHRoYXQsIGFycmF5KVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21PYmplY3QgKHRoYXQsIG9iaikge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iaikpIHtcbiAgICB2YXIgbGVuID0gY2hlY2tlZChvYmoubGVuZ3RoKSB8IDBcbiAgICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbilcblxuICAgIGlmICh0aGF0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoYXRcbiAgICB9XG5cbiAgICBvYmouY29weSh0aGF0LCAwLCAwLCBsZW4pXG4gICAgcmV0dXJuIHRoYXRcbiAgfVxuXG4gIGlmIChvYmopIHtcbiAgICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgb2JqLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB8fCAnbGVuZ3RoJyBpbiBvYmopIHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqLmxlbmd0aCAhPT0gJ251bWJlcicgfHwgaXNuYW4ob2JqLmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCAwKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqKVxuICAgIH1cblxuICAgIGlmIChvYmoudHlwZSA9PT0gJ0J1ZmZlcicgJiYgaXNBcnJheShvYmouZGF0YSkpIHtcbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iai5kYXRhKVxuICAgIH1cbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCBvciBhcnJheS1saWtlIG9iamVjdC4nKVxufVxuXG5mdW5jdGlvbiBjaGVja2VkIChsZW5ndGgpIHtcbiAgLy8gTm90ZTogY2Fubm90IHVzZSBgbGVuZ3RoIDwga01heExlbmd0aCgpYCBoZXJlIGJlY2F1c2UgdGhhdCBmYWlscyB3aGVuXG4gIC8vIGxlbmd0aCBpcyBOYU4gKHdoaWNoIGlzIG90aGVyd2lzZSBjb2VyY2VkIHRvIHplcm8uKVxuICBpZiAobGVuZ3RoID49IGtNYXhMZW5ndGgoKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICdzaXplOiAweCcgKyBrTWF4TGVuZ3RoKCkudG9TdHJpbmcoMTYpICsgJyBieXRlcycpXG4gIH1cbiAgcmV0dXJuIGxlbmd0aCB8IDBcbn1cblxuZnVuY3Rpb24gU2xvd0J1ZmZlciAobGVuZ3RoKSB7XG4gIGlmICgrbGVuZ3RoICE9IGxlbmd0aCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgIGxlbmd0aCA9IDBcbiAgfVxuICByZXR1cm4gQnVmZmVyLmFsbG9jKCtsZW5ndGgpXG59XG5cbkJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyIChiKSB7XG4gIHJldHVybiAhIShiICE9IG51bGwgJiYgYi5faXNCdWZmZXIpXG59XG5cbkJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAoYSwgYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihhKSB8fCAhQnVmZmVyLmlzQnVmZmVyKGIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIG11c3QgYmUgQnVmZmVycycpXG4gIH1cblxuICBpZiAoYSA9PT0gYikgcmV0dXJuIDBcblxuICB2YXIgeCA9IGEubGVuZ3RoXG4gIHZhciB5ID0gYi5sZW5ndGhcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gTWF0aC5taW4oeCwgeSk7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICB4ID0gYVtpXVxuICAgICAgeSA9IGJbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG5CdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIGlzRW5jb2RpbmcgKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0IChsaXN0LCBsZW5ndGgpIHtcbiAgaWYgKCFpc0FycmF5KGxpc3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMClcbiAgfVxuXG4gIHZhciBpXG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGxlbmd0aCA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgbGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW5ndGgpXG4gIHZhciBwb3MgPSAwXG4gIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGJ1ZiA9IGxpc3RbaV1cbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICAgIH1cbiAgICBidWYuY29weShidWZmZXIsIHBvcylcbiAgICBwb3MgKz0gYnVmLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBzdHJpbmcgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpIHtcbiAgICByZXR1cm4gc3RyaW5nLmJ5dGVMZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICBzdHJpbmcgPSAnJyArIHN0cmluZ1xuICB9XG5cbiAgdmFyIGxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKGxlbiA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBVc2UgYSBmb3IgbG9vcCB0byBhdm9pZCByZWN1cnNpb25cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGVuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiBsZW4gKiAyXG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gbGVuID4+PiAxXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGggLy8gYXNzdW1lIHV0ZjhcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cbkJ1ZmZlci5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuXG5mdW5jdGlvbiBzbG93VG9TdHJpbmcgKGVuY29kaW5nLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG5cbiAgLy8gTm8gbmVlZCB0byB2ZXJpZnkgdGhhdCBcInRoaXMubGVuZ3RoIDw9IE1BWF9VSU5UMzJcIiBzaW5jZSBpdCdzIGEgcmVhZC1vbmx5XG4gIC8vIHByb3BlcnR5IG9mIGEgdHlwZWQgYXJyYXkuXG5cbiAgLy8gVGhpcyBiZWhhdmVzIG5laXRoZXIgbGlrZSBTdHJpbmcgbm9yIFVpbnQ4QXJyYXkgaW4gdGhhdCB3ZSBzZXQgc3RhcnQvZW5kXG4gIC8vIHRvIHRoZWlyIHVwcGVyL2xvd2VyIGJvdW5kcyBpZiB0aGUgdmFsdWUgcGFzc2VkIGlzIG91dCBvZiByYW5nZS5cbiAgLy8gdW5kZWZpbmVkIGlzIGhhbmRsZWQgc3BlY2lhbGx5IGFzIHBlciBFQ01BLTI2MiA2dGggRWRpdGlvbixcbiAgLy8gU2VjdGlvbiAxMy4zLjMuNyBSdW50aW1lIFNlbWFudGljczogS2V5ZWRCaW5kaW5nSW5pdGlhbGl6YXRpb24uXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkIHx8IHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIC8vIFJldHVybiBlYXJseSBpZiBzdGFydCA+IHRoaXMubGVuZ3RoLiBEb25lIGhlcmUgdG8gcHJldmVudCBwb3RlbnRpYWwgdWludDMyXG4gIC8vIGNvZXJjaW9uIGZhaWwgYmVsb3cuXG4gIGlmIChzdGFydCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKGVuZCA8PSAwKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICAvLyBGb3JjZSBjb2Vyc2lvbiB0byB1aW50MzIuIFRoaXMgd2lsbCBhbHNvIGNvZXJjZSBmYWxzZXkvTmFOIHZhbHVlcyB0byAwLlxuICBlbmQgPj4+PSAwXG4gIHN0YXJ0ID4+Pj0gMFxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9IChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG4vLyBUaGUgcHJvcGVydHkgaXMgdXNlZCBieSBgQnVmZmVyLmlzQnVmZmVyYCBhbmQgYGlzLWJ1ZmZlcmAgKGluIFNhZmFyaSA1LTcpIHRvIGRldGVjdFxuLy8gQnVmZmVyIGluc3RhbmNlcy5cbkJ1ZmZlci5wcm90b3R5cGUuX2lzQnVmZmVyID0gdHJ1ZVxuXG5mdW5jdGlvbiBzd2FwIChiLCBuLCBtKSB7XG4gIHZhciBpID0gYltuXVxuICBiW25dID0gYlttXVxuICBiW21dID0gaVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAxNiA9IGZ1bmN0aW9uIHN3YXAxNiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgMiAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDEpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMzIgPSBmdW5jdGlvbiBzd2FwMzIgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDQgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAzKVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyAyKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDY0ID0gZnVuY3Rpb24gc3dhcDY0ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA4ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA2NC1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA4KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgNylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgNilcbiAgICBzd2FwKHRoaXMsIGkgKyAyLCBpICsgNSlcbiAgICBzd2FwKHRoaXMsIGkgKyAzLCBpICsgNClcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGggfCAwXG4gIGlmIChsZW5ndGggPT09IDApIHJldHVybiAnJ1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCAwLCBsZW5ndGgpXG4gIHJldHVybiBzbG93VG9TdHJpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyAoYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIGlmICh0aGlzID09PSBiKSByZXR1cm4gdHJ1ZVxuICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYikgPT09IDBcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gIHZhciBzdHIgPSAnJ1xuICB2YXIgbWF4ID0gZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFU1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgc3RyID0gdGhpcy50b1N0cmluZygnaGV4JywgMCwgbWF4KS5tYXRjaCgvLnsyfS9nKS5qb2luKCcgJylcbiAgICBpZiAodGhpcy5sZW5ndGggPiBtYXgpIHN0ciArPSAnIC4uLiAnXG4gIH1cbiAgcmV0dXJuICc8QnVmZmVyICcgKyBzdHIgKyAnPidcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAodGFyZ2V0LCBzdGFydCwgZW5kLCB0aGlzU3RhcnQsIHRoaXNFbmQpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICB9XG5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmQgPSB0YXJnZXQgPyB0YXJnZXQubGVuZ3RoIDogMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNTdGFydCA9IDBcbiAgfVxuICBpZiAodGhpc0VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc0VuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoc3RhcnQgPCAwIHx8IGVuZCA+IHRhcmdldC5sZW5ndGggfHwgdGhpc1N0YXJ0IDwgMCB8fCB0aGlzRW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCAmJiBzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCkge1xuICAgIHJldHVybiAtMVxuICB9XG4gIGlmIChzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMVxuICB9XG5cbiAgc3RhcnQgPj4+PSAwXG4gIGVuZCA+Pj49IDBcbiAgdGhpc1N0YXJ0ID4+Pj0gMFxuICB0aGlzRW5kID4+Pj0gMFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQpIHJldHVybiAwXG5cbiAgdmFyIHggPSB0aGlzRW5kIC0gdGhpc1N0YXJ0XG4gIHZhciB5ID0gZW5kIC0gc3RhcnRcbiAgdmFyIGxlbiA9IE1hdGgubWluKHgsIHkpXG5cbiAgdmFyIHRoaXNDb3B5ID0gdGhpcy5zbGljZSh0aGlzU3RhcnQsIHRoaXNFbmQpXG4gIHZhciB0YXJnZXRDb3B5ID0gdGFyZ2V0LnNsaWNlKHN0YXJ0LCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIGlmICh0aGlzQ29weVtpXSAhPT0gdGFyZ2V0Q29weVtpXSkge1xuICAgICAgeCA9IHRoaXNDb3B5W2ldXG4gICAgICB5ID0gdGFyZ2V0Q29weVtpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbi8vIEZpbmRzIGVpdGhlciB0aGUgZmlyc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0ID49IGBieXRlT2Zmc2V0YCxcbi8vIE9SIHRoZSBsYXN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA8PSBgYnl0ZU9mZnNldGAuXG4vL1xuLy8gQXJndW1lbnRzOlxuLy8gLSBidWZmZXIgLSBhIEJ1ZmZlciB0byBzZWFyY2hcbi8vIC0gdmFsIC0gYSBzdHJpbmcsIEJ1ZmZlciwgb3IgbnVtYmVyXG4vLyAtIGJ5dGVPZmZzZXQgLSBhbiBpbmRleCBpbnRvIGBidWZmZXJgOyB3aWxsIGJlIGNsYW1wZWQgdG8gYW4gaW50MzJcbi8vIC0gZW5jb2RpbmcgLSBhbiBvcHRpb25hbCBlbmNvZGluZywgcmVsZXZhbnQgaXMgdmFsIGlzIGEgc3RyaW5nXG4vLyAtIGRpciAtIHRydWUgZm9yIGluZGV4T2YsIGZhbHNlIGZvciBsYXN0SW5kZXhPZlxuZnVuY3Rpb24gYmlkaXJlY3Rpb25hbEluZGV4T2YgKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIC8vIEVtcHR5IGJ1ZmZlciBtZWFucyBubyBtYXRjaFxuICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xXG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXRcbiAgaWYgKHR5cGVvZiBieXRlT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gYnl0ZU9mZnNldFxuICAgIGJ5dGVPZmZzZXQgPSAwXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA+IDB4N2ZmZmZmZmYpIHtcbiAgICBieXRlT2Zmc2V0ID0gMHg3ZmZmZmZmZlxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAtMHg4MDAwMDAwMCkge1xuICAgIGJ5dGVPZmZzZXQgPSAtMHg4MDAwMDAwMFxuICB9XG4gIGJ5dGVPZmZzZXQgPSArYnl0ZU9mZnNldCAgLy8gQ29lcmNlIHRvIE51bWJlci5cbiAgaWYgKGlzTmFOKGJ5dGVPZmZzZXQpKSB7XG4gICAgLy8gYnl0ZU9mZnNldDogaXQgaXQncyB1bmRlZmluZWQsIG51bGwsIE5hTiwgXCJmb29cIiwgZXRjLCBzZWFyY2ggd2hvbGUgYnVmZmVyXG4gICAgYnl0ZU9mZnNldCA9IGRpciA/IDAgOiAoYnVmZmVyLmxlbmd0aCAtIDEpXG4gIH1cblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldDogbmVnYXRpdmUgb2Zmc2V0cyBzdGFydCBmcm9tIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlclxuICBpZiAoYnl0ZU9mZnNldCA8IDApIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoICsgYnl0ZU9mZnNldFxuICBpZiAoYnl0ZU9mZnNldCA+PSBidWZmZXIubGVuZ3RoKSB7XG4gICAgaWYgKGRpcikgcmV0dXJuIC0xXG4gICAgZWxzZSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCAtIDFcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgMCkge1xuICAgIGlmIChkaXIpIGJ5dGVPZmZzZXQgPSAwXG4gICAgZWxzZSByZXR1cm4gLTFcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSB2YWxcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsID0gQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgfVxuXG4gIC8vIEZpbmFsbHksIHNlYXJjaCBlaXRoZXIgaW5kZXhPZiAoaWYgZGlyIGlzIHRydWUpIG9yIGxhc3RJbmRleE9mXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsKSkge1xuICAgIC8vIFNwZWNpYWwgY2FzZTogbG9va2luZyBmb3IgZW1wdHkgc3RyaW5nL2J1ZmZlciBhbHdheXMgZmFpbHNcbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAweEZGIC8vIFNlYXJjaCBmb3IgYSBieXRlIHZhbHVlIFswLTI1NV1cbiAgICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiZcbiAgICAgICAgdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgWyB2YWwgXSwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlcicpXG59XG5cbmZ1bmN0aW9uIGFycmF5SW5kZXhPZiAoYXJyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgdmFyIGluZGV4U2l6ZSA9IDFcbiAgdmFyIGFyckxlbmd0aCA9IGFyci5sZW5ndGhcbiAgdmFyIHZhbExlbmd0aCA9IHZhbC5sZW5ndGhcblxuICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgaWYgKGVuY29kaW5nID09PSAndWNzMicgfHwgZW5jb2RpbmcgPT09ICd1Y3MtMicgfHxcbiAgICAgICAgZW5jb2RpbmcgPT09ICd1dGYxNmxlJyB8fCBlbmNvZGluZyA9PT0gJ3V0Zi0xNmxlJykge1xuICAgICAgaWYgKGFyci5sZW5ndGggPCAyIHx8IHZhbC5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiAtMVxuICAgICAgfVxuICAgICAgaW5kZXhTaXplID0gMlxuICAgICAgYXJyTGVuZ3RoIC89IDJcbiAgICAgIHZhbExlbmd0aCAvPSAyXG4gICAgICBieXRlT2Zmc2V0IC89IDJcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFkIChidWYsIGkpIHtcbiAgICBpZiAoaW5kZXhTaXplID09PSAxKSB7XG4gICAgICByZXR1cm4gYnVmW2ldXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBidWYucmVhZFVJbnQxNkJFKGkgKiBpbmRleFNpemUpXG4gICAgfVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGRpcikge1xuICAgIHZhciBmb3VuZEluZGV4ID0gLTFcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpIDwgYXJyTGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChyZWFkKGFyciwgaSkgPT09IHJlYWQodmFsLCBmb3VuZEluZGV4ID09PSAtMSA/IDAgOiBpIC0gZm91bmRJbmRleCkpIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggPT09IC0xKSBmb3VuZEluZGV4ID0gaVxuICAgICAgICBpZiAoaSAtIGZvdW5kSW5kZXggKyAxID09PSB2YWxMZW5ndGgpIHJldHVybiBmb3VuZEluZGV4ICogaW5kZXhTaXplXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZm91bmRJbmRleCAhPT0gLTEpIGkgLT0gaSAtIGZvdW5kSW5kZXhcbiAgICAgICAgZm91bmRJbmRleCA9IC0xXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChieXRlT2Zmc2V0ICsgdmFsTGVuZ3RoID4gYXJyTGVuZ3RoKSBieXRlT2Zmc2V0ID0gYXJyTGVuZ3RoIC0gdmFsTGVuZ3RoXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBmb3VuZCA9IHRydWVcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKHJlYWQoYXJyLCBpICsgaikgIT09IHJlYWQodmFsLCBqKSkge1xuICAgICAgICAgIGZvdW5kID0gZmFsc2VcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZm91bmQpIHJldHVybiBpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5jbHVkZXMgPSBmdW5jdGlvbiBpbmNsdWRlcyAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gdGhpcy5pbmRleE9mKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpICE9PSAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCB0cnVlKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24gbGFzdEluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGZhbHNlKVxufVxuXG5mdW5jdGlvbiBoZXhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIG9mZnNldCA9IE51bWJlcihvZmZzZXQpIHx8IDBcbiAgdmFyIHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuXG4gIC8vIG11c3QgYmUgYW4gZXZlbiBudW1iZXIgb2YgZGlnaXRzXG4gIHZhciBzdHJMZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChzdHJMZW4gJSAyICE9PSAwKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGhleCBzdHJpbmcnKVxuXG4gIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7XG4gICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KVxuICAgIGlmIChpc05hTihwYXJzZWQpKSByZXR1cm4gaVxuICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZFxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIHV0ZjhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gbGF0aW4xV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGJhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiB1Y3MyV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7XG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcpXG4gIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBvZmZzZXRcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXVssIGVuY29kaW5nXSlcbiAgfSBlbHNlIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggfCAwXG4gICAgICBpZiAoZW5jb2RpbmcgPT09IHVuZGVmaW5lZCkgZW5jb2RpbmcgPSAndXRmOCdcbiAgICB9IGVsc2Uge1xuICAgICAgZW5jb2RpbmcgPSBsZW5ndGhcbiAgICAgIGxlbmd0aCA9IHVuZGVmaW5lZFxuICAgIH1cbiAgLy8gbGVnYWN5IHdyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldCwgbGVuZ3RoKSAtIHJlbW92ZSBpbiB2MC4xM1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcbiAgICApXG4gIH1cblxuICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aCA+IHJlbWFpbmluZykgbGVuZ3RoID0gcmVtYWluaW5nXG5cbiAgaWYgKChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICAvLyBXYXJuaW5nOiBtYXhMZW5ndGggbm90IHRha2VuIGludG8gYWNjb3VudCBpbiBiYXNlNjRXcml0ZVxuICAgICAgICByZXR1cm4gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHVjczJXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCdWZmZXInLFxuICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG4gIHZhciByZXMgPSBbXVxuXG4gIHZhciBpID0gc3RhcnRcbiAgd2hpbGUgKGkgPCBlbmQpIHtcbiAgICB2YXIgZmlyc3RCeXRlID0gYnVmW2ldXG4gICAgdmFyIGNvZGVQb2ludCA9IG51bGxcbiAgICB2YXIgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKSA/IDRcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4REYpID8gM1xuICAgICAgOiAoZmlyc3RCeXRlID4gMHhCRikgPyAyXG4gICAgICA6IDFcblxuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIHZhciBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnRcblxuICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xuICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3Rikge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcbiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGVcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxuICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDFcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcbiAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApXG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxuICAgIH1cblxuICAgIHJlcy5wdXNoKGNvZGVQb2ludClcbiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2VcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbnZhciBNQVhfQVJHVU1FTlRTX0xFTkdUSCA9IDB4MTAwMFxuXG5mdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkgKGNvZGVQb2ludHMpIHtcbiAgdmFyIGxlbiA9IGNvZGVQb2ludHMubGVuZ3RoXG4gIGlmIChsZW4gPD0gTUFYX0FSR1VNRU5UU19MRU5HVEgpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpIC8vIGF2b2lkIGV4dHJhIHNsaWNlKClcbiAgfVxuXG4gIC8vIERlY29kZSBpbiBjaHVua3MgdG8gYXZvaWQgXCJjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIi5cbiAgdmFyIHJlcyA9ICcnXG4gIHZhciBpID0gMFxuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFxuICAgICAgU3RyaW5nLFxuICAgICAgY29kZVBvaW50cy5zbGljZShpLCBpICs9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKVxuICAgIClcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldICYgMHg3RilcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGxhdGluMVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGhleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICB2YXIgb3V0ID0gJydcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBvdXQgKz0gdG9IZXgoYnVmW2ldKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGJ5dGVzID0gYnVmLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHZhciByZXMgPSAnJ1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyBieXRlc1tpICsgMV0gKiAyNTYpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIHN0YXJ0ID0gfn5zdGFydFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IH5+ZW5kXG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ICs9IGxlblxuICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMFxuICB9IGVsc2UgaWYgKHN0YXJ0ID4gbGVuKSB7XG4gICAgc3RhcnQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlblxuICAgIGlmIChlbmQgPCAwKSBlbmQgPSAwXG4gIH0gZWxzZSBpZiAoZW5kID4gbGVuKSB7XG4gICAgZW5kID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgdmFyIG5ld0J1ZlxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gICAgbmV3QnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xpY2VMZW4gPSBlbmQgLSBzdGFydFxuICAgIG5ld0J1ZiA9IG5ldyBCdWZmZXIoc2xpY2VMZW4sIHVuZGVmaW5lZClcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWNlTGVuOyArK2kpIHtcbiAgICAgIG5ld0J1ZltpXSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdCdWZcbn1cblxuLypcbiAqIE5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYnVmZmVyIGlzbid0IHRyeWluZyB0byB3cml0ZSBvdXQgb2YgYm91bmRzLlxuICovXG5mdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuICBpZiAoKG9mZnNldCAlIDEpICE9PSAwIHx8IG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgbm90IHVpbnQnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRCRSA9IGZ1bmN0aW9uIHJlYWRVSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG4gIH1cblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXG4gIHZhciBtdWwgPSAxXG4gIHdoaWxlIChieXRlTGVuZ3RoID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2QkUgPSBmdW5jdGlvbiByZWFkVUludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikpICtcbiAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdICogMHgxMDAwMDAwKSArXG4gICAgKCh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgIHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoXG4gIHZhciBtdWwgPSAxXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0taV1cbiAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICBpZiAoISh0aGlzW29mZnNldF0gJiAweDgwKSkgcmV0dXJuICh0aGlzW29mZnNldF0pXG4gIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdKSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10gPDwgMjQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyQkUgPSBmdW5jdGlvbiByZWFkSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJylcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uIHdyaXRlVUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQxNiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCAyKTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSAmICgweGZmIDw8ICg4ICogKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkpKSkgPj4+XG4gICAgICAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSAqIDhcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQzMiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgNCk7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgPj4+IChsaXR0bGVFbmRpYW4gPyBpIDogMyAtIGkpICogOCkgJiAweGZmXG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiB3cml0ZUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gMFxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgKyAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50OCA9IGZ1bmN0aW9uIHdyaXRlSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweDdmLCAtMHg4MClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuZnVuY3Rpb24gY2hlY2tJRUVFNzU0IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAob2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvYXQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5ICh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXRTdGFydCA+PSB0YXJnZXQubGVuZ3RoKSB0YXJnZXRTdGFydCA9IHRhcmdldC5sZW5ndGhcbiAgaWYgKCF0YXJnZXRTdGFydCkgdGFyZ2V0U3RhcnQgPSAwXG4gIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDBcbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwXG5cbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICBpZiAodGFyZ2V0U3RhcnQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICB9XG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydFxuICB9XG5cbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0XG4gIHZhciBpXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCAmJiBzdGFydCA8IHRhcmdldFN0YXJ0ICYmIHRhcmdldFN0YXJ0IDwgZW5kKSB7XG4gICAgLy8gZGVzY2VuZGluZyBjb3B5IGZyb20gZW5kXG4gICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2UgaWYgKGxlbiA8IDEwMDAgfHwgIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gYXNjZW5kaW5nIGNvcHkgZnJvbSBzdGFydFxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXG4gICAgICB0YXJnZXQsXG4gICAgICB0aGlzLnN1YmFycmF5KHN0YXJ0LCBzdGFydCArIGxlbiksXG4gICAgICB0YXJnZXRTdGFydFxuICAgIClcbiAgfVxuXG4gIHJldHVybiBsZW5cbn1cblxuLy8gVXNhZ2U6XG4vLyAgICBidWZmZXIuZmlsbChudW1iZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKGJ1ZmZlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoc3RyaW5nWywgb2Zmc2V0WywgZW5kXV1bLCBlbmNvZGluZ10pXG5CdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiBmaWxsICh2YWwsIHN0YXJ0LCBlbmQsIGVuY29kaW5nKSB7XG4gIC8vIEhhbmRsZSBzdHJpbmcgY2FzZXM6XG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IHN0YXJ0XG4gICAgICBzdGFydCA9IDBcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZW5kID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmRcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfVxuICAgIGlmICh2YWwubGVuZ3RoID09PSAxKSB7XG4gICAgICB2YXIgY29kZSA9IHZhbC5jaGFyQ29kZUF0KDApXG4gICAgICBpZiAoY29kZSA8IDI1Nikge1xuICAgICAgICB2YWwgPSBjb2RlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuY29kaW5nIG11c3QgYmUgYSBzdHJpbmcnKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMjU1XG4gIH1cblxuICAvLyBJbnZhbGlkIHJhbmdlcyBhcmUgbm90IHNldCB0byBhIGRlZmF1bHQsIHNvIGNhbiByYW5nZSBjaGVjayBlYXJseS5cbiAgaWYgKHN0YXJ0IDwgMCB8fCB0aGlzLmxlbmd0aCA8IHN0YXJ0IHx8IHRoaXMubGVuZ3RoIDwgZW5kKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ091dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHN0YXJ0ID0gc3RhcnQgPj4+IDBcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMFxuXG4gIGlmICghdmFsKSB2YWwgPSAwXG5cbiAgdmFyIGlcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgICAgdGhpc1tpXSA9IHZhbFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgYnl0ZXMgPSBCdWZmZXIuaXNCdWZmZXIodmFsKVxuICAgICAgPyB2YWxcbiAgICAgIDogdXRmOFRvQnl0ZXMobmV3IEJ1ZmZlcih2YWwsIGVuY29kaW5nKS50b1N0cmluZygpKVxuICAgIHZhciBsZW4gPSBieXRlcy5sZW5ndGhcbiAgICBmb3IgKGkgPSAwOyBpIDwgZW5kIC0gc3RhcnQ7ICsraSkge1xuICAgICAgdGhpc1tpICsgc3RhcnRdID0gYnl0ZXNbaSAlIGxlbl1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG4vLyBIRUxQRVIgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT09XG5cbnZhciBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXitcXC8wLTlBLVphLXotX10vZ1xuXG5mdW5jdGlvbiBiYXNlNjRjbGVhbiAoc3RyKSB7XG4gIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcXG4gYW5kIFxcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdFxuICBzdHIgPSBzdHJpbmd0cmltKHN0cikucmVwbGFjZShJTlZBTElEX0JBU0U2NF9SRSwgJycpXG4gIC8vIE5vZGUgY29udmVydHMgc3RyaW5ncyB3aXRoIGxlbmd0aCA8IDIgdG8gJydcbiAgaWYgKHN0ci5sZW5ndGggPCAyKSByZXR1cm4gJydcbiAgLy8gTm9kZSBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgYmFzZTY0IHN0cmluZ3MgKG1pc3NpbmcgdHJhaWxpbmcgPT09KSwgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgIHN0ciA9IHN0ciArICc9J1xuICB9XG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gc3RyaW5ndHJpbSAoc3RyKSB7XG4gIGlmIChzdHIudHJpbSkgcmV0dXJuIHN0ci50cmltKClcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJylcbn1cblxuZnVuY3Rpb24gdG9IZXggKG4pIHtcbiAgaWYgKG4gPCAxNikgcmV0dXJuICcwJyArIG4udG9TdHJpbmcoMTYpXG4gIHJldHVybiBuLnRvU3RyaW5nKDE2KVxufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyaW5nLCB1bml0cykge1xuICB1bml0cyA9IHVuaXRzIHx8IEluZmluaXR5XG4gIHZhciBjb2RlUG9pbnRcbiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGhcbiAgdmFyIGxlYWRTdXJyb2dhdGUgPSBudWxsXG4gIHZhciBieXRlcyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhbGlkIGxlYWRcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3dcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwKSArIDB4MTAwMDBcbiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG5cbiAgICAvLyBlbmNvZGUgdXRmOFxuICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7XG4gIHZhciBjLCBoaSwgbG9cbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG5cbiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgICBoaSA9IGMgPj4gOFxuICAgIGxvID0gYyAlIDI1NlxuICAgIGJ5dGVBcnJheS5wdXNoKGxvKVxuICAgIGJ5dGVBcnJheS5wdXNoKGhpKVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiBiYXNlNjRUb0J5dGVzIChzdHIpIHtcbiAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShiYXNlNjRjbGVhbihzdHIpKVxufVxuXG5mdW5jdGlvbiBibGl0QnVmZmVyIChzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiBpc25hbiAodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IHZhbCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxufVxuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCJleHBvcnRzLnJlYWQgPSBmdW5jdGlvbiAoYnVmZmVyLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbVxuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgbkJpdHMgPSAtN1xuICB2YXIgaSA9IGlzTEUgPyAobkJ5dGVzIC0gMSkgOiAwXG4gIHZhciBkID0gaXNMRSA/IC0xIDogMVxuICB2YXIgcyA9IGJ1ZmZlcltvZmZzZXQgKyBpXVxuXG4gIGkgKz0gZFxuXG4gIGUgPSBzICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIHMgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IGVMZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IChlICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIG0gPSBlICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIGUgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IG1MZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IChtICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhc1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6ICgocyA/IC0xIDogMSkgKiBJbmZpbml0eSlcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIE1hdGgucG93KDIsIG1MZW4pXG4gICAgZSA9IGUgLSBlQmlhc1xuICB9XG4gIHJldHVybiAocyA/IC0xIDogMSkgKiBtICogTWF0aC5wb3coMiwgZSAtIG1MZW4pXG59XG5cbmV4cG9ydHMud3JpdGUgPSBmdW5jdGlvbiAoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG0sIGNcbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIHJ0ID0gKG1MZW4gPT09IDIzID8gTWF0aC5wb3coMiwgLTI0KSAtIE1hdGgucG93KDIsIC03NykgOiAwKVxuICB2YXIgaSA9IGlzTEUgPyAwIDogKG5CeXRlcyAtIDEpXG4gIHZhciBkID0gaXNMRSA/IDEgOiAtMVxuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCAodmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCkgPyAxIDogMFxuXG4gIHZhbHVlID0gTWF0aC5hYnModmFsdWUpXG5cbiAgaWYgKGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICBtID0gaXNOYU4odmFsdWUpID8gMSA6IDBcbiAgICBlID0gZU1heFxuICB9IGVsc2Uge1xuICAgIGUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4yKVxuICAgIGlmICh2YWx1ZSAqIChjID0gTWF0aC5wb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLVxuICAgICAgYyAqPSAyXG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogTWF0aC5wb3coMiwgMSAtIGVCaWFzKVxuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrK1xuICAgICAgYyAvPSAyXG4gICAgfVxuXG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMFxuICAgICAgZSA9IGVNYXhcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKCh2YWx1ZSAqIGMpIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IGUgKyBlQmlhc1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBNYXRoLnBvdygyLCBlQmlhcyAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSAwXG4gICAgfVxuICB9XG5cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW29mZnNldCArIGldID0gbSAmIDB4ZmYsIGkgKz0gZCwgbSAvPSAyNTYsIG1MZW4gLT0gOCkge31cblxuICBlID0gKGUgPDwgbUxlbikgfCBtXG4gIGVMZW4gKz0gbUxlblxuICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IGUgJiAweGZmLCBpICs9IGQsIGUgLz0gMjU2LCBlTGVuIC09IDgpIHt9XG5cbiAgYnVmZmVyW29mZnNldCArIGkgLSBkXSB8PSBzICogMTI4XG59XG4iLCIvKiFcblxuSlNaaXAgdjMuNS4wIC0gQSBKYXZhU2NyaXB0IGNsYXNzIGZvciBnZW5lcmF0aW5nIGFuZCByZWFkaW5nIHppcCBmaWxlc1xuPGh0dHA6Ly9zdHVhcnRrLmNvbS9qc3ppcD5cblxuKGMpIDIwMDktMjAxNiBTdHVhcnQgS25pZ2h0bGV5IDxzdHVhcnQgW2F0XSBzdHVhcnRrLmNvbT5cbkR1YWwgbGljZW5jZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIG9yIEdQTHYzLiBTZWUgaHR0cHM6Ly9yYXcuZ2l0aHViLmNvbS9TdHVrL2pzemlwL21hc3Rlci9MSUNFTlNFLm1hcmtkb3duLlxuXG5KU1ppcCB1c2VzIHRoZSBsaWJyYXJ5IHBha28gcmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIDpcbmh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlY2EvcGFrby9ibG9iL21hc3Rlci9MSUNFTlNFXG4qL1xuXG4hZnVuY3Rpb24odCl7aWYoXCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGUpbW9kdWxlLmV4cG9ydHM9dCgpO2Vsc2UgaWYoXCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kKWRlZmluZShbXSx0KTtlbHNleyhcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzpcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsP2dsb2JhbDpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZj9zZWxmOnRoaXMpLkpTWmlwPXQoKX19KGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uIHMoYSxvLGgpe2Z1bmN0aW9uIHUocix0KXtpZighb1tyXSl7aWYoIWFbcl0pe3ZhciBlPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIXQmJmUpcmV0dXJuIGUociwhMCk7aWYobClyZXR1cm4gbChyLCEwKTt2YXIgaT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK3IrXCInXCIpO3Rocm93IGkuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixpfXZhciBuPW9bcl09e2V4cG9ydHM6e319O2Fbcl1bMF0uY2FsbChuLmV4cG9ydHMsZnVuY3Rpb24odCl7dmFyIGU9YVtyXVsxXVt0XTtyZXR1cm4gdShlfHx0KX0sbixuLmV4cG9ydHMscyxhLG8saCl9cmV0dXJuIG9bcl0uZXhwb3J0c31mb3IodmFyIGw9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSx0PTA7dDxoLmxlbmd0aDt0KyspdShoW3RdKTtyZXR1cm4gdX0oezE6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgYz10KFwiLi91dGlsc1wiKSxkPXQoXCIuL3N1cHBvcnRcIikscD1cIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89XCI7ci5lbmNvZGU9ZnVuY3Rpb24odCl7Zm9yKHZhciBlLHIsaSxuLHMsYSxvLGg9W10sdT0wLGw9dC5sZW5ndGgsZj1sLGQ9XCJzdHJpbmdcIiE9PWMuZ2V0VHlwZU9mKHQpO3U8dC5sZW5ndGg7KWY9bC11LGk9ZD8oZT10W3UrK10scj11PGw/dFt1KytdOjAsdTxsP3RbdSsrXTowKTooZT10LmNoYXJDb2RlQXQodSsrKSxyPXU8bD90LmNoYXJDb2RlQXQodSsrKTowLHU8bD90LmNoYXJDb2RlQXQodSsrKTowKSxuPWU+PjIscz0oMyZlKTw8NHxyPj40LGE9MTxmPygxNSZyKTw8MnxpPj42OjY0LG89MjxmPzYzJmk6NjQsaC5wdXNoKHAuY2hhckF0KG4pK3AuY2hhckF0KHMpK3AuY2hhckF0KGEpK3AuY2hhckF0KG8pKTtyZXR1cm4gaC5qb2luKFwiXCIpfSxyLmRlY29kZT1mdW5jdGlvbih0KXt2YXIgZSxyLGksbixzLGEsbz0wLGg9MCx1PVwiZGF0YTpcIjtpZih0LnN1YnN0cigwLHUubGVuZ3RoKT09PXUpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBiYXNlNjQgaW5wdXQsIGl0IGxvb2tzIGxpa2UgYSBkYXRhIHVybC5cIik7dmFyIGwsZj0zKih0PXQucmVwbGFjZSgvW15BLVphLXowLTlcXCtcXC9cXD1dL2csXCJcIikpLmxlbmd0aC80O2lmKHQuY2hhckF0KHQubGVuZ3RoLTEpPT09cC5jaGFyQXQoNjQpJiZmLS0sdC5jaGFyQXQodC5sZW5ndGgtMik9PT1wLmNoYXJBdCg2NCkmJmYtLSxmJTEhPTApdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBiYXNlNjQgaW5wdXQsIGJhZCBjb250ZW50IGxlbmd0aC5cIik7Zm9yKGw9ZC51aW50OGFycmF5P25ldyBVaW50OEFycmF5KDB8Zik6bmV3IEFycmF5KDB8Zik7bzx0Lmxlbmd0aDspZT1wLmluZGV4T2YodC5jaGFyQXQobysrKSk8PDJ8KG49cC5pbmRleE9mKHQuY2hhckF0KG8rKykpKT4+NCxyPSgxNSZuKTw8NHwocz1wLmluZGV4T2YodC5jaGFyQXQobysrKSkpPj4yLGk9KDMmcyk8PDZ8KGE9cC5pbmRleE9mKHQuY2hhckF0KG8rKykpKSxsW2grK109ZSw2NCE9PXMmJihsW2grK109ciksNjQhPT1hJiYobFtoKytdPWkpO3JldHVybiBsfX0se1wiLi9zdXBwb3J0XCI6MzAsXCIuL3V0aWxzXCI6MzJ9XSwyOltmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGk9dChcIi4vZXh0ZXJuYWxcIiksbj10KFwiLi9zdHJlYW0vRGF0YVdvcmtlclwiKSxzPXQoXCIuL3N0cmVhbS9EYXRhTGVuZ3RoUHJvYmVcIiksYT10KFwiLi9zdHJlYW0vQ3JjMzJQcm9iZVwiKTtzPXQoXCIuL3N0cmVhbS9EYXRhTGVuZ3RoUHJvYmVcIik7ZnVuY3Rpb24gbyh0LGUscixpLG4pe3RoaXMuY29tcHJlc3NlZFNpemU9dCx0aGlzLnVuY29tcHJlc3NlZFNpemU9ZSx0aGlzLmNyYzMyPXIsdGhpcy5jb21wcmVzc2lvbj1pLHRoaXMuY29tcHJlc3NlZENvbnRlbnQ9bn1vLnByb3RvdHlwZT17Z2V0Q29udGVudFdvcmtlcjpmdW5jdGlvbigpe3ZhciB0PW5ldyBuKGkuUHJvbWlzZS5yZXNvbHZlKHRoaXMuY29tcHJlc3NlZENvbnRlbnQpKS5waXBlKHRoaXMuY29tcHJlc3Npb24udW5jb21wcmVzc1dvcmtlcigpKS5waXBlKG5ldyBzKFwiZGF0YV9sZW5ndGhcIikpLGU9dGhpcztyZXR1cm4gdC5vbihcImVuZFwiLGZ1bmN0aW9uKCl7aWYodGhpcy5zdHJlYW1JbmZvLmRhdGFfbGVuZ3RoIT09ZS51bmNvbXByZXNzZWRTaXplKXRocm93IG5ldyBFcnJvcihcIkJ1ZyA6IHVuY29tcHJlc3NlZCBkYXRhIHNpemUgbWlzbWF0Y2hcIil9KSx0fSxnZXRDb21wcmVzc2VkV29ya2VyOmZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBuKGkuUHJvbWlzZS5yZXNvbHZlKHRoaXMuY29tcHJlc3NlZENvbnRlbnQpKS53aXRoU3RyZWFtSW5mbyhcImNvbXByZXNzZWRTaXplXCIsdGhpcy5jb21wcmVzc2VkU2l6ZSkud2l0aFN0cmVhbUluZm8oXCJ1bmNvbXByZXNzZWRTaXplXCIsdGhpcy51bmNvbXByZXNzZWRTaXplKS53aXRoU3RyZWFtSW5mbyhcImNyYzMyXCIsdGhpcy5jcmMzMikud2l0aFN0cmVhbUluZm8oXCJjb21wcmVzc2lvblwiLHRoaXMuY29tcHJlc3Npb24pfX0sby5jcmVhdGVXb3JrZXJGcm9tPWZ1bmN0aW9uKHQsZSxyKXtyZXR1cm4gdC5waXBlKG5ldyBhKS5waXBlKG5ldyBzKFwidW5jb21wcmVzc2VkU2l6ZVwiKSkucGlwZShlLmNvbXByZXNzV29ya2VyKHIpKS5waXBlKG5ldyBzKFwiY29tcHJlc3NlZFNpemVcIikpLndpdGhTdHJlYW1JbmZvKFwiY29tcHJlc3Npb25cIixlKX0sZS5leHBvcnRzPW99LHtcIi4vZXh0ZXJuYWxcIjo2LFwiLi9zdHJlYW0vQ3JjMzJQcm9iZVwiOjI1LFwiLi9zdHJlYW0vRGF0YUxlbmd0aFByb2JlXCI6MjYsXCIuL3N0cmVhbS9EYXRhV29ya2VyXCI6Mjd9XSwzOltmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGk9dChcIi4vc3RyZWFtL0dlbmVyaWNXb3JrZXJcIik7ci5TVE9SRT17bWFnaWM6XCJcXDBcXDBcIixjb21wcmVzc1dvcmtlcjpmdW5jdGlvbih0KXtyZXR1cm4gbmV3IGkoXCJTVE9SRSBjb21wcmVzc2lvblwiKX0sdW5jb21wcmVzc1dvcmtlcjpmdW5jdGlvbigpe3JldHVybiBuZXcgaShcIlNUT1JFIGRlY29tcHJlc3Npb25cIil9fSxyLkRFRkxBVEU9dChcIi4vZmxhdGVcIil9LHtcIi4vZmxhdGVcIjo3LFwiLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiOjI4fV0sNDpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBpPXQoXCIuL3V0aWxzXCIpO3ZhciBvPWZ1bmN0aW9uKCl7Zm9yKHZhciB0LGU9W10scj0wO3I8MjU2O3IrKyl7dD1yO2Zvcih2YXIgaT0wO2k8ODtpKyspdD0xJnQ/Mzk4ODI5MjM4NF50Pj4+MTp0Pj4+MTtlW3JdPXR9cmV0dXJuIGV9KCk7ZS5leHBvcnRzPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHZvaWQgMCE9PXQmJnQubGVuZ3RoP1wic3RyaW5nXCIhPT1pLmdldFR5cGVPZih0KT9mdW5jdGlvbih0LGUscixpKXt2YXIgbj1vLHM9aStyO3RePS0xO2Zvcih2YXIgYT1pO2E8czthKyspdD10Pj4+OF5uWzI1NSYodF5lW2FdKV07cmV0dXJuLTFedH0oMHxlLHQsdC5sZW5ndGgsMCk6ZnVuY3Rpb24odCxlLHIsaSl7dmFyIG49byxzPWkrcjt0Xj0tMTtmb3IodmFyIGE9aTthPHM7YSsrKXQ9dD4+PjheblsyNTUmKHReZS5jaGFyQ29kZUF0KGEpKV07cmV0dXJuLTFedH0oMHxlLHQsdC5sZW5ndGgsMCk6MH19LHtcIi4vdXRpbHNcIjozMn1dLDU6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjtyLmJhc2U2ND0hMSxyLmJpbmFyeT0hMSxyLmRpcj0hMSxyLmNyZWF0ZUZvbGRlcnM9ITAsci5kYXRlPW51bGwsci5jb21wcmVzc2lvbj1udWxsLHIuY29tcHJlc3Npb25PcHRpb25zPW51bGwsci5jb21tZW50PW51bGwsci51bml4UGVybWlzc2lvbnM9bnVsbCxyLmRvc1Blcm1pc3Npb25zPW51bGx9LHt9XSw2OltmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGk9bnVsbDtpPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBQcm9taXNlP1Byb21pc2U6dChcImxpZVwiKSxlLmV4cG9ydHM9e1Byb21pc2U6aX19LHtsaWU6Mzd9XSw3OltmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGk9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFVpbnQ4QXJyYXkmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBVaW50MTZBcnJheSYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFVpbnQzMkFycmF5LG49dChcInBha29cIikscz10KFwiLi91dGlsc1wiKSxhPXQoXCIuL3N0cmVhbS9HZW5lcmljV29ya2VyXCIpLG89aT9cInVpbnQ4YXJyYXlcIjpcImFycmF5XCI7ZnVuY3Rpb24gaCh0LGUpe2EuY2FsbCh0aGlzLFwiRmxhdGVXb3JrZXIvXCIrdCksdGhpcy5fcGFrbz1udWxsLHRoaXMuX3Bha29BY3Rpb249dCx0aGlzLl9wYWtvT3B0aW9ucz1lLHRoaXMubWV0YT17fX1yLm1hZ2ljPVwiXFxiXFwwXCIscy5pbmhlcml0cyhoLGEpLGgucHJvdG90eXBlLnByb2Nlc3NDaHVuaz1mdW5jdGlvbih0KXt0aGlzLm1ldGE9dC5tZXRhLG51bGw9PT10aGlzLl9wYWtvJiZ0aGlzLl9jcmVhdGVQYWtvKCksdGhpcy5fcGFrby5wdXNoKHMudHJhbnNmb3JtVG8obyx0LmRhdGEpLCExKX0saC5wcm90b3R5cGUuZmx1c2g9ZnVuY3Rpb24oKXthLnByb3RvdHlwZS5mbHVzaC5jYWxsKHRoaXMpLG51bGw9PT10aGlzLl9wYWtvJiZ0aGlzLl9jcmVhdGVQYWtvKCksdGhpcy5fcGFrby5wdXNoKFtdLCEwKX0saC5wcm90b3R5cGUuY2xlYW5VcD1mdW5jdGlvbigpe2EucHJvdG90eXBlLmNsZWFuVXAuY2FsbCh0aGlzKSx0aGlzLl9wYWtvPW51bGx9LGgucHJvdG90eXBlLl9jcmVhdGVQYWtvPWZ1bmN0aW9uKCl7dGhpcy5fcGFrbz1uZXcgblt0aGlzLl9wYWtvQWN0aW9uXSh7cmF3OiEwLGxldmVsOnRoaXMuX3Bha29PcHRpb25zLmxldmVsfHwtMX0pO3ZhciBlPXRoaXM7dGhpcy5fcGFrby5vbkRhdGE9ZnVuY3Rpb24odCl7ZS5wdXNoKHtkYXRhOnQsbWV0YTplLm1ldGF9KX19LHIuY29tcHJlc3NXb3JrZXI9ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBoKFwiRGVmbGF0ZVwiLHQpfSxyLnVuY29tcHJlc3NXb3JrZXI9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IGgoXCJJbmZsYXRlXCIse30pfX0se1wiLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiOjI4LFwiLi91dGlsc1wiOjMyLHBha286Mzh9XSw4OltmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gQSh0LGUpe3ZhciByLGk9XCJcIjtmb3Iocj0wO3I8ZTtyKyspaSs9U3RyaW5nLmZyb21DaGFyQ29kZSgyNTUmdCksdD4+Pj04O3JldHVybiBpfWZ1bmN0aW9uIGkodCxlLHIsaSxuLHMpe3ZhciBhLG8saD10LmZpbGUsdT10LmNvbXByZXNzaW9uLGw9cyE9PU8udXRmOGVuY29kZSxmPUkudHJhbnNmb3JtVG8oXCJzdHJpbmdcIixzKGgubmFtZSkpLGQ9SS50cmFuc2Zvcm1UbyhcInN0cmluZ1wiLE8udXRmOGVuY29kZShoLm5hbWUpKSxjPWguY29tbWVudCxwPUkudHJhbnNmb3JtVG8oXCJzdHJpbmdcIixzKGMpKSxtPUkudHJhbnNmb3JtVG8oXCJzdHJpbmdcIixPLnV0ZjhlbmNvZGUoYykpLF89ZC5sZW5ndGghPT1oLm5hbWUubGVuZ3RoLGc9bS5sZW5ndGghPT1jLmxlbmd0aCxiPVwiXCIsdj1cIlwiLHk9XCJcIix3PWguZGlyLGs9aC5kYXRlLHg9e2NyYzMyOjAsY29tcHJlc3NlZFNpemU6MCx1bmNvbXByZXNzZWRTaXplOjB9O2UmJiFyfHwoeC5jcmMzMj10LmNyYzMyLHguY29tcHJlc3NlZFNpemU9dC5jb21wcmVzc2VkU2l6ZSx4LnVuY29tcHJlc3NlZFNpemU9dC51bmNvbXByZXNzZWRTaXplKTt2YXIgUz0wO2UmJihTfD04KSxsfHwhXyYmIWd8fChTfD0yMDQ4KTt2YXIgej0wLEM9MDt3JiYoenw9MTYpLFwiVU5JWFwiPT09bj8oQz03OTgsenw9ZnVuY3Rpb24odCxlKXt2YXIgcj10O3JldHVybiB0fHwocj1lPzE2ODkzOjMzMjA0KSwoNjU1MzUmcik8PDE2fShoLnVuaXhQZXJtaXNzaW9ucyx3KSk6KEM9MjAsenw9ZnVuY3Rpb24odCl7cmV0dXJuIDYzJih0fHwwKX0oaC5kb3NQZXJtaXNzaW9ucykpLGE9ay5nZXRVVENIb3VycygpLGE8PD02LGF8PWsuZ2V0VVRDTWludXRlcygpLGE8PD01LGF8PWsuZ2V0VVRDU2Vjb25kcygpLzIsbz1rLmdldFVUQ0Z1bGxZZWFyKCktMTk4MCxvPDw9NCxvfD1rLmdldFVUQ01vbnRoKCkrMSxvPDw9NSxvfD1rLmdldFVUQ0RhdGUoKSxfJiYodj1BKDEsMSkrQShCKGYpLDQpK2QsYis9XCJ1cFwiK0Eodi5sZW5ndGgsMikrdiksZyYmKHk9QSgxLDEpK0EoQihwKSw0KSttLGIrPVwidWNcIitBKHkubGVuZ3RoLDIpK3kpO3ZhciBFPVwiXCI7cmV0dXJuIEUrPVwiXFxuXFwwXCIsRSs9QShTLDIpLEUrPXUubWFnaWMsRSs9QShhLDIpLEUrPUEobywyKSxFKz1BKHguY3JjMzIsNCksRSs9QSh4LmNvbXByZXNzZWRTaXplLDQpLEUrPUEoeC51bmNvbXByZXNzZWRTaXplLDQpLEUrPUEoZi5sZW5ndGgsMiksRSs9QShiLmxlbmd0aCwyKSx7ZmlsZVJlY29yZDpSLkxPQ0FMX0ZJTEVfSEVBREVSK0UrZitiLGRpclJlY29yZDpSLkNFTlRSQUxfRklMRV9IRUFERVIrQShDLDIpK0UrQShwLmxlbmd0aCwyKStcIlxcMFxcMFxcMFxcMFwiK0Eoeiw0KStBKGksNCkrZitiK3B9fXZhciBJPXQoXCIuLi91dGlsc1wiKSxuPXQoXCIuLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiKSxPPXQoXCIuLi91dGY4XCIpLEI9dChcIi4uL2NyYzMyXCIpLFI9dChcIi4uL3NpZ25hdHVyZVwiKTtmdW5jdGlvbiBzKHQsZSxyLGkpe24uY2FsbCh0aGlzLFwiWmlwRmlsZVdvcmtlclwiKSx0aGlzLmJ5dGVzV3JpdHRlbj0wLHRoaXMuemlwQ29tbWVudD1lLHRoaXMuemlwUGxhdGZvcm09cix0aGlzLmVuY29kZUZpbGVOYW1lPWksdGhpcy5zdHJlYW1GaWxlcz10LHRoaXMuYWNjdW11bGF0ZT0hMSx0aGlzLmNvbnRlbnRCdWZmZXI9W10sdGhpcy5kaXJSZWNvcmRzPVtdLHRoaXMuY3VycmVudFNvdXJjZU9mZnNldD0wLHRoaXMuZW50cmllc0NvdW50PTAsdGhpcy5jdXJyZW50RmlsZT1udWxsLHRoaXMuX3NvdXJjZXM9W119SS5pbmhlcml0cyhzLG4pLHMucHJvdG90eXBlLnB1c2g9ZnVuY3Rpb24odCl7dmFyIGU9dC5tZXRhLnBlcmNlbnR8fDAscj10aGlzLmVudHJpZXNDb3VudCxpPXRoaXMuX3NvdXJjZXMubGVuZ3RoO3RoaXMuYWNjdW11bGF0ZT90aGlzLmNvbnRlbnRCdWZmZXIucHVzaCh0KToodGhpcy5ieXRlc1dyaXR0ZW4rPXQuZGF0YS5sZW5ndGgsbi5wcm90b3R5cGUucHVzaC5jYWxsKHRoaXMse2RhdGE6dC5kYXRhLG1ldGE6e2N1cnJlbnRGaWxlOnRoaXMuY3VycmVudEZpbGUscGVyY2VudDpyPyhlKzEwMCooci1pLTEpKS9yOjEwMH19KSl9LHMucHJvdG90eXBlLm9wZW5lZFNvdXJjZT1mdW5jdGlvbih0KXt0aGlzLmN1cnJlbnRTb3VyY2VPZmZzZXQ9dGhpcy5ieXRlc1dyaXR0ZW4sdGhpcy5jdXJyZW50RmlsZT10LmZpbGUubmFtZTt2YXIgZT10aGlzLnN0cmVhbUZpbGVzJiYhdC5maWxlLmRpcjtpZihlKXt2YXIgcj1pKHQsZSwhMSx0aGlzLmN1cnJlbnRTb3VyY2VPZmZzZXQsdGhpcy56aXBQbGF0Zm9ybSx0aGlzLmVuY29kZUZpbGVOYW1lKTt0aGlzLnB1c2goe2RhdGE6ci5maWxlUmVjb3JkLG1ldGE6e3BlcmNlbnQ6MH19KX1lbHNlIHRoaXMuYWNjdW11bGF0ZT0hMH0scy5wcm90b3R5cGUuY2xvc2VkU291cmNlPWZ1bmN0aW9uKHQpe3RoaXMuYWNjdW11bGF0ZT0hMTt2YXIgZT10aGlzLnN0cmVhbUZpbGVzJiYhdC5maWxlLmRpcixyPWkodCxlLCEwLHRoaXMuY3VycmVudFNvdXJjZU9mZnNldCx0aGlzLnppcFBsYXRmb3JtLHRoaXMuZW5jb2RlRmlsZU5hbWUpO2lmKHRoaXMuZGlyUmVjb3Jkcy5wdXNoKHIuZGlyUmVjb3JkKSxlKXRoaXMucHVzaCh7ZGF0YTpmdW5jdGlvbih0KXtyZXR1cm4gUi5EQVRBX0RFU0NSSVBUT1IrQSh0LmNyYzMyLDQpK0EodC5jb21wcmVzc2VkU2l6ZSw0KStBKHQudW5jb21wcmVzc2VkU2l6ZSw0KX0odCksbWV0YTp7cGVyY2VudDoxMDB9fSk7ZWxzZSBmb3IodGhpcy5wdXNoKHtkYXRhOnIuZmlsZVJlY29yZCxtZXRhOntwZXJjZW50OjB9fSk7dGhpcy5jb250ZW50QnVmZmVyLmxlbmd0aDspdGhpcy5wdXNoKHRoaXMuY29udGVudEJ1ZmZlci5zaGlmdCgpKTt0aGlzLmN1cnJlbnRGaWxlPW51bGx9LHMucHJvdG90eXBlLmZsdXNoPWZ1bmN0aW9uKCl7Zm9yKHZhciB0PXRoaXMuYnl0ZXNXcml0dGVuLGU9MDtlPHRoaXMuZGlyUmVjb3Jkcy5sZW5ndGg7ZSsrKXRoaXMucHVzaCh7ZGF0YTp0aGlzLmRpclJlY29yZHNbZV0sbWV0YTp7cGVyY2VudDoxMDB9fSk7dmFyIHI9dGhpcy5ieXRlc1dyaXR0ZW4tdCxpPWZ1bmN0aW9uKHQsZSxyLGksbil7dmFyIHM9SS50cmFuc2Zvcm1UbyhcInN0cmluZ1wiLG4oaSkpO3JldHVybiBSLkNFTlRSQUxfRElSRUNUT1JZX0VORCtcIlxcMFxcMFxcMFxcMFwiK0EodCwyKStBKHQsMikrQShlLDQpK0Eociw0KStBKHMubGVuZ3RoLDIpK3N9KHRoaXMuZGlyUmVjb3Jkcy5sZW5ndGgscix0LHRoaXMuemlwQ29tbWVudCx0aGlzLmVuY29kZUZpbGVOYW1lKTt0aGlzLnB1c2goe2RhdGE6aSxtZXRhOntwZXJjZW50OjEwMH19KX0scy5wcm90b3R5cGUucHJlcGFyZU5leHRTb3VyY2U9ZnVuY3Rpb24oKXt0aGlzLnByZXZpb3VzPXRoaXMuX3NvdXJjZXMuc2hpZnQoKSx0aGlzLm9wZW5lZFNvdXJjZSh0aGlzLnByZXZpb3VzLnN0cmVhbUluZm8pLHRoaXMuaXNQYXVzZWQ/dGhpcy5wcmV2aW91cy5wYXVzZSgpOnRoaXMucHJldmlvdXMucmVzdW1lKCl9LHMucHJvdG90eXBlLnJlZ2lzdGVyUHJldmlvdXM9ZnVuY3Rpb24odCl7dGhpcy5fc291cmNlcy5wdXNoKHQpO3ZhciBlPXRoaXM7cmV0dXJuIHQub24oXCJkYXRhXCIsZnVuY3Rpb24odCl7ZS5wcm9jZXNzQ2h1bmsodCl9KSx0Lm9uKFwiZW5kXCIsZnVuY3Rpb24oKXtlLmNsb3NlZFNvdXJjZShlLnByZXZpb3VzLnN0cmVhbUluZm8pLGUuX3NvdXJjZXMubGVuZ3RoP2UucHJlcGFyZU5leHRTb3VyY2UoKTplLmVuZCgpfSksdC5vbihcImVycm9yXCIsZnVuY3Rpb24odCl7ZS5lcnJvcih0KX0pLHRoaXN9LHMucHJvdG90eXBlLnJlc3VtZT1mdW5jdGlvbigpe3JldHVybiEhbi5wcm90b3R5cGUucmVzdW1lLmNhbGwodGhpcykmJighdGhpcy5wcmV2aW91cyYmdGhpcy5fc291cmNlcy5sZW5ndGg/KHRoaXMucHJlcGFyZU5leHRTb3VyY2UoKSwhMCk6dGhpcy5wcmV2aW91c3x8dGhpcy5fc291cmNlcy5sZW5ndGh8fHRoaXMuZ2VuZXJhdGVkRXJyb3I/dm9pZCAwOih0aGlzLmVuZCgpLCEwKSl9LHMucHJvdG90eXBlLmVycm9yPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuX3NvdXJjZXM7aWYoIW4ucHJvdG90eXBlLmVycm9yLmNhbGwodGhpcyx0KSlyZXR1cm4hMTtmb3IodmFyIHI9MDtyPGUubGVuZ3RoO3IrKyl0cnl7ZVtyXS5lcnJvcih0KX1jYXRjaCh0KXt9cmV0dXJuITB9LHMucHJvdG90eXBlLmxvY2s9ZnVuY3Rpb24oKXtuLnByb3RvdHlwZS5sb2NrLmNhbGwodGhpcyk7Zm9yKHZhciB0PXRoaXMuX3NvdXJjZXMsZT0wO2U8dC5sZW5ndGg7ZSsrKXRbZV0ubG9jaygpfSxlLmV4cG9ydHM9c30se1wiLi4vY3JjMzJcIjo0LFwiLi4vc2lnbmF0dXJlXCI6MjMsXCIuLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiOjI4LFwiLi4vdXRmOFwiOjMxLFwiLi4vdXRpbHNcIjozMn1dLDk6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgdT10KFwiLi4vY29tcHJlc3Npb25zXCIpLGk9dChcIi4vWmlwRmlsZVdvcmtlclwiKTtyLmdlbmVyYXRlV29ya2VyPWZ1bmN0aW9uKHQsYSxlKXt2YXIgbz1uZXcgaShhLnN0cmVhbUZpbGVzLGUsYS5wbGF0Zm9ybSxhLmVuY29kZUZpbGVOYW1lKSxoPTA7dHJ5e3QuZm9yRWFjaChmdW5jdGlvbih0LGUpe2grKzt2YXIgcj1mdW5jdGlvbih0LGUpe3ZhciByPXR8fGUsaT11W3JdO2lmKCFpKXRocm93IG5ldyBFcnJvcihyK1wiIGlzIG5vdCBhIHZhbGlkIGNvbXByZXNzaW9uIG1ldGhvZCAhXCIpO3JldHVybiBpfShlLm9wdGlvbnMuY29tcHJlc3Npb24sYS5jb21wcmVzc2lvbiksaT1lLm9wdGlvbnMuY29tcHJlc3Npb25PcHRpb25zfHxhLmNvbXByZXNzaW9uT3B0aW9uc3x8e30sbj1lLmRpcixzPWUuZGF0ZTtlLl9jb21wcmVzc1dvcmtlcihyLGkpLndpdGhTdHJlYW1JbmZvKFwiZmlsZVwiLHtuYW1lOnQsZGlyOm4sZGF0ZTpzLGNvbW1lbnQ6ZS5jb21tZW50fHxcIlwiLHVuaXhQZXJtaXNzaW9uczplLnVuaXhQZXJtaXNzaW9ucyxkb3NQZXJtaXNzaW9uczplLmRvc1Blcm1pc3Npb25zfSkucGlwZShvKX0pLG8uZW50cmllc0NvdW50PWh9Y2F0Y2godCl7by5lcnJvcih0KX1yZXR1cm4gb319LHtcIi4uL2NvbXByZXNzaW9uc1wiOjMsXCIuL1ppcEZpbGVXb3JrZXJcIjo4fV0sMTA6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBpKCl7aWYoISh0aGlzIGluc3RhbmNlb2YgaSkpcmV0dXJuIG5ldyBpO2lmKGFyZ3VtZW50cy5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwiVGhlIGNvbnN0cnVjdG9yIHdpdGggcGFyYW1ldGVycyBoYXMgYmVlbiByZW1vdmVkIGluIEpTWmlwIDMuMCwgcGxlYXNlIGNoZWNrIHRoZSB1cGdyYWRlIGd1aWRlLlwiKTt0aGlzLmZpbGVzPXt9LHRoaXMuY29tbWVudD1udWxsLHRoaXMucm9vdD1cIlwiLHRoaXMuY2xvbmU9ZnVuY3Rpb24oKXt2YXIgdD1uZXcgaTtmb3IodmFyIGUgaW4gdGhpcylcImZ1bmN0aW9uXCIhPXR5cGVvZiB0aGlzW2VdJiYodFtlXT10aGlzW2VdKTtyZXR1cm4gdH19KGkucHJvdG90eXBlPXQoXCIuL29iamVjdFwiKSkubG9hZEFzeW5jPXQoXCIuL2xvYWRcIiksaS5zdXBwb3J0PXQoXCIuL3N1cHBvcnRcIiksaS5kZWZhdWx0cz10KFwiLi9kZWZhdWx0c1wiKSxpLnZlcnNpb249XCIzLjUuMFwiLGkubG9hZEFzeW5jPWZ1bmN0aW9uKHQsZSl7cmV0dXJuKG5ldyBpKS5sb2FkQXN5bmModCxlKX0saS5leHRlcm5hbD10KFwiLi9leHRlcm5hbFwiKSxlLmV4cG9ydHM9aX0se1wiLi9kZWZhdWx0c1wiOjUsXCIuL2V4dGVybmFsXCI6NixcIi4vbG9hZFwiOjExLFwiLi9vYmplY3RcIjoxNSxcIi4vc3VwcG9ydFwiOjMwfV0sMTE6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgaT10KFwiLi91dGlsc1wiKSxuPXQoXCIuL2V4dGVybmFsXCIpLG89dChcIi4vdXRmOFwiKSxoPShpPXQoXCIuL3V0aWxzXCIpLHQoXCIuL3ppcEVudHJpZXNcIikpLHM9dChcIi4vc3RyZWFtL0NyYzMyUHJvYmVcIiksdT10KFwiLi9ub2RlanNVdGlsc1wiKTtmdW5jdGlvbiBsKGkpe3JldHVybiBuZXcgbi5Qcm9taXNlKGZ1bmN0aW9uKHQsZSl7dmFyIHI9aS5kZWNvbXByZXNzZWQuZ2V0Q29udGVudFdvcmtlcigpLnBpcGUobmV3IHMpO3Iub24oXCJlcnJvclwiLGZ1bmN0aW9uKHQpe2UodCl9KS5vbihcImVuZFwiLGZ1bmN0aW9uKCl7ci5zdHJlYW1JbmZvLmNyYzMyIT09aS5kZWNvbXByZXNzZWQuY3JjMzI/ZShuZXcgRXJyb3IoXCJDb3JydXB0ZWQgemlwIDogQ1JDMzIgbWlzbWF0Y2hcIikpOnQoKX0pLnJlc3VtZSgpfSl9ZS5leHBvcnRzPWZ1bmN0aW9uKHQscyl7dmFyIGE9dGhpcztyZXR1cm4gcz1pLmV4dGVuZChzfHx7fSx7YmFzZTY0OiExLGNoZWNrQ1JDMzI6ITEsb3B0aW1pemVkQmluYXJ5U3RyaW5nOiExLGNyZWF0ZUZvbGRlcnM6ITEsZGVjb2RlRmlsZU5hbWU6by51dGY4ZGVjb2RlfSksdS5pc05vZGUmJnUuaXNTdHJlYW0odCk/bi5Qcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJKU1ppcCBjYW4ndCBhY2NlcHQgYSBzdHJlYW0gd2hlbiBsb2FkaW5nIGEgemlwIGZpbGUuXCIpKTppLnByZXBhcmVDb250ZW50KFwidGhlIGxvYWRlZCB6aXAgZmlsZVwiLHQsITAscy5vcHRpbWl6ZWRCaW5hcnlTdHJpbmcscy5iYXNlNjQpLnRoZW4oZnVuY3Rpb24odCl7dmFyIGU9bmV3IGgocyk7cmV0dXJuIGUubG9hZCh0KSxlfSkudGhlbihmdW5jdGlvbih0KXt2YXIgZT1bbi5Qcm9taXNlLnJlc29sdmUodCldLHI9dC5maWxlcztpZihzLmNoZWNrQ1JDMzIpZm9yKHZhciBpPTA7aTxyLmxlbmd0aDtpKyspZS5wdXNoKGwocltpXSkpO3JldHVybiBuLlByb21pc2UuYWxsKGUpfSkudGhlbihmdW5jdGlvbih0KXtmb3IodmFyIGU9dC5zaGlmdCgpLHI9ZS5maWxlcyxpPTA7aTxyLmxlbmd0aDtpKyspe3ZhciBuPXJbaV07YS5maWxlKG4uZmlsZU5hbWVTdHIsbi5kZWNvbXByZXNzZWQse2JpbmFyeTohMCxvcHRpbWl6ZWRCaW5hcnlTdHJpbmc6ITAsZGF0ZTpuLmRhdGUsZGlyOm4uZGlyLGNvbW1lbnQ6bi5maWxlQ29tbWVudFN0ci5sZW5ndGg/bi5maWxlQ29tbWVudFN0cjpudWxsLHVuaXhQZXJtaXNzaW9uczpuLnVuaXhQZXJtaXNzaW9ucyxkb3NQZXJtaXNzaW9uczpuLmRvc1Blcm1pc3Npb25zLGNyZWF0ZUZvbGRlcnM6cy5jcmVhdGVGb2xkZXJzfSl9cmV0dXJuIGUuemlwQ29tbWVudC5sZW5ndGgmJihhLmNvbW1lbnQ9ZS56aXBDb21tZW50KSxhfSl9fSx7XCIuL2V4dGVybmFsXCI6NixcIi4vbm9kZWpzVXRpbHNcIjoxNCxcIi4vc3RyZWFtL0NyYzMyUHJvYmVcIjoyNSxcIi4vdXRmOFwiOjMxLFwiLi91dGlsc1wiOjMyLFwiLi96aXBFbnRyaWVzXCI6MzN9XSwxMjpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBpPXQoXCIuLi91dGlsc1wiKSxuPXQoXCIuLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiKTtmdW5jdGlvbiBzKHQsZSl7bi5jYWxsKHRoaXMsXCJOb2RlanMgc3RyZWFtIGlucHV0IGFkYXB0ZXIgZm9yIFwiK3QpLHRoaXMuX3Vwc3RyZWFtRW5kZWQ9ITEsdGhpcy5fYmluZFN0cmVhbShlKX1pLmluaGVyaXRzKHMsbikscy5wcm90b3R5cGUuX2JpbmRTdHJlYW09ZnVuY3Rpb24odCl7dmFyIGU9dGhpczsodGhpcy5fc3RyZWFtPXQpLnBhdXNlKCksdC5vbihcImRhdGFcIixmdW5jdGlvbih0KXtlLnB1c2goe2RhdGE6dCxtZXRhOntwZXJjZW50OjB9fSl9KS5vbihcImVycm9yXCIsZnVuY3Rpb24odCl7ZS5pc1BhdXNlZD90aGlzLmdlbmVyYXRlZEVycm9yPXQ6ZS5lcnJvcih0KX0pLm9uKFwiZW5kXCIsZnVuY3Rpb24oKXtlLmlzUGF1c2VkP2UuX3Vwc3RyZWFtRW5kZWQ9ITA6ZS5lbmQoKX0pfSxzLnByb3RvdHlwZS5wYXVzZT1mdW5jdGlvbigpe3JldHVybiEhbi5wcm90b3R5cGUucGF1c2UuY2FsbCh0aGlzKSYmKHRoaXMuX3N0cmVhbS5wYXVzZSgpLCEwKX0scy5wcm90b3R5cGUucmVzdW1lPWZ1bmN0aW9uKCl7cmV0dXJuISFuLnByb3RvdHlwZS5yZXN1bWUuY2FsbCh0aGlzKSYmKHRoaXMuX3Vwc3RyZWFtRW5kZWQ/dGhpcy5lbmQoKTp0aGlzLl9zdHJlYW0ucmVzdW1lKCksITApfSxlLmV4cG9ydHM9c30se1wiLi4vc3RyZWFtL0dlbmVyaWNXb3JrZXJcIjoyOCxcIi4uL3V0aWxzXCI6MzJ9XSwxMzpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXQoXCJyZWFkYWJsZS1zdHJlYW1cIikuUmVhZGFibGU7ZnVuY3Rpb24gaSh0LGUscil7bi5jYWxsKHRoaXMsZSksdGhpcy5faGVscGVyPXQ7dmFyIGk9dGhpczt0Lm9uKFwiZGF0YVwiLGZ1bmN0aW9uKHQsZSl7aS5wdXNoKHQpfHxpLl9oZWxwZXIucGF1c2UoKSxyJiZyKGUpfSkub24oXCJlcnJvclwiLGZ1bmN0aW9uKHQpe2kuZW1pdChcImVycm9yXCIsdCl9KS5vbihcImVuZFwiLGZ1bmN0aW9uKCl7aS5wdXNoKG51bGwpfSl9dChcIi4uL3V0aWxzXCIpLmluaGVyaXRzKGksbiksaS5wcm90b3R5cGUuX3JlYWQ9ZnVuY3Rpb24oKXt0aGlzLl9oZWxwZXIucmVzdW1lKCl9LGUuZXhwb3J0cz1pfSx7XCIuLi91dGlsc1wiOjMyLFwicmVhZGFibGUtc3RyZWFtXCI6MTZ9XSwxNDpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz17aXNOb2RlOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBCdWZmZXIsbmV3QnVmZmVyRnJvbTpmdW5jdGlvbih0LGUpe2lmKEJ1ZmZlci5mcm9tJiZCdWZmZXIuZnJvbSE9PVVpbnQ4QXJyYXkuZnJvbSlyZXR1cm4gQnVmZmVyLmZyb20odCxlKTtpZihcIm51bWJlclwiPT10eXBlb2YgdCl0aHJvdyBuZXcgRXJyb3IoJ1RoZSBcImRhdGFcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpO3JldHVybiBuZXcgQnVmZmVyKHQsZSl9LGFsbG9jQnVmZmVyOmZ1bmN0aW9uKHQpe2lmKEJ1ZmZlci5hbGxvYylyZXR1cm4gQnVmZmVyLmFsbG9jKHQpO3ZhciBlPW5ldyBCdWZmZXIodCk7cmV0dXJuIGUuZmlsbCgwKSxlfSxpc0J1ZmZlcjpmdW5jdGlvbih0KXtyZXR1cm4gQnVmZmVyLmlzQnVmZmVyKHQpfSxpc1N0cmVhbTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgdC5vbiYmXCJmdW5jdGlvblwiPT10eXBlb2YgdC5wYXVzZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgdC5yZXN1bWV9fX0se31dLDE1OltmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcyh0LGUscil7dmFyIGksbj11LmdldFR5cGVPZihlKSxzPXUuZXh0ZW5kKHJ8fHt9LGYpO3MuZGF0ZT1zLmRhdGV8fG5ldyBEYXRlLG51bGwhPT1zLmNvbXByZXNzaW9uJiYocy5jb21wcmVzc2lvbj1zLmNvbXByZXNzaW9uLnRvVXBwZXJDYXNlKCkpLFwic3RyaW5nXCI9PXR5cGVvZiBzLnVuaXhQZXJtaXNzaW9ucyYmKHMudW5peFBlcm1pc3Npb25zPXBhcnNlSW50KHMudW5peFBlcm1pc3Npb25zLDgpKSxzLnVuaXhQZXJtaXNzaW9ucyYmMTYzODQmcy51bml4UGVybWlzc2lvbnMmJihzLmRpcj0hMCkscy5kb3NQZXJtaXNzaW9ucyYmMTYmcy5kb3NQZXJtaXNzaW9ucyYmKHMuZGlyPSEwKSxzLmRpciYmKHQ9Zyh0KSkscy5jcmVhdGVGb2xkZXJzJiYoaT1fKHQpKSYmYi5jYWxsKHRoaXMsaSwhMCk7dmFyIGE9XCJzdHJpbmdcIj09PW4mJiExPT09cy5iaW5hcnkmJiExPT09cy5iYXNlNjQ7ciYmdm9pZCAwIT09ci5iaW5hcnl8fChzLmJpbmFyeT0hYSksKGUgaW5zdGFuY2VvZiBkJiYwPT09ZS51bmNvbXByZXNzZWRTaXplfHxzLmRpcnx8IWV8fDA9PT1lLmxlbmd0aCkmJihzLmJhc2U2ND0hMSxzLmJpbmFyeT0hMCxlPVwiXCIscy5jb21wcmVzc2lvbj1cIlNUT1JFXCIsbj1cInN0cmluZ1wiKTt2YXIgbz1udWxsO289ZSBpbnN0YW5jZW9mIGR8fGUgaW5zdGFuY2VvZiBsP2U6cC5pc05vZGUmJnAuaXNTdHJlYW0oZSk/bmV3IG0odCxlKTp1LnByZXBhcmVDb250ZW50KHQsZSxzLmJpbmFyeSxzLm9wdGltaXplZEJpbmFyeVN0cmluZyxzLmJhc2U2NCk7dmFyIGg9bmV3IGModCxvLHMpO3RoaXMuZmlsZXNbdF09aH12YXIgbj10KFwiLi91dGY4XCIpLHU9dChcIi4vdXRpbHNcIiksbD10KFwiLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiKSxhPXQoXCIuL3N0cmVhbS9TdHJlYW1IZWxwZXJcIiksZj10KFwiLi9kZWZhdWx0c1wiKSxkPXQoXCIuL2NvbXByZXNzZWRPYmplY3RcIiksYz10KFwiLi96aXBPYmplY3RcIiksbz10KFwiLi9nZW5lcmF0ZVwiKSxwPXQoXCIuL25vZGVqc1V0aWxzXCIpLG09dChcIi4vbm9kZWpzL05vZGVqc1N0cmVhbUlucHV0QWRhcHRlclwiKSxfPWZ1bmN0aW9uKHQpe1wiL1wiPT09dC5zbGljZSgtMSkmJih0PXQuc3Vic3RyaW5nKDAsdC5sZW5ndGgtMSkpO3ZhciBlPXQubGFzdEluZGV4T2YoXCIvXCIpO3JldHVybiAwPGU/dC5zdWJzdHJpbmcoMCxlKTpcIlwifSxnPWZ1bmN0aW9uKHQpe3JldHVyblwiL1wiIT09dC5zbGljZSgtMSkmJih0Kz1cIi9cIiksdH0sYj1mdW5jdGlvbih0LGUpe3JldHVybiBlPXZvaWQgMCE9PWU/ZTpmLmNyZWF0ZUZvbGRlcnMsdD1nKHQpLHRoaXMuZmlsZXNbdF18fHMuY2FsbCh0aGlzLHQsbnVsbCx7ZGlyOiEwLGNyZWF0ZUZvbGRlcnM6ZX0pLHRoaXMuZmlsZXNbdF19O2Z1bmN0aW9uIGgodCl7cmV0dXJuXCJbb2JqZWN0IFJlZ0V4cF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KX12YXIgaT17bG9hZDpmdW5jdGlvbigpe3Rocm93IG5ldyBFcnJvcihcIlRoaXMgbWV0aG9kIGhhcyBiZWVuIHJlbW92ZWQgaW4gSlNaaXAgMy4wLCBwbGVhc2UgY2hlY2sgdGhlIHVwZ3JhZGUgZ3VpZGUuXCIpfSxmb3JFYWNoOmZ1bmN0aW9uKHQpe3ZhciBlLHIsaTtmb3IoZSBpbiB0aGlzLmZpbGVzKXRoaXMuZmlsZXMuaGFzT3duUHJvcGVydHkoZSkmJihpPXRoaXMuZmlsZXNbZV0sKHI9ZS5zbGljZSh0aGlzLnJvb3QubGVuZ3RoLGUubGVuZ3RoKSkmJmUuc2xpY2UoMCx0aGlzLnJvb3QubGVuZ3RoKT09PXRoaXMucm9vdCYmdChyLGkpKX0sZmlsdGVyOmZ1bmN0aW9uKHIpe3ZhciBpPVtdO3JldHVybiB0aGlzLmZvckVhY2goZnVuY3Rpb24odCxlKXtyKHQsZSkmJmkucHVzaChlKX0pLGl9LGZpbGU6ZnVuY3Rpb24odCxlLHIpe2lmKDEhPT1hcmd1bWVudHMubGVuZ3RoKXJldHVybiB0PXRoaXMucm9vdCt0LHMuY2FsbCh0aGlzLHQsZSxyKSx0aGlzO2lmKGgodCkpe3ZhciBpPXQ7cmV0dXJuIHRoaXMuZmlsdGVyKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIWUuZGlyJiZpLnRlc3QodCl9KX12YXIgbj10aGlzLmZpbGVzW3RoaXMucm9vdCt0XTtyZXR1cm4gbiYmIW4uZGlyP246bnVsbH0sZm9sZGVyOmZ1bmN0aW9uKHIpe2lmKCFyKXJldHVybiB0aGlzO2lmKGgocikpcmV0dXJuIHRoaXMuZmlsdGVyKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIGUuZGlyJiZyLnRlc3QodCl9KTt2YXIgdD10aGlzLnJvb3QrcixlPWIuY2FsbCh0aGlzLHQpLGk9dGhpcy5jbG9uZSgpO3JldHVybiBpLnJvb3Q9ZS5uYW1lLGl9LHJlbW92ZTpmdW5jdGlvbihyKXtyPXRoaXMucm9vdCtyO3ZhciB0PXRoaXMuZmlsZXNbcl07aWYodHx8KFwiL1wiIT09ci5zbGljZSgtMSkmJihyKz1cIi9cIiksdD10aGlzLmZpbGVzW3JdKSx0JiYhdC5kaXIpZGVsZXRlIHRoaXMuZmlsZXNbcl07ZWxzZSBmb3IodmFyIGU9dGhpcy5maWx0ZXIoZnVuY3Rpb24odCxlKXtyZXR1cm4gZS5uYW1lLnNsaWNlKDAsci5sZW5ndGgpPT09cn0pLGk9MDtpPGUubGVuZ3RoO2krKylkZWxldGUgdGhpcy5maWxlc1tlW2ldLm5hbWVdO3JldHVybiB0aGlzfSxnZW5lcmF0ZTpmdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIG1ldGhvZCBoYXMgYmVlbiByZW1vdmVkIGluIEpTWmlwIDMuMCwgcGxlYXNlIGNoZWNrIHRoZSB1cGdyYWRlIGd1aWRlLlwiKX0sZ2VuZXJhdGVJbnRlcm5hbFN0cmVhbTpmdW5jdGlvbih0KXt2YXIgZSxyPXt9O3RyeXtpZigocj11LmV4dGVuZCh0fHx7fSx7c3RyZWFtRmlsZXM6ITEsY29tcHJlc3Npb246XCJTVE9SRVwiLGNvbXByZXNzaW9uT3B0aW9uczpudWxsLHR5cGU6XCJcIixwbGF0Zm9ybTpcIkRPU1wiLGNvbW1lbnQ6bnVsbCxtaW1lVHlwZTpcImFwcGxpY2F0aW9uL3ppcFwiLGVuY29kZUZpbGVOYW1lOm4udXRmOGVuY29kZX0pKS50eXBlPXIudHlwZS50b0xvd2VyQ2FzZSgpLHIuY29tcHJlc3Npb249ci5jb21wcmVzc2lvbi50b1VwcGVyQ2FzZSgpLFwiYmluYXJ5c3RyaW5nXCI9PT1yLnR5cGUmJihyLnR5cGU9XCJzdHJpbmdcIiksIXIudHlwZSl0aHJvdyBuZXcgRXJyb3IoXCJObyBvdXRwdXQgdHlwZSBzcGVjaWZpZWQuXCIpO3UuY2hlY2tTdXBwb3J0KHIudHlwZSksXCJkYXJ3aW5cIiE9PXIucGxhdGZvcm0mJlwiZnJlZWJzZFwiIT09ci5wbGF0Zm9ybSYmXCJsaW51eFwiIT09ci5wbGF0Zm9ybSYmXCJzdW5vc1wiIT09ci5wbGF0Zm9ybXx8KHIucGxhdGZvcm09XCJVTklYXCIpLFwid2luMzJcIj09PXIucGxhdGZvcm0mJihyLnBsYXRmb3JtPVwiRE9TXCIpO3ZhciBpPXIuY29tbWVudHx8dGhpcy5jb21tZW50fHxcIlwiO2U9by5nZW5lcmF0ZVdvcmtlcih0aGlzLHIsaSl9Y2F0Y2godCl7KGU9bmV3IGwoXCJlcnJvclwiKSkuZXJyb3IodCl9cmV0dXJuIG5ldyBhKGUsci50eXBlfHxcInN0cmluZ1wiLHIubWltZVR5cGUpfSxnZW5lcmF0ZUFzeW5jOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuZ2VuZXJhdGVJbnRlcm5hbFN0cmVhbSh0KS5hY2N1bXVsYXRlKGUpfSxnZW5lcmF0ZU5vZGVTdHJlYW06ZnVuY3Rpb24odCxlKXtyZXR1cm4odD10fHx7fSkudHlwZXx8KHQudHlwZT1cIm5vZGVidWZmZXJcIiksdGhpcy5nZW5lcmF0ZUludGVybmFsU3RyZWFtKHQpLnRvTm9kZWpzU3RyZWFtKGUpfX07ZS5leHBvcnRzPWl9LHtcIi4vY29tcHJlc3NlZE9iamVjdFwiOjIsXCIuL2RlZmF1bHRzXCI6NSxcIi4vZ2VuZXJhdGVcIjo5LFwiLi9ub2RlanMvTm9kZWpzU3RyZWFtSW5wdXRBZGFwdGVyXCI6MTIsXCIuL25vZGVqc1V0aWxzXCI6MTQsXCIuL3N0cmVhbS9HZW5lcmljV29ya2VyXCI6MjgsXCIuL3N0cmVhbS9TdHJlYW1IZWxwZXJcIjoyOSxcIi4vdXRmOFwiOjMxLFwiLi91dGlsc1wiOjMyLFwiLi96aXBPYmplY3RcIjozNX1dLDE2OltmdW5jdGlvbih0LGUscil7ZS5leHBvcnRzPXQoXCJzdHJlYW1cIil9LHtzdHJlYW06dm9pZCAwfV0sMTc6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgaT10KFwiLi9EYXRhUmVhZGVyXCIpO2Z1bmN0aW9uIG4odCl7aS5jYWxsKHRoaXMsdCk7Zm9yKHZhciBlPTA7ZTx0aGlzLmRhdGEubGVuZ3RoO2UrKyl0W2VdPTI1NSZ0W2VdfXQoXCIuLi91dGlsc1wiKS5pbmhlcml0cyhuLGkpLG4ucHJvdG90eXBlLmJ5dGVBdD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5kYXRhW3RoaXMuemVybyt0XX0sbi5wcm90b3R5cGUubGFzdEluZGV4T2ZTaWduYXR1cmU9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXQuY2hhckNvZGVBdCgwKSxyPXQuY2hhckNvZGVBdCgxKSxpPXQuY2hhckNvZGVBdCgyKSxuPXQuY2hhckNvZGVBdCgzKSxzPXRoaXMubGVuZ3RoLTQ7MDw9czstLXMpaWYodGhpcy5kYXRhW3NdPT09ZSYmdGhpcy5kYXRhW3MrMV09PT1yJiZ0aGlzLmRhdGFbcysyXT09PWkmJnRoaXMuZGF0YVtzKzNdPT09bilyZXR1cm4gcy10aGlzLnplcm87cmV0dXJuLTF9LG4ucHJvdG90eXBlLnJlYWRBbmRDaGVja1NpZ25hdHVyZT1mdW5jdGlvbih0KXt2YXIgZT10LmNoYXJDb2RlQXQoMCkscj10LmNoYXJDb2RlQXQoMSksaT10LmNoYXJDb2RlQXQoMiksbj10LmNoYXJDb2RlQXQoMykscz10aGlzLnJlYWREYXRhKDQpO3JldHVybiBlPT09c1swXSYmcj09PXNbMV0mJmk9PT1zWzJdJiZuPT09c1szXX0sbi5wcm90b3R5cGUucmVhZERhdGE9ZnVuY3Rpb24odCl7aWYodGhpcy5jaGVja09mZnNldCh0KSwwPT09dClyZXR1cm5bXTt2YXIgZT10aGlzLmRhdGEuc2xpY2UodGhpcy56ZXJvK3RoaXMuaW5kZXgsdGhpcy56ZXJvK3RoaXMuaW5kZXgrdCk7cmV0dXJuIHRoaXMuaW5kZXgrPXQsZX0sZS5leHBvcnRzPW59LHtcIi4uL3V0aWxzXCI6MzIsXCIuL0RhdGFSZWFkZXJcIjoxOH1dLDE4OltmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGk9dChcIi4uL3V0aWxzXCIpO2Z1bmN0aW9uIG4odCl7dGhpcy5kYXRhPXQsdGhpcy5sZW5ndGg9dC5sZW5ndGgsdGhpcy5pbmRleD0wLHRoaXMuemVybz0wfW4ucHJvdG90eXBlPXtjaGVja09mZnNldDpmdW5jdGlvbih0KXt0aGlzLmNoZWNrSW5kZXgodGhpcy5pbmRleCt0KX0sY2hlY2tJbmRleDpmdW5jdGlvbih0KXtpZih0aGlzLmxlbmd0aDx0aGlzLnplcm8rdHx8dDwwKXRocm93IG5ldyBFcnJvcihcIkVuZCBvZiBkYXRhIHJlYWNoZWQgKGRhdGEgbGVuZ3RoID0gXCIrdGhpcy5sZW5ndGgrXCIsIGFza2VkIGluZGV4ID0gXCIrdCtcIikuIENvcnJ1cHRlZCB6aXAgP1wiKX0sc2V0SW5kZXg6ZnVuY3Rpb24odCl7dGhpcy5jaGVja0luZGV4KHQpLHRoaXMuaW5kZXg9dH0sc2tpcDpmdW5jdGlvbih0KXt0aGlzLnNldEluZGV4KHRoaXMuaW5kZXgrdCl9LGJ5dGVBdDpmdW5jdGlvbih0KXt9LHJlYWRJbnQ6ZnVuY3Rpb24odCl7dmFyIGUscj0wO2Zvcih0aGlzLmNoZWNrT2Zmc2V0KHQpLGU9dGhpcy5pbmRleCt0LTE7ZT49dGhpcy5pbmRleDtlLS0pcj0ocjw8OCkrdGhpcy5ieXRlQXQoZSk7cmV0dXJuIHRoaXMuaW5kZXgrPXQscn0scmVhZFN0cmluZzpmdW5jdGlvbih0KXtyZXR1cm4gaS50cmFuc2Zvcm1UbyhcInN0cmluZ1wiLHRoaXMucmVhZERhdGEodCkpfSxyZWFkRGF0YTpmdW5jdGlvbih0KXt9LGxhc3RJbmRleE9mU2lnbmF0dXJlOmZ1bmN0aW9uKHQpe30scmVhZEFuZENoZWNrU2lnbmF0dXJlOmZ1bmN0aW9uKHQpe30scmVhZERhdGU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLnJlYWRJbnQoNCk7cmV0dXJuIG5ldyBEYXRlKERhdGUuVVRDKDE5ODArKHQ+PjI1JjEyNyksKHQ+PjIxJjE1KS0xLHQ+PjE2JjMxLHQ+PjExJjMxLHQ+PjUmNjMsKDMxJnQpPDwxKSl9fSxlLmV4cG9ydHM9bn0se1wiLi4vdXRpbHNcIjozMn1dLDE5OltmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGk9dChcIi4vVWludDhBcnJheVJlYWRlclwiKTtmdW5jdGlvbiBuKHQpe2kuY2FsbCh0aGlzLHQpfXQoXCIuLi91dGlsc1wiKS5pbmhlcml0cyhuLGkpLG4ucHJvdG90eXBlLnJlYWREYXRhPWZ1bmN0aW9uKHQpe3RoaXMuY2hlY2tPZmZzZXQodCk7dmFyIGU9dGhpcy5kYXRhLnNsaWNlKHRoaXMuemVybyt0aGlzLmluZGV4LHRoaXMuemVybyt0aGlzLmluZGV4K3QpO3JldHVybiB0aGlzLmluZGV4Kz10LGV9LGUuZXhwb3J0cz1ufSx7XCIuLi91dGlsc1wiOjMyLFwiLi9VaW50OEFycmF5UmVhZGVyXCI6MjF9XSwyMDpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBpPXQoXCIuL0RhdGFSZWFkZXJcIik7ZnVuY3Rpb24gbih0KXtpLmNhbGwodGhpcyx0KX10KFwiLi4vdXRpbHNcIikuaW5oZXJpdHMobixpKSxuLnByb3RvdHlwZS5ieXRlQXQ9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuZGF0YS5jaGFyQ29kZUF0KHRoaXMuemVybyt0KX0sbi5wcm90b3R5cGUubGFzdEluZGV4T2ZTaWduYXR1cmU9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuZGF0YS5sYXN0SW5kZXhPZih0KS10aGlzLnplcm99LG4ucHJvdG90eXBlLnJlYWRBbmRDaGVja1NpZ25hdHVyZT1mdW5jdGlvbih0KXtyZXR1cm4gdD09PXRoaXMucmVhZERhdGEoNCl9LG4ucHJvdG90eXBlLnJlYWREYXRhPWZ1bmN0aW9uKHQpe3RoaXMuY2hlY2tPZmZzZXQodCk7dmFyIGU9dGhpcy5kYXRhLnNsaWNlKHRoaXMuemVybyt0aGlzLmluZGV4LHRoaXMuemVybyt0aGlzLmluZGV4K3QpO3JldHVybiB0aGlzLmluZGV4Kz10LGV9LGUuZXhwb3J0cz1ufSx7XCIuLi91dGlsc1wiOjMyLFwiLi9EYXRhUmVhZGVyXCI6MTh9XSwyMTpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBpPXQoXCIuL0FycmF5UmVhZGVyXCIpO2Z1bmN0aW9uIG4odCl7aS5jYWxsKHRoaXMsdCl9dChcIi4uL3V0aWxzXCIpLmluaGVyaXRzKG4saSksbi5wcm90b3R5cGUucmVhZERhdGE9ZnVuY3Rpb24odCl7aWYodGhpcy5jaGVja09mZnNldCh0KSwwPT09dClyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoMCk7dmFyIGU9dGhpcy5kYXRhLnN1YmFycmF5KHRoaXMuemVybyt0aGlzLmluZGV4LHRoaXMuemVybyt0aGlzLmluZGV4K3QpO3JldHVybiB0aGlzLmluZGV4Kz10LGV9LGUuZXhwb3J0cz1ufSx7XCIuLi91dGlsc1wiOjMyLFwiLi9BcnJheVJlYWRlclwiOjE3fV0sMjI6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgaT10KFwiLi4vdXRpbHNcIiksbj10KFwiLi4vc3VwcG9ydFwiKSxzPXQoXCIuL0FycmF5UmVhZGVyXCIpLGE9dChcIi4vU3RyaW5nUmVhZGVyXCIpLG89dChcIi4vTm9kZUJ1ZmZlclJlYWRlclwiKSxoPXQoXCIuL1VpbnQ4QXJyYXlSZWFkZXJcIik7ZS5leHBvcnRzPWZ1bmN0aW9uKHQpe3ZhciBlPWkuZ2V0VHlwZU9mKHQpO3JldHVybiBpLmNoZWNrU3VwcG9ydChlKSxcInN0cmluZ1wiIT09ZXx8bi51aW50OGFycmF5P1wibm9kZWJ1ZmZlclwiPT09ZT9uZXcgbyh0KTpuLnVpbnQ4YXJyYXk/bmV3IGgoaS50cmFuc2Zvcm1UbyhcInVpbnQ4YXJyYXlcIix0KSk6bmV3IHMoaS50cmFuc2Zvcm1UbyhcImFycmF5XCIsdCkpOm5ldyBhKHQpfX0se1wiLi4vc3VwcG9ydFwiOjMwLFwiLi4vdXRpbHNcIjozMixcIi4vQXJyYXlSZWFkZXJcIjoxNyxcIi4vTm9kZUJ1ZmZlclJlYWRlclwiOjE5LFwiLi9TdHJpbmdSZWFkZXJcIjoyMCxcIi4vVWludDhBcnJheVJlYWRlclwiOjIxfV0sMjM6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjtyLkxPQ0FMX0ZJTEVfSEVBREVSPVwiUEtcdTAwMDNcdTAwMDRcIixyLkNFTlRSQUxfRklMRV9IRUFERVI9XCJQS1x1MDAwMVx1MDAwMlwiLHIuQ0VOVFJBTF9ESVJFQ1RPUllfRU5EPVwiUEtcdTAwMDVcdTAwMDZcIixyLlpJUDY0X0NFTlRSQUxfRElSRUNUT1JZX0xPQ0FUT1I9XCJQS1x1MDAwNlx1MDAwN1wiLHIuWklQNjRfQ0VOVFJBTF9ESVJFQ1RPUllfRU5EPVwiUEtcdTAwMDZcdTAwMDZcIixyLkRBVEFfREVTQ1JJUFRPUj1cIlBLXHUwMDA3XFxiXCJ9LHt9XSwyNDpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBpPXQoXCIuL0dlbmVyaWNXb3JrZXJcIiksbj10KFwiLi4vdXRpbHNcIik7ZnVuY3Rpb24gcyh0KXtpLmNhbGwodGhpcyxcIkNvbnZlcnRXb3JrZXIgdG8gXCIrdCksdGhpcy5kZXN0VHlwZT10fW4uaW5oZXJpdHMocyxpKSxzLnByb3RvdHlwZS5wcm9jZXNzQ2h1bms9ZnVuY3Rpb24odCl7dGhpcy5wdXNoKHtkYXRhOm4udHJhbnNmb3JtVG8odGhpcy5kZXN0VHlwZSx0LmRhdGEpLG1ldGE6dC5tZXRhfSl9LGUuZXhwb3J0cz1zfSx7XCIuLi91dGlsc1wiOjMyLFwiLi9HZW5lcmljV29ya2VyXCI6Mjh9XSwyNTpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBpPXQoXCIuL0dlbmVyaWNXb3JrZXJcIiksbj10KFwiLi4vY3JjMzJcIik7ZnVuY3Rpb24gcygpe2kuY2FsbCh0aGlzLFwiQ3JjMzJQcm9iZVwiKSx0aGlzLndpdGhTdHJlYW1JbmZvKFwiY3JjMzJcIiwwKX10KFwiLi4vdXRpbHNcIikuaW5oZXJpdHMocyxpKSxzLnByb3RvdHlwZS5wcm9jZXNzQ2h1bms9ZnVuY3Rpb24odCl7dGhpcy5zdHJlYW1JbmZvLmNyYzMyPW4odC5kYXRhLHRoaXMuc3RyZWFtSW5mby5jcmMzMnx8MCksdGhpcy5wdXNoKHQpfSxlLmV4cG9ydHM9c30se1wiLi4vY3JjMzJcIjo0LFwiLi4vdXRpbHNcIjozMixcIi4vR2VuZXJpY1dvcmtlclwiOjI4fV0sMjY6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgaT10KFwiLi4vdXRpbHNcIiksbj10KFwiLi9HZW5lcmljV29ya2VyXCIpO2Z1bmN0aW9uIHModCl7bi5jYWxsKHRoaXMsXCJEYXRhTGVuZ3RoUHJvYmUgZm9yIFwiK3QpLHRoaXMucHJvcE5hbWU9dCx0aGlzLndpdGhTdHJlYW1JbmZvKHQsMCl9aS5pbmhlcml0cyhzLG4pLHMucHJvdG90eXBlLnByb2Nlc3NDaHVuaz1mdW5jdGlvbih0KXtpZih0KXt2YXIgZT10aGlzLnN0cmVhbUluZm9bdGhpcy5wcm9wTmFtZV18fDA7dGhpcy5zdHJlYW1JbmZvW3RoaXMucHJvcE5hbWVdPWUrdC5kYXRhLmxlbmd0aH1uLnByb3RvdHlwZS5wcm9jZXNzQ2h1bmsuY2FsbCh0aGlzLHQpfSxlLmV4cG9ydHM9c30se1wiLi4vdXRpbHNcIjozMixcIi4vR2VuZXJpY1dvcmtlclwiOjI4fV0sMjc6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgaT10KFwiLi4vdXRpbHNcIiksbj10KFwiLi9HZW5lcmljV29ya2VyXCIpO2Z1bmN0aW9uIHModCl7bi5jYWxsKHRoaXMsXCJEYXRhV29ya2VyXCIpO3ZhciBlPXRoaXM7dGhpcy5kYXRhSXNSZWFkeT0hMSx0aGlzLmluZGV4PTAsdGhpcy5tYXg9MCx0aGlzLmRhdGE9bnVsbCx0aGlzLnR5cGU9XCJcIix0aGlzLl90aWNrU2NoZWR1bGVkPSExLHQudGhlbihmdW5jdGlvbih0KXtlLmRhdGFJc1JlYWR5PSEwLGUuZGF0YT10LGUubWF4PXQmJnQubGVuZ3RofHwwLGUudHlwZT1pLmdldFR5cGVPZih0KSxlLmlzUGF1c2VkfHxlLl90aWNrQW5kUmVwZWF0KCl9LGZ1bmN0aW9uKHQpe2UuZXJyb3IodCl9KX1pLmluaGVyaXRzKHMsbikscy5wcm90b3R5cGUuY2xlYW5VcD1mdW5jdGlvbigpe24ucHJvdG90eXBlLmNsZWFuVXAuY2FsbCh0aGlzKSx0aGlzLmRhdGE9bnVsbH0scy5wcm90b3R5cGUucmVzdW1lPWZ1bmN0aW9uKCl7cmV0dXJuISFuLnByb3RvdHlwZS5yZXN1bWUuY2FsbCh0aGlzKSYmKCF0aGlzLl90aWNrU2NoZWR1bGVkJiZ0aGlzLmRhdGFJc1JlYWR5JiYodGhpcy5fdGlja1NjaGVkdWxlZD0hMCxpLmRlbGF5KHRoaXMuX3RpY2tBbmRSZXBlYXQsW10sdGhpcykpLCEwKX0scy5wcm90b3R5cGUuX3RpY2tBbmRSZXBlYXQ9ZnVuY3Rpb24oKXt0aGlzLl90aWNrU2NoZWR1bGVkPSExLHRoaXMuaXNQYXVzZWR8fHRoaXMuaXNGaW5pc2hlZHx8KHRoaXMuX3RpY2soKSx0aGlzLmlzRmluaXNoZWR8fChpLmRlbGF5KHRoaXMuX3RpY2tBbmRSZXBlYXQsW10sdGhpcyksdGhpcy5fdGlja1NjaGVkdWxlZD0hMCkpfSxzLnByb3RvdHlwZS5fdGljaz1mdW5jdGlvbigpe2lmKHRoaXMuaXNQYXVzZWR8fHRoaXMuaXNGaW5pc2hlZClyZXR1cm4hMTt2YXIgdD1udWxsLGU9TWF0aC5taW4odGhpcy5tYXgsdGhpcy5pbmRleCsxNjM4NCk7aWYodGhpcy5pbmRleD49dGhpcy5tYXgpcmV0dXJuIHRoaXMuZW5kKCk7c3dpdGNoKHRoaXMudHlwZSl7Y2FzZVwic3RyaW5nXCI6dD10aGlzLmRhdGEuc3Vic3RyaW5nKHRoaXMuaW5kZXgsZSk7YnJlYWs7Y2FzZVwidWludDhhcnJheVwiOnQ9dGhpcy5kYXRhLnN1YmFycmF5KHRoaXMuaW5kZXgsZSk7YnJlYWs7Y2FzZVwiYXJyYXlcIjpjYXNlXCJub2RlYnVmZmVyXCI6dD10aGlzLmRhdGEuc2xpY2UodGhpcy5pbmRleCxlKX1yZXR1cm4gdGhpcy5pbmRleD1lLHRoaXMucHVzaCh7ZGF0YTp0LG1ldGE6e3BlcmNlbnQ6dGhpcy5tYXg/dGhpcy5pbmRleC90aGlzLm1heCoxMDA6MH19KX0sZS5leHBvcnRzPXN9LHtcIi4uL3V0aWxzXCI6MzIsXCIuL0dlbmVyaWNXb3JrZXJcIjoyOH1dLDI4OltmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaSh0KXt0aGlzLm5hbWU9dHx8XCJkZWZhdWx0XCIsdGhpcy5zdHJlYW1JbmZvPXt9LHRoaXMuZ2VuZXJhdGVkRXJyb3I9bnVsbCx0aGlzLmV4dHJhU3RyZWFtSW5mbz17fSx0aGlzLmlzUGF1c2VkPSEwLHRoaXMuaXNGaW5pc2hlZD0hMSx0aGlzLmlzTG9ja2VkPSExLHRoaXMuX2xpc3RlbmVycz17ZGF0YTpbXSxlbmQ6W10sZXJyb3I6W119LHRoaXMucHJldmlvdXM9bnVsbH1pLnByb3RvdHlwZT17cHVzaDpmdW5jdGlvbih0KXt0aGlzLmVtaXQoXCJkYXRhXCIsdCl9LGVuZDpmdW5jdGlvbigpe2lmKHRoaXMuaXNGaW5pc2hlZClyZXR1cm4hMTt0aGlzLmZsdXNoKCk7dHJ5e3RoaXMuZW1pdChcImVuZFwiKSx0aGlzLmNsZWFuVXAoKSx0aGlzLmlzRmluaXNoZWQ9ITB9Y2F0Y2godCl7dGhpcy5lbWl0KFwiZXJyb3JcIix0KX1yZXR1cm4hMH0sZXJyb3I6ZnVuY3Rpb24odCl7cmV0dXJuIXRoaXMuaXNGaW5pc2hlZCYmKHRoaXMuaXNQYXVzZWQ/dGhpcy5nZW5lcmF0ZWRFcnJvcj10Oih0aGlzLmlzRmluaXNoZWQ9ITAsdGhpcy5lbWl0KFwiZXJyb3JcIix0KSx0aGlzLnByZXZpb3VzJiZ0aGlzLnByZXZpb3VzLmVycm9yKHQpLHRoaXMuY2xlYW5VcCgpKSwhMCl9LG9uOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuX2xpc3RlbmVyc1t0XS5wdXNoKGUpLHRoaXN9LGNsZWFuVXA6ZnVuY3Rpb24oKXt0aGlzLnN0cmVhbUluZm89dGhpcy5nZW5lcmF0ZWRFcnJvcj10aGlzLmV4dHJhU3RyZWFtSW5mbz1udWxsLHRoaXMuX2xpc3RlbmVycz1bXX0sZW1pdDpmdW5jdGlvbih0LGUpe2lmKHRoaXMuX2xpc3RlbmVyc1t0XSlmb3IodmFyIHI9MDtyPHRoaXMuX2xpc3RlbmVyc1t0XS5sZW5ndGg7cisrKXRoaXMuX2xpc3RlbmVyc1t0XVtyXS5jYWxsKHRoaXMsZSl9LHBpcGU6ZnVuY3Rpb24odCl7cmV0dXJuIHQucmVnaXN0ZXJQcmV2aW91cyh0aGlzKX0scmVnaXN0ZXJQcmV2aW91czpmdW5jdGlvbih0KXtpZih0aGlzLmlzTG9ja2VkKXRocm93IG5ldyBFcnJvcihcIlRoZSBzdHJlYW0gJ1wiK3RoaXMrXCInIGhhcyBhbHJlYWR5IGJlZW4gdXNlZC5cIik7dGhpcy5zdHJlYW1JbmZvPXQuc3RyZWFtSW5mbyx0aGlzLm1lcmdlU3RyZWFtSW5mbygpLHRoaXMucHJldmlvdXM9dDt2YXIgZT10aGlzO3JldHVybiB0Lm9uKFwiZGF0YVwiLGZ1bmN0aW9uKHQpe2UucHJvY2Vzc0NodW5rKHQpfSksdC5vbihcImVuZFwiLGZ1bmN0aW9uKCl7ZS5lbmQoKX0pLHQub24oXCJlcnJvclwiLGZ1bmN0aW9uKHQpe2UuZXJyb3IodCl9KSx0aGlzfSxwYXVzZTpmdW5jdGlvbigpe3JldHVybiF0aGlzLmlzUGF1c2VkJiYhdGhpcy5pc0ZpbmlzaGVkJiYodGhpcy5pc1BhdXNlZD0hMCx0aGlzLnByZXZpb3VzJiZ0aGlzLnByZXZpb3VzLnBhdXNlKCksITApfSxyZXN1bWU6ZnVuY3Rpb24oKXtpZighdGhpcy5pc1BhdXNlZHx8dGhpcy5pc0ZpbmlzaGVkKXJldHVybiExO3ZhciB0PXRoaXMuaXNQYXVzZWQ9ITE7cmV0dXJuIHRoaXMuZ2VuZXJhdGVkRXJyb3ImJih0aGlzLmVycm9yKHRoaXMuZ2VuZXJhdGVkRXJyb3IpLHQ9ITApLHRoaXMucHJldmlvdXMmJnRoaXMucHJldmlvdXMucmVzdW1lKCksIXR9LGZsdXNoOmZ1bmN0aW9uKCl7fSxwcm9jZXNzQ2h1bms6ZnVuY3Rpb24odCl7dGhpcy5wdXNoKHQpfSx3aXRoU3RyZWFtSW5mbzpmdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLmV4dHJhU3RyZWFtSW5mb1t0XT1lLHRoaXMubWVyZ2VTdHJlYW1JbmZvKCksdGhpc30sbWVyZ2VTdHJlYW1JbmZvOmZ1bmN0aW9uKCl7Zm9yKHZhciB0IGluIHRoaXMuZXh0cmFTdHJlYW1JbmZvKXRoaXMuZXh0cmFTdHJlYW1JbmZvLmhhc093blByb3BlcnR5KHQpJiYodGhpcy5zdHJlYW1JbmZvW3RdPXRoaXMuZXh0cmFTdHJlYW1JbmZvW3RdKX0sbG9jazpmdW5jdGlvbigpe2lmKHRoaXMuaXNMb2NrZWQpdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0cmVhbSAnXCIrdGhpcytcIicgaGFzIGFscmVhZHkgYmVlbiB1c2VkLlwiKTt0aGlzLmlzTG9ja2VkPSEwLHRoaXMucHJldmlvdXMmJnRoaXMucHJldmlvdXMubG9jaygpfSx0b1N0cmluZzpmdW5jdGlvbigpe3ZhciB0PVwiV29ya2VyIFwiK3RoaXMubmFtZTtyZXR1cm4gdGhpcy5wcmV2aW91cz90aGlzLnByZXZpb3VzK1wiIC0+IFwiK3Q6dH19LGUuZXhwb3J0cz1pfSx7fV0sMjk6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgaD10KFwiLi4vdXRpbHNcIiksbj10KFwiLi9Db252ZXJ0V29ya2VyXCIpLHM9dChcIi4vR2VuZXJpY1dvcmtlclwiKSx1PXQoXCIuLi9iYXNlNjRcIiksaT10KFwiLi4vc3VwcG9ydFwiKSxhPXQoXCIuLi9leHRlcm5hbFwiKSxvPW51bGw7aWYoaS5ub2Rlc3RyZWFtKXRyeXtvPXQoXCIuLi9ub2RlanMvTm9kZWpzU3RyZWFtT3V0cHV0QWRhcHRlclwiKX1jYXRjaCh0KXt9ZnVuY3Rpb24gbCh0LG8pe3JldHVybiBuZXcgYS5Qcm9taXNlKGZ1bmN0aW9uKGUscil7dmFyIGk9W10sbj10Ll9pbnRlcm5hbFR5cGUscz10Ll9vdXRwdXRUeXBlLGE9dC5fbWltZVR5cGU7dC5vbihcImRhdGFcIixmdW5jdGlvbih0LGUpe2kucHVzaCh0KSxvJiZvKGUpfSkub24oXCJlcnJvclwiLGZ1bmN0aW9uKHQpe2k9W10scih0KX0pLm9uKFwiZW5kXCIsZnVuY3Rpb24oKXt0cnl7dmFyIHQ9ZnVuY3Rpb24odCxlLHIpe3N3aXRjaCh0KXtjYXNlXCJibG9iXCI6cmV0dXJuIGgubmV3QmxvYihoLnRyYW5zZm9ybVRvKFwiYXJyYXlidWZmZXJcIixlKSxyKTtjYXNlXCJiYXNlNjRcIjpyZXR1cm4gdS5lbmNvZGUoZSk7ZGVmYXVsdDpyZXR1cm4gaC50cmFuc2Zvcm1Ubyh0LGUpfX0ocyxmdW5jdGlvbih0LGUpe3ZhciByLGk9MCxuPW51bGwscz0wO2ZvcihyPTA7cjxlLmxlbmd0aDtyKyspcys9ZVtyXS5sZW5ndGg7c3dpdGNoKHQpe2Nhc2VcInN0cmluZ1wiOnJldHVybiBlLmpvaW4oXCJcIik7Y2FzZVwiYXJyYXlcIjpyZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSxlKTtjYXNlXCJ1aW50OGFycmF5XCI6Zm9yKG49bmV3IFVpbnQ4QXJyYXkocykscj0wO3I8ZS5sZW5ndGg7cisrKW4uc2V0KGVbcl0saSksaSs9ZVtyXS5sZW5ndGg7cmV0dXJuIG47Y2FzZVwibm9kZWJ1ZmZlclwiOnJldHVybiBCdWZmZXIuY29uY2F0KGUpO2RlZmF1bHQ6dGhyb3cgbmV3IEVycm9yKFwiY29uY2F0IDogdW5zdXBwb3J0ZWQgdHlwZSAnXCIrdCtcIidcIil9fShuLGkpLGEpO2UodCl9Y2F0Y2godCl7cih0KX1pPVtdfSkucmVzdW1lKCl9KX1mdW5jdGlvbiBmKHQsZSxyKXt2YXIgaT1lO3N3aXRjaChlKXtjYXNlXCJibG9iXCI6Y2FzZVwiYXJyYXlidWZmZXJcIjppPVwidWludDhhcnJheVwiO2JyZWFrO2Nhc2VcImJhc2U2NFwiOmk9XCJzdHJpbmdcIn10cnl7dGhpcy5faW50ZXJuYWxUeXBlPWksdGhpcy5fb3V0cHV0VHlwZT1lLHRoaXMuX21pbWVUeXBlPXIsaC5jaGVja1N1cHBvcnQoaSksdGhpcy5fd29ya2VyPXQucGlwZShuZXcgbihpKSksdC5sb2NrKCl9Y2F0Y2godCl7dGhpcy5fd29ya2VyPW5ldyBzKFwiZXJyb3JcIiksdGhpcy5fd29ya2VyLmVycm9yKHQpfX1mLnByb3RvdHlwZT17YWNjdW11bGF0ZTpmdW5jdGlvbih0KXtyZXR1cm4gbCh0aGlzLHQpfSxvbjpmdW5jdGlvbih0LGUpe3ZhciByPXRoaXM7cmV0dXJuXCJkYXRhXCI9PT10P3RoaXMuX3dvcmtlci5vbih0LGZ1bmN0aW9uKHQpe2UuY2FsbChyLHQuZGF0YSx0Lm1ldGEpfSk6dGhpcy5fd29ya2VyLm9uKHQsZnVuY3Rpb24oKXtoLmRlbGF5KGUsYXJndW1lbnRzLHIpfSksdGhpc30scmVzdW1lOmZ1bmN0aW9uKCl7cmV0dXJuIGguZGVsYXkodGhpcy5fd29ya2VyLnJlc3VtZSxbXSx0aGlzLl93b3JrZXIpLHRoaXN9LHBhdXNlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3dvcmtlci5wYXVzZSgpLHRoaXN9LHRvTm9kZWpzU3RyZWFtOmZ1bmN0aW9uKHQpe2lmKGguY2hlY2tTdXBwb3J0KFwibm9kZXN0cmVhbVwiKSxcIm5vZGVidWZmZXJcIiE9PXRoaXMuX291dHB1dFR5cGUpdGhyb3cgbmV3IEVycm9yKHRoaXMuX291dHB1dFR5cGUrXCIgaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIG1ldGhvZFwiKTtyZXR1cm4gbmV3IG8odGhpcyx7b2JqZWN0TW9kZTpcIm5vZGVidWZmZXJcIiE9PXRoaXMuX291dHB1dFR5cGV9LHQpfX0sZS5leHBvcnRzPWZ9LHtcIi4uL2Jhc2U2NFwiOjEsXCIuLi9leHRlcm5hbFwiOjYsXCIuLi9ub2RlanMvTm9kZWpzU3RyZWFtT3V0cHV0QWRhcHRlclwiOjEzLFwiLi4vc3VwcG9ydFwiOjMwLFwiLi4vdXRpbHNcIjozMixcIi4vQ29udmVydFdvcmtlclwiOjI0LFwiLi9HZW5lcmljV29ya2VyXCI6Mjh9XSwzMDpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO2lmKHIuYmFzZTY0PSEwLHIuYXJyYXk9ITAsci5zdHJpbmc9ITAsci5hcnJheWJ1ZmZlcj1cInVuZGVmaW5lZFwiIT10eXBlb2YgQXJyYXlCdWZmZXImJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBVaW50OEFycmF5LHIubm9kZWJ1ZmZlcj1cInVuZGVmaW5lZFwiIT10eXBlb2YgQnVmZmVyLHIudWludDhhcnJheT1cInVuZGVmaW5lZFwiIT10eXBlb2YgVWludDhBcnJheSxcInVuZGVmaW5lZFwiPT10eXBlb2YgQXJyYXlCdWZmZXIpci5ibG9iPSExO2Vsc2V7dmFyIGk9bmV3IEFycmF5QnVmZmVyKDApO3RyeXtyLmJsb2I9MD09PW5ldyBCbG9iKFtpXSx7dHlwZTpcImFwcGxpY2F0aW9uL3ppcFwifSkuc2l6ZX1jYXRjaCh0KXt0cnl7dmFyIG49bmV3KHNlbGYuQmxvYkJ1aWxkZXJ8fHNlbGYuV2ViS2l0QmxvYkJ1aWxkZXJ8fHNlbGYuTW96QmxvYkJ1aWxkZXJ8fHNlbGYuTVNCbG9iQnVpbGRlcik7bi5hcHBlbmQoaSksci5ibG9iPTA9PT1uLmdldEJsb2IoXCJhcHBsaWNhdGlvbi96aXBcIikuc2l6ZX1jYXRjaCh0KXtyLmJsb2I9ITF9fX10cnl7ci5ub2Rlc3RyZWFtPSEhdChcInJlYWRhYmxlLXN0cmVhbVwiKS5SZWFkYWJsZX1jYXRjaCh0KXtyLm5vZGVzdHJlYW09ITF9fSx7XCJyZWFkYWJsZS1zdHJlYW1cIjoxNn1dLDMxOltmdW5jdGlvbih0LGUscyl7XCJ1c2Ugc3RyaWN0XCI7Zm9yKHZhciBvPXQoXCIuL3V0aWxzXCIpLGg9dChcIi4vc3VwcG9ydFwiKSxyPXQoXCIuL25vZGVqc1V0aWxzXCIpLGk9dChcIi4vc3RyZWFtL0dlbmVyaWNXb3JrZXJcIiksdT1uZXcgQXJyYXkoMjU2KSxuPTA7bjwyNTY7bisrKXVbbl09MjUyPD1uPzY6MjQ4PD1uPzU6MjQwPD1uPzQ6MjI0PD1uPzM6MTkyPD1uPzI6MTt1WzI1NF09dVsyNTRdPTE7ZnVuY3Rpb24gYSgpe2kuY2FsbCh0aGlzLFwidXRmLTggZGVjb2RlXCIpLHRoaXMubGVmdE92ZXI9bnVsbH1mdW5jdGlvbiBsKCl7aS5jYWxsKHRoaXMsXCJ1dGYtOCBlbmNvZGVcIil9cy51dGY4ZW5jb2RlPWZ1bmN0aW9uKHQpe3JldHVybiBoLm5vZGVidWZmZXI/ci5uZXdCdWZmZXJGcm9tKHQsXCJ1dGYtOFwiKTpmdW5jdGlvbih0KXt2YXIgZSxyLGksbixzLGE9dC5sZW5ndGgsbz0wO2ZvcihuPTA7bjxhO24rKyk1NTI5Nj09KDY0NTEyJihyPXQuY2hhckNvZGVBdChuKSkpJiZuKzE8YSYmNTYzMjA9PSg2NDUxMiYoaT10LmNoYXJDb2RlQXQobisxKSkpJiYocj02NTUzNisoci01NTI5Njw8MTApKyhpLTU2MzIwKSxuKyspLG8rPXI8MTI4PzE6cjwyMDQ4PzI6cjw2NTUzNj8zOjQ7Zm9yKGU9aC51aW50OGFycmF5P25ldyBVaW50OEFycmF5KG8pOm5ldyBBcnJheShvKSxuPXM9MDtzPG87bisrKTU1Mjk2PT0oNjQ1MTImKHI9dC5jaGFyQ29kZUF0KG4pKSkmJm4rMTxhJiY1NjMyMD09KDY0NTEyJihpPXQuY2hhckNvZGVBdChuKzEpKSkmJihyPTY1NTM2KyhyLTU1Mjk2PDwxMCkrKGktNTYzMjApLG4rKykscjwxMjg/ZVtzKytdPXI6KHI8MjA0OD9lW3MrK109MTkyfHI+Pj42OihyPDY1NTM2P2VbcysrXT0yMjR8cj4+PjEyOihlW3MrK109MjQwfHI+Pj4xOCxlW3MrK109MTI4fHI+Pj4xMiY2MyksZVtzKytdPTEyOHxyPj4+NiY2MyksZVtzKytdPTEyOHw2MyZyKTtyZXR1cm4gZX0odCl9LHMudXRmOGRlY29kZT1mdW5jdGlvbih0KXtyZXR1cm4gaC5ub2RlYnVmZmVyP28udHJhbnNmb3JtVG8oXCJub2RlYnVmZmVyXCIsdCkudG9TdHJpbmcoXCJ1dGYtOFwiKTpmdW5jdGlvbih0KXt2YXIgZSxyLGksbixzPXQubGVuZ3RoLGE9bmV3IEFycmF5KDIqcyk7Zm9yKGU9cj0wO2U8czspaWYoKGk9dFtlKytdKTwxMjgpYVtyKytdPWk7ZWxzZSBpZig0PChuPXVbaV0pKWFbcisrXT02NTUzMyxlKz1uLTE7ZWxzZXtmb3IoaSY9Mj09PW4/MzE6Mz09PW4/MTU6NzsxPG4mJmU8czspaT1pPDw2fDYzJnRbZSsrXSxuLS07MTxuP2FbcisrXT02NTUzMzppPDY1NTM2P2FbcisrXT1pOihpLT02NTUzNixhW3IrK109NTUyOTZ8aT4+MTAmMTAyMyxhW3IrK109NTYzMjB8MTAyMyZpKX1yZXR1cm4gYS5sZW5ndGghPT1yJiYoYS5zdWJhcnJheT9hPWEuc3ViYXJyYXkoMCxyKTphLmxlbmd0aD1yKSxvLmFwcGx5RnJvbUNoYXJDb2RlKGEpfSh0PW8udHJhbnNmb3JtVG8oaC51aW50OGFycmF5P1widWludDhhcnJheVwiOlwiYXJyYXlcIix0KSl9LG8uaW5oZXJpdHMoYSxpKSxhLnByb3RvdHlwZS5wcm9jZXNzQ2h1bms9ZnVuY3Rpb24odCl7dmFyIGU9by50cmFuc2Zvcm1UbyhoLnVpbnQ4YXJyYXk/XCJ1aW50OGFycmF5XCI6XCJhcnJheVwiLHQuZGF0YSk7aWYodGhpcy5sZWZ0T3ZlciYmdGhpcy5sZWZ0T3Zlci5sZW5ndGgpe2lmKGgudWludDhhcnJheSl7dmFyIHI9ZTsoZT1uZXcgVWludDhBcnJheShyLmxlbmd0aCt0aGlzLmxlZnRPdmVyLmxlbmd0aCkpLnNldCh0aGlzLmxlZnRPdmVyLDApLGUuc2V0KHIsdGhpcy5sZWZ0T3Zlci5sZW5ndGgpfWVsc2UgZT10aGlzLmxlZnRPdmVyLmNvbmNhdChlKTt0aGlzLmxlZnRPdmVyPW51bGx9dmFyIGk9ZnVuY3Rpb24odCxlKXt2YXIgcjtmb3IoKGU9ZXx8dC5sZW5ndGgpPnQubGVuZ3RoJiYoZT10Lmxlbmd0aCkscj1lLTE7MDw9ciYmMTI4PT0oMTkyJnRbcl0pOylyLS07cmV0dXJuIHI8MD9lOjA9PT1yP2U6cit1W3Rbcl1dPmU/cjplfShlKSxuPWU7aSE9PWUubGVuZ3RoJiYoaC51aW50OGFycmF5PyhuPWUuc3ViYXJyYXkoMCxpKSx0aGlzLmxlZnRPdmVyPWUuc3ViYXJyYXkoaSxlLmxlbmd0aCkpOihuPWUuc2xpY2UoMCxpKSx0aGlzLmxlZnRPdmVyPWUuc2xpY2UoaSxlLmxlbmd0aCkpKSx0aGlzLnB1c2goe2RhdGE6cy51dGY4ZGVjb2RlKG4pLG1ldGE6dC5tZXRhfSl9LGEucHJvdG90eXBlLmZsdXNoPWZ1bmN0aW9uKCl7dGhpcy5sZWZ0T3ZlciYmdGhpcy5sZWZ0T3Zlci5sZW5ndGgmJih0aGlzLnB1c2goe2RhdGE6cy51dGY4ZGVjb2RlKHRoaXMubGVmdE92ZXIpLG1ldGE6e319KSx0aGlzLmxlZnRPdmVyPW51bGwpfSxzLlV0ZjhEZWNvZGVXb3JrZXI9YSxvLmluaGVyaXRzKGwsaSksbC5wcm90b3R5cGUucHJvY2Vzc0NodW5rPWZ1bmN0aW9uKHQpe3RoaXMucHVzaCh7ZGF0YTpzLnV0ZjhlbmNvZGUodC5kYXRhKSxtZXRhOnQubWV0YX0pfSxzLlV0ZjhFbmNvZGVXb3JrZXI9bH0se1wiLi9ub2RlanNVdGlsc1wiOjE0LFwiLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiOjI4LFwiLi9zdXBwb3J0XCI6MzAsXCIuL3V0aWxzXCI6MzJ9XSwzMjpbZnVuY3Rpb24odCxlLGEpe1widXNlIHN0cmljdFwiO3ZhciBvPXQoXCIuL3N1cHBvcnRcIiksaD10KFwiLi9iYXNlNjRcIikscj10KFwiLi9ub2RlanNVdGlsc1wiKSxpPXQoXCJzZXQtaW1tZWRpYXRlLXNoaW1cIiksdT10KFwiLi9leHRlcm5hbFwiKTtmdW5jdGlvbiBuKHQpe3JldHVybiB0fWZ1bmN0aW9uIGwodCxlKXtmb3IodmFyIHI9MDtyPHQubGVuZ3RoOysrcillW3JdPTI1NSZ0LmNoYXJDb2RlQXQocik7cmV0dXJuIGV9YS5uZXdCbG9iPWZ1bmN0aW9uKGUscil7YS5jaGVja1N1cHBvcnQoXCJibG9iXCIpO3RyeXtyZXR1cm4gbmV3IEJsb2IoW2VdLHt0eXBlOnJ9KX1jYXRjaCh0KXt0cnl7dmFyIGk9bmV3KHNlbGYuQmxvYkJ1aWxkZXJ8fHNlbGYuV2ViS2l0QmxvYkJ1aWxkZXJ8fHNlbGYuTW96QmxvYkJ1aWxkZXJ8fHNlbGYuTVNCbG9iQnVpbGRlcik7cmV0dXJuIGkuYXBwZW5kKGUpLGkuZ2V0QmxvYihyKX1jYXRjaCh0KXt0aHJvdyBuZXcgRXJyb3IoXCJCdWcgOiBjYW4ndCBjb25zdHJ1Y3QgdGhlIEJsb2IuXCIpfX19O3ZhciBzPXtzdHJpbmdpZnlCeUNodW5rOmZ1bmN0aW9uKHQsZSxyKXt2YXIgaT1bXSxuPTAscz10Lmxlbmd0aDtpZihzPD1yKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsdCk7Zm9yKDtuPHM7KVwiYXJyYXlcIj09PWV8fFwibm9kZWJ1ZmZlclwiPT09ZT9pLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLHQuc2xpY2UobixNYXRoLm1pbihuK3IscykpKSk6aS5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCx0LnN1YmFycmF5KG4sTWF0aC5taW4obityLHMpKSkpLG4rPXI7cmV0dXJuIGkuam9pbihcIlwiKX0sc3RyaW5naWZ5QnlDaGFyOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1cIlwiLHI9MDtyPHQubGVuZ3RoO3IrKyllKz1TdHJpbmcuZnJvbUNoYXJDb2RlKHRbcl0pO3JldHVybiBlfSxhcHBseUNhbkJlVXNlZDp7dWludDhhcnJheTpmdW5jdGlvbigpe3RyeXtyZXR1cm4gby51aW50OGFycmF5JiYxPT09U3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLG5ldyBVaW50OEFycmF5KDEpKS5sZW5ndGh9Y2F0Y2godCl7cmV0dXJuITF9fSgpLG5vZGVidWZmZXI6ZnVuY3Rpb24oKXt0cnl7cmV0dXJuIG8ubm9kZWJ1ZmZlciYmMT09PVN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCxyLmFsbG9jQnVmZmVyKDEpKS5sZW5ndGh9Y2F0Y2godCl7cmV0dXJuITF9fSgpfX07ZnVuY3Rpb24gZih0KXt2YXIgZT02NTUzNixyPWEuZ2V0VHlwZU9mKHQpLGk9ITA7aWYoXCJ1aW50OGFycmF5XCI9PT1yP2k9cy5hcHBseUNhbkJlVXNlZC51aW50OGFycmF5Olwibm9kZWJ1ZmZlclwiPT09ciYmKGk9cy5hcHBseUNhbkJlVXNlZC5ub2RlYnVmZmVyKSxpKWZvcig7MTxlOyl0cnl7cmV0dXJuIHMuc3RyaW5naWZ5QnlDaHVuayh0LHIsZSl9Y2F0Y2godCl7ZT1NYXRoLmZsb29yKGUvMil9cmV0dXJuIHMuc3RyaW5naWZ5QnlDaGFyKHQpfWZ1bmN0aW9uIGQodCxlKXtmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKyllW3JdPXRbcl07cmV0dXJuIGV9YS5hcHBseUZyb21DaGFyQ29kZT1mO3ZhciBjPXt9O2Muc3RyaW5nPXtzdHJpbmc6bixhcnJheTpmdW5jdGlvbih0KXtyZXR1cm4gbCh0LG5ldyBBcnJheSh0Lmxlbmd0aCkpfSxhcnJheWJ1ZmZlcjpmdW5jdGlvbih0KXtyZXR1cm4gYy5zdHJpbmcudWludDhhcnJheSh0KS5idWZmZXJ9LHVpbnQ4YXJyYXk6ZnVuY3Rpb24odCl7cmV0dXJuIGwodCxuZXcgVWludDhBcnJheSh0Lmxlbmd0aCkpfSxub2RlYnVmZmVyOmZ1bmN0aW9uKHQpe3JldHVybiBsKHQsci5hbGxvY0J1ZmZlcih0Lmxlbmd0aCkpfX0sYy5hcnJheT17c3RyaW5nOmYsYXJyYXk6bixhcnJheWJ1ZmZlcjpmdW5jdGlvbih0KXtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkodCkuYnVmZmVyfSx1aW50OGFycmF5OmZ1bmN0aW9uKHQpe3JldHVybiBuZXcgVWludDhBcnJheSh0KX0sbm9kZWJ1ZmZlcjpmdW5jdGlvbih0KXtyZXR1cm4gci5uZXdCdWZmZXJGcm9tKHQpfX0sYy5hcnJheWJ1ZmZlcj17c3RyaW5nOmZ1bmN0aW9uKHQpe3JldHVybiBmKG5ldyBVaW50OEFycmF5KHQpKX0sYXJyYXk6ZnVuY3Rpb24odCl7cmV0dXJuIGQobmV3IFVpbnQ4QXJyYXkodCksbmV3IEFycmF5KHQuYnl0ZUxlbmd0aCkpfSxhcnJheWJ1ZmZlcjpuLHVpbnQ4YXJyYXk6ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBVaW50OEFycmF5KHQpfSxub2RlYnVmZmVyOmZ1bmN0aW9uKHQpe3JldHVybiByLm5ld0J1ZmZlckZyb20obmV3IFVpbnQ4QXJyYXkodCkpfX0sYy51aW50OGFycmF5PXtzdHJpbmc6ZixhcnJheTpmdW5jdGlvbih0KXtyZXR1cm4gZCh0LG5ldyBBcnJheSh0Lmxlbmd0aCkpfSxhcnJheWJ1ZmZlcjpmdW5jdGlvbih0KXtyZXR1cm4gdC5idWZmZXJ9LHVpbnQ4YXJyYXk6bixub2RlYnVmZmVyOmZ1bmN0aW9uKHQpe3JldHVybiByLm5ld0J1ZmZlckZyb20odCl9fSxjLm5vZGVidWZmZXI9e3N0cmluZzpmLGFycmF5OmZ1bmN0aW9uKHQpe3JldHVybiBkKHQsbmV3IEFycmF5KHQubGVuZ3RoKSl9LGFycmF5YnVmZmVyOmZ1bmN0aW9uKHQpe3JldHVybiBjLm5vZGVidWZmZXIudWludDhhcnJheSh0KS5idWZmZXJ9LHVpbnQ4YXJyYXk6ZnVuY3Rpb24odCl7cmV0dXJuIGQodCxuZXcgVWludDhBcnJheSh0Lmxlbmd0aCkpfSxub2RlYnVmZmVyOm59LGEudHJhbnNmb3JtVG89ZnVuY3Rpb24odCxlKXtpZihlPWV8fFwiXCIsIXQpcmV0dXJuIGU7YS5jaGVja1N1cHBvcnQodCk7dmFyIHI9YS5nZXRUeXBlT2YoZSk7cmV0dXJuIGNbcl1bdF0oZSl9LGEuZ2V0VHlwZU9mPWZ1bmN0aW9uKHQpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiB0P1wic3RyaW5nXCI6XCJbb2JqZWN0IEFycmF5XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHQpP1wiYXJyYXlcIjpvLm5vZGVidWZmZXImJnIuaXNCdWZmZXIodCk/XCJub2RlYnVmZmVyXCI6by51aW50OGFycmF5JiZ0IGluc3RhbmNlb2YgVWludDhBcnJheT9cInVpbnQ4YXJyYXlcIjpvLmFycmF5YnVmZmVyJiZ0IGluc3RhbmNlb2YgQXJyYXlCdWZmZXI/XCJhcnJheWJ1ZmZlclwiOnZvaWQgMH0sYS5jaGVja1N1cHBvcnQ9ZnVuY3Rpb24odCl7aWYoIW9bdC50b0xvd2VyQ2FzZSgpXSl0aHJvdyBuZXcgRXJyb3IodCtcIiBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgcGxhdGZvcm1cIil9LGEuTUFYX1ZBTFVFXzE2QklUUz02NTUzNSxhLk1BWF9WQUxVRV8zMkJJVFM9LTEsYS5wcmV0dHk9ZnVuY3Rpb24odCl7dmFyIGUscixpPVwiXCI7Zm9yKHI9MDtyPCh0fHxcIlwiKS5sZW5ndGg7cisrKWkrPVwiXFxcXHhcIisoKGU9dC5jaGFyQ29kZUF0KHIpKTwxNj9cIjBcIjpcIlwiKStlLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO3JldHVybiBpfSxhLmRlbGF5PWZ1bmN0aW9uKHQsZSxyKXtpKGZ1bmN0aW9uKCl7dC5hcHBseShyfHxudWxsLGV8fFtdKX0pfSxhLmluaGVyaXRzPWZ1bmN0aW9uKHQsZSl7ZnVuY3Rpb24gcigpe31yLnByb3RvdHlwZT1lLnByb3RvdHlwZSx0LnByb3RvdHlwZT1uZXcgcn0sYS5leHRlbmQ9ZnVuY3Rpb24oKXt2YXIgdCxlLHI9e307Zm9yKHQ9MDt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKWZvcihlIGluIGFyZ3VtZW50c1t0XSlhcmd1bWVudHNbdF0uaGFzT3duUHJvcGVydHkoZSkmJnZvaWQgMD09PXJbZV0mJihyW2VdPWFyZ3VtZW50c1t0XVtlXSk7cmV0dXJuIHJ9LGEucHJlcGFyZUNvbnRlbnQ9ZnVuY3Rpb24ocix0LGksbixzKXtyZXR1cm4gdS5Qcm9taXNlLnJlc29sdmUodCkudGhlbihmdW5jdGlvbihpKXtyZXR1cm4gby5ibG9iJiYoaSBpbnN0YW5jZW9mIEJsb2J8fC0xIT09W1wiW29iamVjdCBGaWxlXVwiLFwiW29iamVjdCBCbG9iXVwiXS5pbmRleE9mKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpKSkpJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgRmlsZVJlYWRlcj9uZXcgdS5Qcm9taXNlKGZ1bmN0aW9uKGUscil7dmFyIHQ9bmV3IEZpbGVSZWFkZXI7dC5vbmxvYWQ9ZnVuY3Rpb24odCl7ZSh0LnRhcmdldC5yZXN1bHQpfSx0Lm9uZXJyb3I9ZnVuY3Rpb24odCl7cih0LnRhcmdldC5lcnJvcil9LHQucmVhZEFzQXJyYXlCdWZmZXIoaSl9KTppfSkudGhlbihmdW5jdGlvbih0KXt2YXIgZT1hLmdldFR5cGVPZih0KTtyZXR1cm4gZT8oXCJhcnJheWJ1ZmZlclwiPT09ZT90PWEudHJhbnNmb3JtVG8oXCJ1aW50OGFycmF5XCIsdCk6XCJzdHJpbmdcIj09PWUmJihzP3Q9aC5kZWNvZGUodCk6aSYmITAhPT1uJiYodD1mdW5jdGlvbih0KXtyZXR1cm4gbCh0LG8udWludDhhcnJheT9uZXcgVWludDhBcnJheSh0Lmxlbmd0aCk6bmV3IEFycmF5KHQubGVuZ3RoKSl9KHQpKSksdCk6dS5Qcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJDYW4ndCByZWFkIHRoZSBkYXRhIG9mICdcIityK1wiJy4gSXMgaXQgaW4gYSBzdXBwb3J0ZWQgSmF2YVNjcmlwdCB0eXBlIChTdHJpbmcsIEJsb2IsIEFycmF5QnVmZmVyLCBldGMpID9cIikpfSl9fSx7XCIuL2Jhc2U2NFwiOjEsXCIuL2V4dGVybmFsXCI6NixcIi4vbm9kZWpzVXRpbHNcIjoxNCxcIi4vc3VwcG9ydFwiOjMwLFwic2V0LWltbWVkaWF0ZS1zaGltXCI6NTR9XSwzMzpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBpPXQoXCIuL3JlYWRlci9yZWFkZXJGb3JcIiksbj10KFwiLi91dGlsc1wiKSxzPXQoXCIuL3NpZ25hdHVyZVwiKSxhPXQoXCIuL3ppcEVudHJ5XCIpLG89KHQoXCIuL3V0ZjhcIiksdChcIi4vc3VwcG9ydFwiKSk7ZnVuY3Rpb24gaCh0KXt0aGlzLmZpbGVzPVtdLHRoaXMubG9hZE9wdGlvbnM9dH1oLnByb3RvdHlwZT17Y2hlY2tTaWduYXR1cmU6ZnVuY3Rpb24odCl7aWYoIXRoaXMucmVhZGVyLnJlYWRBbmRDaGVja1NpZ25hdHVyZSh0KSl7dGhpcy5yZWFkZXIuaW5kZXgtPTQ7dmFyIGU9dGhpcy5yZWFkZXIucmVhZFN0cmluZyg0KTt0aHJvdyBuZXcgRXJyb3IoXCJDb3JydXB0ZWQgemlwIG9yIGJ1ZzogdW5leHBlY3RlZCBzaWduYXR1cmUgKFwiK24ucHJldHR5KGUpK1wiLCBleHBlY3RlZCBcIituLnByZXR0eSh0KStcIilcIil9fSxpc1NpZ25hdHVyZTpmdW5jdGlvbih0LGUpe3ZhciByPXRoaXMucmVhZGVyLmluZGV4O3RoaXMucmVhZGVyLnNldEluZGV4KHQpO3ZhciBpPXRoaXMucmVhZGVyLnJlYWRTdHJpbmcoNCk9PT1lO3JldHVybiB0aGlzLnJlYWRlci5zZXRJbmRleChyKSxpfSxyZWFkQmxvY2tFbmRPZkNlbnRyYWw6ZnVuY3Rpb24oKXt0aGlzLmRpc2tOdW1iZXI9dGhpcy5yZWFkZXIucmVhZEludCgyKSx0aGlzLmRpc2tXaXRoQ2VudHJhbERpclN0YXJ0PXRoaXMucmVhZGVyLnJlYWRJbnQoMiksdGhpcy5jZW50cmFsRGlyUmVjb3Jkc09uVGhpc0Rpc2s9dGhpcy5yZWFkZXIucmVhZEludCgyKSx0aGlzLmNlbnRyYWxEaXJSZWNvcmRzPXRoaXMucmVhZGVyLnJlYWRJbnQoMiksdGhpcy5jZW50cmFsRGlyU2l6ZT10aGlzLnJlYWRlci5yZWFkSW50KDQpLHRoaXMuY2VudHJhbERpck9mZnNldD10aGlzLnJlYWRlci5yZWFkSW50KDQpLHRoaXMuemlwQ29tbWVudExlbmd0aD10aGlzLnJlYWRlci5yZWFkSW50KDIpO3ZhciB0PXRoaXMucmVhZGVyLnJlYWREYXRhKHRoaXMuemlwQ29tbWVudExlbmd0aCksZT1vLnVpbnQ4YXJyYXk/XCJ1aW50OGFycmF5XCI6XCJhcnJheVwiLHI9bi50cmFuc2Zvcm1UbyhlLHQpO3RoaXMuemlwQ29tbWVudD10aGlzLmxvYWRPcHRpb25zLmRlY29kZUZpbGVOYW1lKHIpfSxyZWFkQmxvY2taaXA2NEVuZE9mQ2VudHJhbDpmdW5jdGlvbigpe3RoaXMuemlwNjRFbmRPZkNlbnRyYWxTaXplPXRoaXMucmVhZGVyLnJlYWRJbnQoOCksdGhpcy5yZWFkZXIuc2tpcCg0KSx0aGlzLmRpc2tOdW1iZXI9dGhpcy5yZWFkZXIucmVhZEludCg0KSx0aGlzLmRpc2tXaXRoQ2VudHJhbERpclN0YXJ0PXRoaXMucmVhZGVyLnJlYWRJbnQoNCksdGhpcy5jZW50cmFsRGlyUmVjb3Jkc09uVGhpc0Rpc2s9dGhpcy5yZWFkZXIucmVhZEludCg4KSx0aGlzLmNlbnRyYWxEaXJSZWNvcmRzPXRoaXMucmVhZGVyLnJlYWRJbnQoOCksdGhpcy5jZW50cmFsRGlyU2l6ZT10aGlzLnJlYWRlci5yZWFkSW50KDgpLHRoaXMuY2VudHJhbERpck9mZnNldD10aGlzLnJlYWRlci5yZWFkSW50KDgpLHRoaXMuemlwNjRFeHRlbnNpYmxlRGF0YT17fTtmb3IodmFyIHQsZSxyLGk9dGhpcy56aXA2NEVuZE9mQ2VudHJhbFNpemUtNDQ7MDxpOyl0PXRoaXMucmVhZGVyLnJlYWRJbnQoMiksZT10aGlzLnJlYWRlci5yZWFkSW50KDQpLHI9dGhpcy5yZWFkZXIucmVhZERhdGEoZSksdGhpcy56aXA2NEV4dGVuc2libGVEYXRhW3RdPXtpZDp0LGxlbmd0aDplLHZhbHVlOnJ9fSxyZWFkQmxvY2taaXA2NEVuZE9mQ2VudHJhbExvY2F0b3I6ZnVuY3Rpb24oKXtpZih0aGlzLmRpc2tXaXRoWmlwNjRDZW50cmFsRGlyU3RhcnQ9dGhpcy5yZWFkZXIucmVhZEludCg0KSx0aGlzLnJlbGF0aXZlT2Zmc2V0RW5kT2ZaaXA2NENlbnRyYWxEaXI9dGhpcy5yZWFkZXIucmVhZEludCg4KSx0aGlzLmRpc2tzQ291bnQ9dGhpcy5yZWFkZXIucmVhZEludCg0KSwxPHRoaXMuZGlza3NDb3VudCl0aHJvdyBuZXcgRXJyb3IoXCJNdWx0aS12b2x1bWVzIHppcCBhcmUgbm90IHN1cHBvcnRlZFwiKX0scmVhZExvY2FsRmlsZXM6ZnVuY3Rpb24oKXt2YXIgdCxlO2Zvcih0PTA7dDx0aGlzLmZpbGVzLmxlbmd0aDt0KyspZT10aGlzLmZpbGVzW3RdLHRoaXMucmVhZGVyLnNldEluZGV4KGUubG9jYWxIZWFkZXJPZmZzZXQpLHRoaXMuY2hlY2tTaWduYXR1cmUocy5MT0NBTF9GSUxFX0hFQURFUiksZS5yZWFkTG9jYWxQYXJ0KHRoaXMucmVhZGVyKSxlLmhhbmRsZVVURjgoKSxlLnByb2Nlc3NBdHRyaWJ1dGVzKCl9LHJlYWRDZW50cmFsRGlyOmZ1bmN0aW9uKCl7dmFyIHQ7Zm9yKHRoaXMucmVhZGVyLnNldEluZGV4KHRoaXMuY2VudHJhbERpck9mZnNldCk7dGhpcy5yZWFkZXIucmVhZEFuZENoZWNrU2lnbmF0dXJlKHMuQ0VOVFJBTF9GSUxFX0hFQURFUik7KSh0PW5ldyBhKHt6aXA2NDp0aGlzLnppcDY0fSx0aGlzLmxvYWRPcHRpb25zKSkucmVhZENlbnRyYWxQYXJ0KHRoaXMucmVhZGVyKSx0aGlzLmZpbGVzLnB1c2godCk7aWYodGhpcy5jZW50cmFsRGlyUmVjb3JkcyE9PXRoaXMuZmlsZXMubGVuZ3RoJiYwIT09dGhpcy5jZW50cmFsRGlyUmVjb3JkcyYmMD09PXRoaXMuZmlsZXMubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcIkNvcnJ1cHRlZCB6aXAgb3IgYnVnOiBleHBlY3RlZCBcIit0aGlzLmNlbnRyYWxEaXJSZWNvcmRzK1wiIHJlY29yZHMgaW4gY2VudHJhbCBkaXIsIGdvdCBcIit0aGlzLmZpbGVzLmxlbmd0aCl9LHJlYWRFbmRPZkNlbnRyYWw6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLnJlYWRlci5sYXN0SW5kZXhPZlNpZ25hdHVyZShzLkNFTlRSQUxfRElSRUNUT1JZX0VORCk7aWYodDwwKXRocm93IXRoaXMuaXNTaWduYXR1cmUoMCxzLkxPQ0FMX0ZJTEVfSEVBREVSKT9uZXcgRXJyb3IoXCJDYW4ndCBmaW5kIGVuZCBvZiBjZW50cmFsIGRpcmVjdG9yeSA6IGlzIHRoaXMgYSB6aXAgZmlsZSA/IElmIGl0IGlzLCBzZWUgaHR0cHM6Ly9zdHVrLmdpdGh1Yi5pby9qc3ppcC9kb2N1bWVudGF0aW9uL2hvd3RvL3JlYWRfemlwLmh0bWxcIik6bmV3IEVycm9yKFwiQ29ycnVwdGVkIHppcDogY2FuJ3QgZmluZCBlbmQgb2YgY2VudHJhbCBkaXJlY3RvcnlcIik7dGhpcy5yZWFkZXIuc2V0SW5kZXgodCk7dmFyIGU9dDtpZih0aGlzLmNoZWNrU2lnbmF0dXJlKHMuQ0VOVFJBTF9ESVJFQ1RPUllfRU5EKSx0aGlzLnJlYWRCbG9ja0VuZE9mQ2VudHJhbCgpLHRoaXMuZGlza051bWJlcj09PW4uTUFYX1ZBTFVFXzE2QklUU3x8dGhpcy5kaXNrV2l0aENlbnRyYWxEaXJTdGFydD09PW4uTUFYX1ZBTFVFXzE2QklUU3x8dGhpcy5jZW50cmFsRGlyUmVjb3Jkc09uVGhpc0Rpc2s9PT1uLk1BWF9WQUxVRV8xNkJJVFN8fHRoaXMuY2VudHJhbERpclJlY29yZHM9PT1uLk1BWF9WQUxVRV8xNkJJVFN8fHRoaXMuY2VudHJhbERpclNpemU9PT1uLk1BWF9WQUxVRV8zMkJJVFN8fHRoaXMuY2VudHJhbERpck9mZnNldD09PW4uTUFYX1ZBTFVFXzMyQklUUyl7aWYodGhpcy56aXA2ND0hMCwodD10aGlzLnJlYWRlci5sYXN0SW5kZXhPZlNpZ25hdHVyZShzLlpJUDY0X0NFTlRSQUxfRElSRUNUT1JZX0xPQ0FUT1IpKTwwKXRocm93IG5ldyBFcnJvcihcIkNvcnJ1cHRlZCB6aXA6IGNhbid0IGZpbmQgdGhlIFpJUDY0IGVuZCBvZiBjZW50cmFsIGRpcmVjdG9yeSBsb2NhdG9yXCIpO2lmKHRoaXMucmVhZGVyLnNldEluZGV4KHQpLHRoaXMuY2hlY2tTaWduYXR1cmUocy5aSVA2NF9DRU5UUkFMX0RJUkVDVE9SWV9MT0NBVE9SKSx0aGlzLnJlYWRCbG9ja1ppcDY0RW5kT2ZDZW50cmFsTG9jYXRvcigpLCF0aGlzLmlzU2lnbmF0dXJlKHRoaXMucmVsYXRpdmVPZmZzZXRFbmRPZlppcDY0Q2VudHJhbERpcixzLlpJUDY0X0NFTlRSQUxfRElSRUNUT1JZX0VORCkmJih0aGlzLnJlbGF0aXZlT2Zmc2V0RW5kT2ZaaXA2NENlbnRyYWxEaXI9dGhpcy5yZWFkZXIubGFzdEluZGV4T2ZTaWduYXR1cmUocy5aSVA2NF9DRU5UUkFMX0RJUkVDVE9SWV9FTkQpLHRoaXMucmVsYXRpdmVPZmZzZXRFbmRPZlppcDY0Q2VudHJhbERpcjwwKSl0aHJvdyBuZXcgRXJyb3IoXCJDb3JydXB0ZWQgemlwOiBjYW4ndCBmaW5kIHRoZSBaSVA2NCBlbmQgb2YgY2VudHJhbCBkaXJlY3RvcnlcIik7dGhpcy5yZWFkZXIuc2V0SW5kZXgodGhpcy5yZWxhdGl2ZU9mZnNldEVuZE9mWmlwNjRDZW50cmFsRGlyKSx0aGlzLmNoZWNrU2lnbmF0dXJlKHMuWklQNjRfQ0VOVFJBTF9ESVJFQ1RPUllfRU5EKSx0aGlzLnJlYWRCbG9ja1ppcDY0RW5kT2ZDZW50cmFsKCl9dmFyIHI9dGhpcy5jZW50cmFsRGlyT2Zmc2V0K3RoaXMuY2VudHJhbERpclNpemU7dGhpcy56aXA2NCYmKHIrPTIwLHIrPTEyK3RoaXMuemlwNjRFbmRPZkNlbnRyYWxTaXplKTt2YXIgaT1lLXI7aWYoMDxpKXRoaXMuaXNTaWduYXR1cmUoZSxzLkNFTlRSQUxfRklMRV9IRUFERVIpfHwodGhpcy5yZWFkZXIuemVybz1pKTtlbHNlIGlmKGk8MCl0aHJvdyBuZXcgRXJyb3IoXCJDb3JydXB0ZWQgemlwOiBtaXNzaW5nIFwiK01hdGguYWJzKGkpK1wiIGJ5dGVzLlwiKX0scHJlcGFyZVJlYWRlcjpmdW5jdGlvbih0KXt0aGlzLnJlYWRlcj1pKHQpfSxsb2FkOmZ1bmN0aW9uKHQpe3RoaXMucHJlcGFyZVJlYWRlcih0KSx0aGlzLnJlYWRFbmRPZkNlbnRyYWwoKSx0aGlzLnJlYWRDZW50cmFsRGlyKCksdGhpcy5yZWFkTG9jYWxGaWxlcygpfX0sZS5leHBvcnRzPWh9LHtcIi4vcmVhZGVyL3JlYWRlckZvclwiOjIyLFwiLi9zaWduYXR1cmVcIjoyMyxcIi4vc3VwcG9ydFwiOjMwLFwiLi91dGY4XCI6MzEsXCIuL3V0aWxzXCI6MzIsXCIuL3ppcEVudHJ5XCI6MzR9XSwzNDpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBpPXQoXCIuL3JlYWRlci9yZWFkZXJGb3JcIikscz10KFwiLi91dGlsc1wiKSxuPXQoXCIuL2NvbXByZXNzZWRPYmplY3RcIiksYT10KFwiLi9jcmMzMlwiKSxvPXQoXCIuL3V0ZjhcIiksaD10KFwiLi9jb21wcmVzc2lvbnNcIiksdT10KFwiLi9zdXBwb3J0XCIpO2Z1bmN0aW9uIGwodCxlKXt0aGlzLm9wdGlvbnM9dCx0aGlzLmxvYWRPcHRpb25zPWV9bC5wcm90b3R5cGU9e2lzRW5jcnlwdGVkOmZ1bmN0aW9uKCl7cmV0dXJuIDE9PSgxJnRoaXMuYml0RmxhZyl9LHVzZVVURjg6ZnVuY3Rpb24oKXtyZXR1cm4gMjA0OD09KDIwNDgmdGhpcy5iaXRGbGFnKX0scmVhZExvY2FsUGFydDpmdW5jdGlvbih0KXt2YXIgZSxyO2lmKHQuc2tpcCgyMiksdGhpcy5maWxlTmFtZUxlbmd0aD10LnJlYWRJbnQoMikscj10LnJlYWRJbnQoMiksdGhpcy5maWxlTmFtZT10LnJlYWREYXRhKHRoaXMuZmlsZU5hbWVMZW5ndGgpLHQuc2tpcChyKSwtMT09PXRoaXMuY29tcHJlc3NlZFNpemV8fC0xPT09dGhpcy51bmNvbXByZXNzZWRTaXplKXRocm93IG5ldyBFcnJvcihcIkJ1ZyBvciBjb3JydXB0ZWQgemlwIDogZGlkbid0IGdldCBlbm91Z2ggaW5mb3JtYXRpb24gZnJvbSB0aGUgY2VudHJhbCBkaXJlY3RvcnkgKGNvbXByZXNzZWRTaXplID09PSAtMSB8fCB1bmNvbXByZXNzZWRTaXplID09PSAtMSlcIik7aWYobnVsbD09PShlPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZSBpbiBoKWlmKGguaGFzT3duUHJvcGVydHkoZSkmJmhbZV0ubWFnaWM9PT10KXJldHVybiBoW2VdO3JldHVybiBudWxsfSh0aGlzLmNvbXByZXNzaW9uTWV0aG9kKSkpdGhyb3cgbmV3IEVycm9yKFwiQ29ycnVwdGVkIHppcCA6IGNvbXByZXNzaW9uIFwiK3MucHJldHR5KHRoaXMuY29tcHJlc3Npb25NZXRob2QpK1wiIHVua25vd24gKGlubmVyIGZpbGUgOiBcIitzLnRyYW5zZm9ybVRvKFwic3RyaW5nXCIsdGhpcy5maWxlTmFtZSkrXCIpXCIpO3RoaXMuZGVjb21wcmVzc2VkPW5ldyBuKHRoaXMuY29tcHJlc3NlZFNpemUsdGhpcy51bmNvbXByZXNzZWRTaXplLHRoaXMuY3JjMzIsZSx0LnJlYWREYXRhKHRoaXMuY29tcHJlc3NlZFNpemUpKX0scmVhZENlbnRyYWxQYXJ0OmZ1bmN0aW9uKHQpe3RoaXMudmVyc2lvbk1hZGVCeT10LnJlYWRJbnQoMiksdC5za2lwKDIpLHRoaXMuYml0RmxhZz10LnJlYWRJbnQoMiksdGhpcy5jb21wcmVzc2lvbk1ldGhvZD10LnJlYWRTdHJpbmcoMiksdGhpcy5kYXRlPXQucmVhZERhdGUoKSx0aGlzLmNyYzMyPXQucmVhZEludCg0KSx0aGlzLmNvbXByZXNzZWRTaXplPXQucmVhZEludCg0KSx0aGlzLnVuY29tcHJlc3NlZFNpemU9dC5yZWFkSW50KDQpO3ZhciBlPXQucmVhZEludCgyKTtpZih0aGlzLmV4dHJhRmllbGRzTGVuZ3RoPXQucmVhZEludCgyKSx0aGlzLmZpbGVDb21tZW50TGVuZ3RoPXQucmVhZEludCgyKSx0aGlzLmRpc2tOdW1iZXJTdGFydD10LnJlYWRJbnQoMiksdGhpcy5pbnRlcm5hbEZpbGVBdHRyaWJ1dGVzPXQucmVhZEludCgyKSx0aGlzLmV4dGVybmFsRmlsZUF0dHJpYnV0ZXM9dC5yZWFkSW50KDQpLHRoaXMubG9jYWxIZWFkZXJPZmZzZXQ9dC5yZWFkSW50KDQpLHRoaXMuaXNFbmNyeXB0ZWQoKSl0aHJvdyBuZXcgRXJyb3IoXCJFbmNyeXB0ZWQgemlwIGFyZSBub3Qgc3VwcG9ydGVkXCIpO3Quc2tpcChlKSx0aGlzLnJlYWRFeHRyYUZpZWxkcyh0KSx0aGlzLnBhcnNlWklQNjRFeHRyYUZpZWxkKHQpLHRoaXMuZmlsZUNvbW1lbnQ9dC5yZWFkRGF0YSh0aGlzLmZpbGVDb21tZW50TGVuZ3RoKX0scHJvY2Vzc0F0dHJpYnV0ZXM6ZnVuY3Rpb24oKXt0aGlzLnVuaXhQZXJtaXNzaW9ucz1udWxsLHRoaXMuZG9zUGVybWlzc2lvbnM9bnVsbDt2YXIgdD10aGlzLnZlcnNpb25NYWRlQnk+Pjg7dGhpcy5kaXI9ISEoMTYmdGhpcy5leHRlcm5hbEZpbGVBdHRyaWJ1dGVzKSwwPT10JiYodGhpcy5kb3NQZXJtaXNzaW9ucz02MyZ0aGlzLmV4dGVybmFsRmlsZUF0dHJpYnV0ZXMpLDM9PXQmJih0aGlzLnVuaXhQZXJtaXNzaW9ucz10aGlzLmV4dGVybmFsRmlsZUF0dHJpYnV0ZXM+PjE2JjY1NTM1KSx0aGlzLmRpcnx8XCIvXCIhPT10aGlzLmZpbGVOYW1lU3RyLnNsaWNlKC0xKXx8KHRoaXMuZGlyPSEwKX0scGFyc2VaSVA2NEV4dHJhRmllbGQ6ZnVuY3Rpb24odCl7aWYodGhpcy5leHRyYUZpZWxkc1sxXSl7dmFyIGU9aSh0aGlzLmV4dHJhRmllbGRzWzFdLnZhbHVlKTt0aGlzLnVuY29tcHJlc3NlZFNpemU9PT1zLk1BWF9WQUxVRV8zMkJJVFMmJih0aGlzLnVuY29tcHJlc3NlZFNpemU9ZS5yZWFkSW50KDgpKSx0aGlzLmNvbXByZXNzZWRTaXplPT09cy5NQVhfVkFMVUVfMzJCSVRTJiYodGhpcy5jb21wcmVzc2VkU2l6ZT1lLnJlYWRJbnQoOCkpLHRoaXMubG9jYWxIZWFkZXJPZmZzZXQ9PT1zLk1BWF9WQUxVRV8zMkJJVFMmJih0aGlzLmxvY2FsSGVhZGVyT2Zmc2V0PWUucmVhZEludCg4KSksdGhpcy5kaXNrTnVtYmVyU3RhcnQ9PT1zLk1BWF9WQUxVRV8zMkJJVFMmJih0aGlzLmRpc2tOdW1iZXJTdGFydD1lLnJlYWRJbnQoNCkpfX0scmVhZEV4dHJhRmllbGRzOmZ1bmN0aW9uKHQpe3ZhciBlLHIsaSxuPXQuaW5kZXgrdGhpcy5leHRyYUZpZWxkc0xlbmd0aDtmb3IodGhpcy5leHRyYUZpZWxkc3x8KHRoaXMuZXh0cmFGaWVsZHM9e30pO3QuaW5kZXgrNDxuOyllPXQucmVhZEludCgyKSxyPXQucmVhZEludCgyKSxpPXQucmVhZERhdGEociksdGhpcy5leHRyYUZpZWxkc1tlXT17aWQ6ZSxsZW5ndGg6cix2YWx1ZTppfTt0LnNldEluZGV4KG4pfSxoYW5kbGVVVEY4OmZ1bmN0aW9uKCl7dmFyIHQ9dS51aW50OGFycmF5P1widWludDhhcnJheVwiOlwiYXJyYXlcIjtpZih0aGlzLnVzZVVURjgoKSl0aGlzLmZpbGVOYW1lU3RyPW8udXRmOGRlY29kZSh0aGlzLmZpbGVOYW1lKSx0aGlzLmZpbGVDb21tZW50U3RyPW8udXRmOGRlY29kZSh0aGlzLmZpbGVDb21tZW50KTtlbHNle3ZhciBlPXRoaXMuZmluZEV4dHJhRmllbGRVbmljb2RlUGF0aCgpO2lmKG51bGwhPT1lKXRoaXMuZmlsZU5hbWVTdHI9ZTtlbHNle3ZhciByPXMudHJhbnNmb3JtVG8odCx0aGlzLmZpbGVOYW1lKTt0aGlzLmZpbGVOYW1lU3RyPXRoaXMubG9hZE9wdGlvbnMuZGVjb2RlRmlsZU5hbWUocil9dmFyIGk9dGhpcy5maW5kRXh0cmFGaWVsZFVuaWNvZGVDb21tZW50KCk7aWYobnVsbCE9PWkpdGhpcy5maWxlQ29tbWVudFN0cj1pO2Vsc2V7dmFyIG49cy50cmFuc2Zvcm1Ubyh0LHRoaXMuZmlsZUNvbW1lbnQpO3RoaXMuZmlsZUNvbW1lbnRTdHI9dGhpcy5sb2FkT3B0aW9ucy5kZWNvZGVGaWxlTmFtZShuKX19fSxmaW5kRXh0cmFGaWVsZFVuaWNvZGVQYXRoOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5leHRyYUZpZWxkc1syODc4OV07aWYodCl7dmFyIGU9aSh0LnZhbHVlKTtyZXR1cm4gMSE9PWUucmVhZEludCgxKT9udWxsOmEodGhpcy5maWxlTmFtZSkhPT1lLnJlYWRJbnQoNCk/bnVsbDpvLnV0ZjhkZWNvZGUoZS5yZWFkRGF0YSh0Lmxlbmd0aC01KSl9cmV0dXJuIG51bGx9LGZpbmRFeHRyYUZpZWxkVW5pY29kZUNvbW1lbnQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmV4dHJhRmllbGRzWzI1NDYxXTtpZih0KXt2YXIgZT1pKHQudmFsdWUpO3JldHVybiAxIT09ZS5yZWFkSW50KDEpP251bGw6YSh0aGlzLmZpbGVDb21tZW50KSE9PWUucmVhZEludCg0KT9udWxsOm8udXRmOGRlY29kZShlLnJlYWREYXRhKHQubGVuZ3RoLTUpKX1yZXR1cm4gbnVsbH19LGUuZXhwb3J0cz1sfSx7XCIuL2NvbXByZXNzZWRPYmplY3RcIjoyLFwiLi9jb21wcmVzc2lvbnNcIjozLFwiLi9jcmMzMlwiOjQsXCIuL3JlYWRlci9yZWFkZXJGb3JcIjoyMixcIi4vc3VwcG9ydFwiOjMwLFwiLi91dGY4XCI6MzEsXCIuL3V0aWxzXCI6MzJ9XSwzNTpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGkodCxlLHIpe3RoaXMubmFtZT10LHRoaXMuZGlyPXIuZGlyLHRoaXMuZGF0ZT1yLmRhdGUsdGhpcy5jb21tZW50PXIuY29tbWVudCx0aGlzLnVuaXhQZXJtaXNzaW9ucz1yLnVuaXhQZXJtaXNzaW9ucyx0aGlzLmRvc1Blcm1pc3Npb25zPXIuZG9zUGVybWlzc2lvbnMsdGhpcy5fZGF0YT1lLHRoaXMuX2RhdGFCaW5hcnk9ci5iaW5hcnksdGhpcy5vcHRpb25zPXtjb21wcmVzc2lvbjpyLmNvbXByZXNzaW9uLGNvbXByZXNzaW9uT3B0aW9uczpyLmNvbXByZXNzaW9uT3B0aW9uc319dmFyIHM9dChcIi4vc3RyZWFtL1N0cmVhbUhlbHBlclwiKSxuPXQoXCIuL3N0cmVhbS9EYXRhV29ya2VyXCIpLGE9dChcIi4vdXRmOFwiKSxvPXQoXCIuL2NvbXByZXNzZWRPYmplY3RcIiksaD10KFwiLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiKTtpLnByb3RvdHlwZT17aW50ZXJuYWxTdHJlYW06ZnVuY3Rpb24odCl7dmFyIGU9bnVsbCxyPVwic3RyaW5nXCI7dHJ5e2lmKCF0KXRocm93IG5ldyBFcnJvcihcIk5vIG91dHB1dCB0eXBlIHNwZWNpZmllZC5cIik7dmFyIGk9XCJzdHJpbmdcIj09PShyPXQudG9Mb3dlckNhc2UoKSl8fFwidGV4dFwiPT09cjtcImJpbmFyeXN0cmluZ1wiIT09ciYmXCJ0ZXh0XCIhPT1yfHwocj1cInN0cmluZ1wiKSxlPXRoaXMuX2RlY29tcHJlc3NXb3JrZXIoKTt2YXIgbj0hdGhpcy5fZGF0YUJpbmFyeTtuJiYhaSYmKGU9ZS5waXBlKG5ldyBhLlV0ZjhFbmNvZGVXb3JrZXIpKSwhbiYmaSYmKGU9ZS5waXBlKG5ldyBhLlV0ZjhEZWNvZGVXb3JrZXIpKX1jYXRjaCh0KXsoZT1uZXcgaChcImVycm9yXCIpKS5lcnJvcih0KX1yZXR1cm4gbmV3IHMoZSxyLFwiXCIpfSxhc3luYzpmdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLmludGVybmFsU3RyZWFtKHQpLmFjY3VtdWxhdGUoZSl9LG5vZGVTdHJlYW06ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5pbnRlcm5hbFN0cmVhbSh0fHxcIm5vZGVidWZmZXJcIikudG9Ob2RlanNTdHJlYW0oZSl9LF9jb21wcmVzc1dvcmtlcjpmdW5jdGlvbih0LGUpe2lmKHRoaXMuX2RhdGEgaW5zdGFuY2VvZiBvJiZ0aGlzLl9kYXRhLmNvbXByZXNzaW9uLm1hZ2ljPT09dC5tYWdpYylyZXR1cm4gdGhpcy5fZGF0YS5nZXRDb21wcmVzc2VkV29ya2VyKCk7dmFyIHI9dGhpcy5fZGVjb21wcmVzc1dvcmtlcigpO3JldHVybiB0aGlzLl9kYXRhQmluYXJ5fHwocj1yLnBpcGUobmV3IGEuVXRmOEVuY29kZVdvcmtlcikpLG8uY3JlYXRlV29ya2VyRnJvbShyLHQsZSl9LF9kZWNvbXByZXNzV29ya2VyOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2RhdGEgaW5zdGFuY2VvZiBvP3RoaXMuX2RhdGEuZ2V0Q29udGVudFdvcmtlcigpOnRoaXMuX2RhdGEgaW5zdGFuY2VvZiBoP3RoaXMuX2RhdGE6bmV3IG4odGhpcy5fZGF0YSl9fTtmb3IodmFyIHU9W1wiYXNUZXh0XCIsXCJhc0JpbmFyeVwiLFwiYXNOb2RlQnVmZmVyXCIsXCJhc1VpbnQ4QXJyYXlcIixcImFzQXJyYXlCdWZmZXJcIl0sbD1mdW5jdGlvbigpe3Rocm93IG5ldyBFcnJvcihcIlRoaXMgbWV0aG9kIGhhcyBiZWVuIHJlbW92ZWQgaW4gSlNaaXAgMy4wLCBwbGVhc2UgY2hlY2sgdGhlIHVwZ3JhZGUgZ3VpZGUuXCIpfSxmPTA7Zjx1Lmxlbmd0aDtmKyspaS5wcm90b3R5cGVbdVtmXV09bDtlLmV4cG9ydHM9aX0se1wiLi9jb21wcmVzc2VkT2JqZWN0XCI6MixcIi4vc3RyZWFtL0RhdGFXb3JrZXJcIjoyNyxcIi4vc3RyZWFtL0dlbmVyaWNXb3JrZXJcIjoyOCxcIi4vc3RyZWFtL1N0cmVhbUhlbHBlclwiOjI5LFwiLi91dGY4XCI6MzF9XSwzNjpbZnVuY3Rpb24odCxsLGUpeyhmdW5jdGlvbihlKXtcInVzZSBzdHJpY3RcIjt2YXIgcixpLHQ9ZS5NdXRhdGlvbk9ic2VydmVyfHxlLldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7aWYodCl7dmFyIG49MCxzPW5ldyB0KHUpLGE9ZS5kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcIlwiKTtzLm9ic2VydmUoYSx7Y2hhcmFjdGVyRGF0YTohMH0pLHI9ZnVuY3Rpb24oKXthLmRhdGE9bj0rK24lMn19ZWxzZSBpZihlLnNldEltbWVkaWF0ZXx8dm9pZCAwPT09ZS5NZXNzYWdlQ2hhbm5lbClyPVwiZG9jdW1lbnRcImluIGUmJlwib25yZWFkeXN0YXRlY2hhbmdlXCJpbiBlLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik/ZnVuY3Rpb24oKXt2YXIgdD1lLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7dC5vbnJlYWR5c3RhdGVjaGFuZ2U9ZnVuY3Rpb24oKXt1KCksdC5vbnJlYWR5c3RhdGVjaGFuZ2U9bnVsbCx0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodCksdD1udWxsfSxlLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCh0KX06ZnVuY3Rpb24oKXtzZXRUaW1lb3V0KHUsMCl9O2Vsc2V7dmFyIG89bmV3IGUuTWVzc2FnZUNoYW5uZWw7by5wb3J0MS5vbm1lc3NhZ2U9dSxyPWZ1bmN0aW9uKCl7by5wb3J0Mi5wb3N0TWVzc2FnZSgwKX19dmFyIGg9W107ZnVuY3Rpb24gdSgpe3ZhciB0LGU7aT0hMDtmb3IodmFyIHI9aC5sZW5ndGg7cjspe2ZvcihlPWgsaD1bXSx0PS0xOysrdDxyOyllW3RdKCk7cj1oLmxlbmd0aH1pPSExfWwuZXhwb3J0cz1mdW5jdGlvbih0KXsxIT09aC5wdXNoKHQpfHxpfHxyKCl9fSkuY2FsbCh0aGlzLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6e30pfSx7fV0sMzc6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj10KFwiaW1tZWRpYXRlXCIpO2Z1bmN0aW9uIHUoKXt9dmFyIGw9e30scz1bXCJSRUpFQ1RFRFwiXSxhPVtcIkZVTEZJTExFRFwiXSxpPVtcIlBFTkRJTkdcIl07ZnVuY3Rpb24gbyh0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXRocm93IG5ldyBUeXBlRXJyb3IoXCJyZXNvbHZlciBtdXN0IGJlIGEgZnVuY3Rpb25cIik7dGhpcy5zdGF0ZT1pLHRoaXMucXVldWU9W10sdGhpcy5vdXRjb21lPXZvaWQgMCx0IT09dSYmYyh0aGlzLHQpfWZ1bmN0aW9uIGgodCxlLHIpe3RoaXMucHJvbWlzZT10LFwiZnVuY3Rpb25cIj09dHlwZW9mIGUmJih0aGlzLm9uRnVsZmlsbGVkPWUsdGhpcy5jYWxsRnVsZmlsbGVkPXRoaXMub3RoZXJDYWxsRnVsZmlsbGVkKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiByJiYodGhpcy5vblJlamVjdGVkPXIsdGhpcy5jYWxsUmVqZWN0ZWQ9dGhpcy5vdGhlckNhbGxSZWplY3RlZCl9ZnVuY3Rpb24gZihlLHIsaSl7bihmdW5jdGlvbigpe3ZhciB0O3RyeXt0PXIoaSl9Y2F0Y2godCl7cmV0dXJuIGwucmVqZWN0KGUsdCl9dD09PWU/bC5yZWplY3QoZSxuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlc29sdmUgcHJvbWlzZSB3aXRoIGl0c2VsZlwiKSk6bC5yZXNvbHZlKGUsdCl9KX1mdW5jdGlvbiBkKHQpe3ZhciBlPXQmJnQudGhlbjtpZih0JiYoXCJvYmplY3RcIj09dHlwZW9mIHR8fFwiZnVuY3Rpb25cIj09dHlwZW9mIHQpJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKXJldHVybiBmdW5jdGlvbigpe2UuYXBwbHkodCxhcmd1bWVudHMpfX1mdW5jdGlvbiBjKGUsdCl7dmFyIHI9ITE7ZnVuY3Rpb24gaSh0KXtyfHwocj0hMCxsLnJlamVjdChlLHQpKX1mdW5jdGlvbiBuKHQpe3J8fChyPSEwLGwucmVzb2x2ZShlLHQpKX12YXIgcz1wKGZ1bmN0aW9uKCl7dChuLGkpfSk7XCJlcnJvclwiPT09cy5zdGF0dXMmJmkocy52YWx1ZSl9ZnVuY3Rpb24gcCh0LGUpe3ZhciByPXt9O3RyeXtyLnZhbHVlPXQoZSksci5zdGF0dXM9XCJzdWNjZXNzXCJ9Y2F0Y2godCl7ci5zdGF0dXM9XCJlcnJvclwiLHIudmFsdWU9dH1yZXR1cm4gcn0oZS5leHBvcnRzPW8pLnByb3RvdHlwZS5maW5hbGx5PWZ1bmN0aW9uKGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUpcmV0dXJuIHRoaXM7dmFyIHI9dGhpcy5jb25zdHJ1Y3RvcjtyZXR1cm4gdGhpcy50aGVuKGZ1bmN0aW9uKHQpe3JldHVybiByLnJlc29sdmUoZSgpKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIHR9KX0sZnVuY3Rpb24odCl7cmV0dXJuIHIucmVzb2x2ZShlKCkpLnRoZW4oZnVuY3Rpb24oKXt0aHJvdyB0fSl9KX0sby5wcm90b3R5cGUuY2F0Y2g9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhlbihudWxsLHQpfSxvLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKHQsZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCYmdGhpcy5zdGF0ZT09PWF8fFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJnRoaXMuc3RhdGU9PT1zKXJldHVybiB0aGlzO3ZhciByPW5ldyB0aGlzLmNvbnN0cnVjdG9yKHUpO3RoaXMuc3RhdGUhPT1pP2Yocix0aGlzLnN0YXRlPT09YT90OmUsdGhpcy5vdXRjb21lKTp0aGlzLnF1ZXVlLnB1c2gobmV3IGgocix0LGUpKTtyZXR1cm4gcn0saC5wcm90b3R5cGUuY2FsbEZ1bGZpbGxlZD1mdW5jdGlvbih0KXtsLnJlc29sdmUodGhpcy5wcm9taXNlLHQpfSxoLnByb3RvdHlwZS5vdGhlckNhbGxGdWxmaWxsZWQ9ZnVuY3Rpb24odCl7Zih0aGlzLnByb21pc2UsdGhpcy5vbkZ1bGZpbGxlZCx0KX0saC5wcm90b3R5cGUuY2FsbFJlamVjdGVkPWZ1bmN0aW9uKHQpe2wucmVqZWN0KHRoaXMucHJvbWlzZSx0KX0saC5wcm90b3R5cGUub3RoZXJDYWxsUmVqZWN0ZWQ9ZnVuY3Rpb24odCl7Zih0aGlzLnByb21pc2UsdGhpcy5vblJlamVjdGVkLHQpfSxsLnJlc29sdmU9ZnVuY3Rpb24odCxlKXt2YXIgcj1wKGQsZSk7aWYoXCJlcnJvclwiPT09ci5zdGF0dXMpcmV0dXJuIGwucmVqZWN0KHQsci52YWx1ZSk7dmFyIGk9ci52YWx1ZTtpZihpKWModCxpKTtlbHNle3Quc3RhdGU9YSx0Lm91dGNvbWU9ZTtmb3IodmFyIG49LTEscz10LnF1ZXVlLmxlbmd0aDsrK248czspdC5xdWV1ZVtuXS5jYWxsRnVsZmlsbGVkKGUpfXJldHVybiB0fSxsLnJlamVjdD1mdW5jdGlvbih0LGUpe3Quc3RhdGU9cyx0Lm91dGNvbWU9ZTtmb3IodmFyIHI9LTEsaT10LnF1ZXVlLmxlbmd0aDsrK3I8aTspdC5xdWV1ZVtyXS5jYWxsUmVqZWN0ZWQoZSk7cmV0dXJuIHR9LG8ucmVzb2x2ZT1mdW5jdGlvbih0KXtpZih0IGluc3RhbmNlb2YgdGhpcylyZXR1cm4gdDtyZXR1cm4gbC5yZXNvbHZlKG5ldyB0aGlzKHUpLHQpfSxvLnJlamVjdD1mdW5jdGlvbih0KXt2YXIgZT1uZXcgdGhpcyh1KTtyZXR1cm4gbC5yZWplY3QoZSx0KX0sby5hbGw9ZnVuY3Rpb24odCl7dmFyIHI9dGhpcztpZihcIltvYmplY3QgQXJyYXldXCIhPT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodCkpcmV0dXJuIHRoaXMucmVqZWN0KG5ldyBUeXBlRXJyb3IoXCJtdXN0IGJlIGFuIGFycmF5XCIpKTt2YXIgaT10Lmxlbmd0aCxuPSExO2lmKCFpKXJldHVybiB0aGlzLnJlc29sdmUoW10pO3ZhciBzPW5ldyBBcnJheShpKSxhPTAsZT0tMSxvPW5ldyB0aGlzKHUpO2Zvcig7KytlPGk7KWgodFtlXSxlKTtyZXR1cm4gbztmdW5jdGlvbiBoKHQsZSl7ci5yZXNvbHZlKHQpLnRoZW4oZnVuY3Rpb24odCl7c1tlXT10LCsrYSE9PWl8fG58fChuPSEwLGwucmVzb2x2ZShvLHMpKX0sZnVuY3Rpb24odCl7bnx8KG49ITAsbC5yZWplY3Qobyx0KSl9KX19LG8ucmFjZT1mdW5jdGlvbih0KXt2YXIgZT10aGlzO2lmKFwiW29iamVjdCBBcnJheV1cIiE9PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KSlyZXR1cm4gdGhpcy5yZWplY3QobmV3IFR5cGVFcnJvcihcIm11c3QgYmUgYW4gYXJyYXlcIikpO3ZhciByPXQubGVuZ3RoLGk9ITE7aWYoIXIpcmV0dXJuIHRoaXMucmVzb2x2ZShbXSk7dmFyIG49LTEscz1uZXcgdGhpcyh1KTtmb3IoOysrbjxyOylhPXRbbl0sZS5yZXNvbHZlKGEpLnRoZW4oZnVuY3Rpb24odCl7aXx8KGk9ITAsbC5yZXNvbHZlKHMsdCkpfSxmdW5jdGlvbih0KXtpfHwoaT0hMCxsLnJlamVjdChzLHQpKX0pO3ZhciBhO3JldHVybiBzfX0se2ltbWVkaWF0ZTozNn1dLDM4OltmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGk9e307KDAsdChcIi4vbGliL3V0aWxzL2NvbW1vblwiKS5hc3NpZ24pKGksdChcIi4vbGliL2RlZmxhdGVcIiksdChcIi4vbGliL2luZmxhdGVcIiksdChcIi4vbGliL3psaWIvY29uc3RhbnRzXCIpKSxlLmV4cG9ydHM9aX0se1wiLi9saWIvZGVmbGF0ZVwiOjM5LFwiLi9saWIvaW5mbGF0ZVwiOjQwLFwiLi9saWIvdXRpbHMvY29tbW9uXCI6NDEsXCIuL2xpYi96bGliL2NvbnN0YW50c1wiOjQ0fV0sMzk6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgYT10KFwiLi96bGliL2RlZmxhdGVcIiksbz10KFwiLi91dGlscy9jb21tb25cIiksaD10KFwiLi91dGlscy9zdHJpbmdzXCIpLG49dChcIi4vemxpYi9tZXNzYWdlc1wiKSxzPXQoXCIuL3psaWIvenN0cmVhbVwiKSx1PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcsbD0wLGY9LTEsZD0wLGM9ODtmdW5jdGlvbiBwKHQpe2lmKCEodGhpcyBpbnN0YW5jZW9mIHApKXJldHVybiBuZXcgcCh0KTt0aGlzLm9wdGlvbnM9by5hc3NpZ24oe2xldmVsOmYsbWV0aG9kOmMsY2h1bmtTaXplOjE2Mzg0LHdpbmRvd0JpdHM6MTUsbWVtTGV2ZWw6OCxzdHJhdGVneTpkLHRvOlwiXCJ9LHR8fHt9KTt2YXIgZT10aGlzLm9wdGlvbnM7ZS5yYXcmJjA8ZS53aW5kb3dCaXRzP2Uud2luZG93Qml0cz0tZS53aW5kb3dCaXRzOmUuZ3ppcCYmMDxlLndpbmRvd0JpdHMmJmUud2luZG93Qml0czwxNiYmKGUud2luZG93Qml0cys9MTYpLHRoaXMuZXJyPTAsdGhpcy5tc2c9XCJcIix0aGlzLmVuZGVkPSExLHRoaXMuY2h1bmtzPVtdLHRoaXMuc3RybT1uZXcgcyx0aGlzLnN0cm0uYXZhaWxfb3V0PTA7dmFyIHI9YS5kZWZsYXRlSW5pdDIodGhpcy5zdHJtLGUubGV2ZWwsZS5tZXRob2QsZS53aW5kb3dCaXRzLGUubWVtTGV2ZWwsZS5zdHJhdGVneSk7aWYociE9PWwpdGhyb3cgbmV3IEVycm9yKG5bcl0pO2lmKGUuaGVhZGVyJiZhLmRlZmxhdGVTZXRIZWFkZXIodGhpcy5zdHJtLGUuaGVhZGVyKSxlLmRpY3Rpb25hcnkpe3ZhciBpO2lmKGk9XCJzdHJpbmdcIj09dHlwZW9mIGUuZGljdGlvbmFyeT9oLnN0cmluZzJidWYoZS5kaWN0aW9uYXJ5KTpcIltvYmplY3QgQXJyYXlCdWZmZXJdXCI9PT11LmNhbGwoZS5kaWN0aW9uYXJ5KT9uZXcgVWludDhBcnJheShlLmRpY3Rpb25hcnkpOmUuZGljdGlvbmFyeSwocj1hLmRlZmxhdGVTZXREaWN0aW9uYXJ5KHRoaXMuc3RybSxpKSkhPT1sKXRocm93IG5ldyBFcnJvcihuW3JdKTt0aGlzLl9kaWN0X3NldD0hMH19ZnVuY3Rpb24gaSh0LGUpe3ZhciByPW5ldyBwKGUpO2lmKHIucHVzaCh0LCEwKSxyLmVycil0aHJvdyByLm1zZ3x8bltyLmVycl07cmV0dXJuIHIucmVzdWx0fXAucHJvdG90eXBlLnB1c2g9ZnVuY3Rpb24odCxlKXt2YXIgcixpLG49dGhpcy5zdHJtLHM9dGhpcy5vcHRpb25zLmNodW5rU2l6ZTtpZih0aGlzLmVuZGVkKXJldHVybiExO2k9ZT09PX5+ZT9lOiEwPT09ZT80OjAsXCJzdHJpbmdcIj09dHlwZW9mIHQ/bi5pbnB1dD1oLnN0cmluZzJidWYodCk6XCJbb2JqZWN0IEFycmF5QnVmZmVyXVwiPT09dS5jYWxsKHQpP24uaW5wdXQ9bmV3IFVpbnQ4QXJyYXkodCk6bi5pbnB1dD10LG4ubmV4dF9pbj0wLG4uYXZhaWxfaW49bi5pbnB1dC5sZW5ndGg7ZG97aWYoMD09PW4uYXZhaWxfb3V0JiYobi5vdXRwdXQ9bmV3IG8uQnVmOChzKSxuLm5leHRfb3V0PTAsbi5hdmFpbF9vdXQ9cyksMSE9PShyPWEuZGVmbGF0ZShuLGkpKSYmciE9PWwpcmV0dXJuIHRoaXMub25FbmQociksISh0aGlzLmVuZGVkPSEwKTswIT09bi5hdmFpbF9vdXQmJigwIT09bi5hdmFpbF9pbnx8NCE9PWkmJjIhPT1pKXx8KFwic3RyaW5nXCI9PT10aGlzLm9wdGlvbnMudG8/dGhpcy5vbkRhdGEoaC5idWYyYmluc3RyaW5nKG8uc2hyaW5rQnVmKG4ub3V0cHV0LG4ubmV4dF9vdXQpKSk6dGhpcy5vbkRhdGEoby5zaHJpbmtCdWYobi5vdXRwdXQsbi5uZXh0X291dCkpKX13aGlsZSgoMDxuLmF2YWlsX2lufHwwPT09bi5hdmFpbF9vdXQpJiYxIT09cik7cmV0dXJuIDQ9PT1pPyhyPWEuZGVmbGF0ZUVuZCh0aGlzLnN0cm0pLHRoaXMub25FbmQociksdGhpcy5lbmRlZD0hMCxyPT09bCk6MiE9PWl8fCh0aGlzLm9uRW5kKGwpLCEobi5hdmFpbF9vdXQ9MCkpfSxwLnByb3RvdHlwZS5vbkRhdGE9ZnVuY3Rpb24odCl7dGhpcy5jaHVua3MucHVzaCh0KX0scC5wcm90b3R5cGUub25FbmQ9ZnVuY3Rpb24odCl7dD09PWwmJihcInN0cmluZ1wiPT09dGhpcy5vcHRpb25zLnRvP3RoaXMucmVzdWx0PXRoaXMuY2h1bmtzLmpvaW4oXCJcIik6dGhpcy5yZXN1bHQ9by5mbGF0dGVuQ2h1bmtzKHRoaXMuY2h1bmtzKSksdGhpcy5jaHVua3M9W10sdGhpcy5lcnI9dCx0aGlzLm1zZz10aGlzLnN0cm0ubXNnfSxyLkRlZmxhdGU9cCxyLmRlZmxhdGU9aSxyLmRlZmxhdGVSYXc9ZnVuY3Rpb24odCxlKXtyZXR1cm4oZT1lfHx7fSkucmF3PSEwLGkodCxlKX0sci5nemlwPWZ1bmN0aW9uKHQsZSl7cmV0dXJuKGU9ZXx8e30pLmd6aXA9ITAsaSh0LGUpfX0se1wiLi91dGlscy9jb21tb25cIjo0MSxcIi4vdXRpbHMvc3RyaW5nc1wiOjQyLFwiLi96bGliL2RlZmxhdGVcIjo0NixcIi4vemxpYi9tZXNzYWdlc1wiOjUxLFwiLi96bGliL3pzdHJlYW1cIjo1M31dLDQwOltmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGQ9dChcIi4vemxpYi9pbmZsYXRlXCIpLGM9dChcIi4vdXRpbHMvY29tbW9uXCIpLHA9dChcIi4vdXRpbHMvc3RyaW5nc1wiKSxtPXQoXCIuL3psaWIvY29uc3RhbnRzXCIpLGk9dChcIi4vemxpYi9tZXNzYWdlc1wiKSxuPXQoXCIuL3psaWIvenN0cmVhbVwiKSxzPXQoXCIuL3psaWIvZ3poZWFkZXJcIiksXz1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO2Z1bmN0aW9uIGEodCl7aWYoISh0aGlzIGluc3RhbmNlb2YgYSkpcmV0dXJuIG5ldyBhKHQpO3RoaXMub3B0aW9ucz1jLmFzc2lnbih7Y2h1bmtTaXplOjE2Mzg0LHdpbmRvd0JpdHM6MCx0bzpcIlwifSx0fHx7fSk7dmFyIGU9dGhpcy5vcHRpb25zO2UucmF3JiYwPD1lLndpbmRvd0JpdHMmJmUud2luZG93Qml0czwxNiYmKGUud2luZG93Qml0cz0tZS53aW5kb3dCaXRzLDA9PT1lLndpbmRvd0JpdHMmJihlLndpbmRvd0JpdHM9LTE1KSksISgwPD1lLndpbmRvd0JpdHMmJmUud2luZG93Qml0czwxNil8fHQmJnQud2luZG93Qml0c3x8KGUud2luZG93Qml0cys9MzIpLDE1PGUud2luZG93Qml0cyYmZS53aW5kb3dCaXRzPDQ4JiYwPT0oMTUmZS53aW5kb3dCaXRzKSYmKGUud2luZG93Qml0c3w9MTUpLHRoaXMuZXJyPTAsdGhpcy5tc2c9XCJcIix0aGlzLmVuZGVkPSExLHRoaXMuY2h1bmtzPVtdLHRoaXMuc3RybT1uZXcgbix0aGlzLnN0cm0uYXZhaWxfb3V0PTA7dmFyIHI9ZC5pbmZsYXRlSW5pdDIodGhpcy5zdHJtLGUud2luZG93Qml0cyk7aWYociE9PW0uWl9PSyl0aHJvdyBuZXcgRXJyb3IoaVtyXSk7dGhpcy5oZWFkZXI9bmV3IHMsZC5pbmZsYXRlR2V0SGVhZGVyKHRoaXMuc3RybSx0aGlzLmhlYWRlcil9ZnVuY3Rpb24gbyh0LGUpe3ZhciByPW5ldyBhKGUpO2lmKHIucHVzaCh0LCEwKSxyLmVycil0aHJvdyByLm1zZ3x8aVtyLmVycl07cmV0dXJuIHIucmVzdWx0fWEucHJvdG90eXBlLnB1c2g9ZnVuY3Rpb24odCxlKXt2YXIgcixpLG4scyxhLG8saD10aGlzLnN0cm0sdT10aGlzLm9wdGlvbnMuY2h1bmtTaXplLGw9dGhpcy5vcHRpb25zLmRpY3Rpb25hcnksZj0hMTtpZih0aGlzLmVuZGVkKXJldHVybiExO2k9ZT09PX5+ZT9lOiEwPT09ZT9tLlpfRklOSVNIOm0uWl9OT19GTFVTSCxcInN0cmluZ1wiPT10eXBlb2YgdD9oLmlucHV0PXAuYmluc3RyaW5nMmJ1Zih0KTpcIltvYmplY3QgQXJyYXlCdWZmZXJdXCI9PT1fLmNhbGwodCk/aC5pbnB1dD1uZXcgVWludDhBcnJheSh0KTpoLmlucHV0PXQsaC5uZXh0X2luPTAsaC5hdmFpbF9pbj1oLmlucHV0Lmxlbmd0aDtkb3tpZigwPT09aC5hdmFpbF9vdXQmJihoLm91dHB1dD1uZXcgYy5CdWY4KHUpLGgubmV4dF9vdXQ9MCxoLmF2YWlsX291dD11KSwocj1kLmluZmxhdGUoaCxtLlpfTk9fRkxVU0gpKT09PW0uWl9ORUVEX0RJQ1QmJmwmJihvPVwic3RyaW5nXCI9PXR5cGVvZiBsP3Auc3RyaW5nMmJ1ZihsKTpcIltvYmplY3QgQXJyYXlCdWZmZXJdXCI9PT1fLmNhbGwobCk/bmV3IFVpbnQ4QXJyYXkobCk6bCxyPWQuaW5mbGF0ZVNldERpY3Rpb25hcnkodGhpcy5zdHJtLG8pKSxyPT09bS5aX0JVRl9FUlJPUiYmITA9PT1mJiYocj1tLlpfT0ssZj0hMSksciE9PW0uWl9TVFJFQU1fRU5EJiZyIT09bS5aX09LKXJldHVybiB0aGlzLm9uRW5kKHIpLCEodGhpcy5lbmRlZD0hMCk7aC5uZXh0X291dCYmKDAhPT1oLmF2YWlsX291dCYmciE9PW0uWl9TVFJFQU1fRU5EJiYoMCE9PWguYXZhaWxfaW58fGkhPT1tLlpfRklOSVNIJiZpIT09bS5aX1NZTkNfRkxVU0gpfHwoXCJzdHJpbmdcIj09PXRoaXMub3B0aW9ucy50bz8obj1wLnV0Zjhib3JkZXIoaC5vdXRwdXQsaC5uZXh0X291dCkscz1oLm5leHRfb3V0LW4sYT1wLmJ1ZjJzdHJpbmcoaC5vdXRwdXQsbiksaC5uZXh0X291dD1zLGguYXZhaWxfb3V0PXUtcyxzJiZjLmFycmF5U2V0KGgub3V0cHV0LGgub3V0cHV0LG4scywwKSx0aGlzLm9uRGF0YShhKSk6dGhpcy5vbkRhdGEoYy5zaHJpbmtCdWYoaC5vdXRwdXQsaC5uZXh0X291dCkpKSksMD09PWguYXZhaWxfaW4mJjA9PT1oLmF2YWlsX291dCYmKGY9ITApfXdoaWxlKCgwPGguYXZhaWxfaW58fDA9PT1oLmF2YWlsX291dCkmJnIhPT1tLlpfU1RSRUFNX0VORCk7cmV0dXJuIHI9PT1tLlpfU1RSRUFNX0VORCYmKGk9bS5aX0ZJTklTSCksaT09PW0uWl9GSU5JU0g/KHI9ZC5pbmZsYXRlRW5kKHRoaXMuc3RybSksdGhpcy5vbkVuZChyKSx0aGlzLmVuZGVkPSEwLHI9PT1tLlpfT0spOmkhPT1tLlpfU1lOQ19GTFVTSHx8KHRoaXMub25FbmQobS5aX09LKSwhKGguYXZhaWxfb3V0PTApKX0sYS5wcm90b3R5cGUub25EYXRhPWZ1bmN0aW9uKHQpe3RoaXMuY2h1bmtzLnB1c2godCl9LGEucHJvdG90eXBlLm9uRW5kPWZ1bmN0aW9uKHQpe3Q9PT1tLlpfT0smJihcInN0cmluZ1wiPT09dGhpcy5vcHRpb25zLnRvP3RoaXMucmVzdWx0PXRoaXMuY2h1bmtzLmpvaW4oXCJcIik6dGhpcy5yZXN1bHQ9Yy5mbGF0dGVuQ2h1bmtzKHRoaXMuY2h1bmtzKSksdGhpcy5jaHVua3M9W10sdGhpcy5lcnI9dCx0aGlzLm1zZz10aGlzLnN0cm0ubXNnfSxyLkluZmxhdGU9YSxyLmluZmxhdGU9byxyLmluZmxhdGVSYXc9ZnVuY3Rpb24odCxlKXtyZXR1cm4oZT1lfHx7fSkucmF3PSEwLG8odCxlKX0sci51bmd6aXA9b30se1wiLi91dGlscy9jb21tb25cIjo0MSxcIi4vdXRpbHMvc3RyaW5nc1wiOjQyLFwiLi96bGliL2NvbnN0YW50c1wiOjQ0LFwiLi96bGliL2d6aGVhZGVyXCI6NDcsXCIuL3psaWIvaW5mbGF0ZVwiOjQ5LFwiLi96bGliL21lc3NhZ2VzXCI6NTEsXCIuL3psaWIvenN0cmVhbVwiOjUzfV0sNDE6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgaT1cInVuZGVmaW5lZFwiIT10eXBlb2YgVWludDhBcnJheSYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFVpbnQxNkFycmF5JiZcInVuZGVmaW5lZFwiIT10eXBlb2YgSW50MzJBcnJheTtyLmFzc2lnbj1mdW5jdGlvbih0KXtmb3IodmFyIGU9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpO2UubGVuZ3RoOyl7dmFyIHI9ZS5zaGlmdCgpO2lmKHIpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiByKXRocm93IG5ldyBUeXBlRXJyb3IocitcIm11c3QgYmUgbm9uLW9iamVjdFwiKTtmb3IodmFyIGkgaW4gcilyLmhhc093blByb3BlcnR5KGkpJiYodFtpXT1yW2ldKX19cmV0dXJuIHR9LHIuc2hyaW5rQnVmPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQubGVuZ3RoPT09ZT90OnQuc3ViYXJyYXk/dC5zdWJhcnJheSgwLGUpOih0Lmxlbmd0aD1lLHQpfTt2YXIgbj17YXJyYXlTZXQ6ZnVuY3Rpb24odCxlLHIsaSxuKXtpZihlLnN1YmFycmF5JiZ0LnN1YmFycmF5KXQuc2V0KGUuc3ViYXJyYXkocixyK2kpLG4pO2Vsc2UgZm9yKHZhciBzPTA7czxpO3MrKyl0W24rc109ZVtyK3NdfSxmbGF0dGVuQ2h1bmtzOmZ1bmN0aW9uKHQpe3ZhciBlLHIsaSxuLHMsYTtmb3IoZT1pPTAscj10Lmxlbmd0aDtlPHI7ZSsrKWkrPXRbZV0ubGVuZ3RoO2ZvcihhPW5ldyBVaW50OEFycmF5KGkpLGU9bj0wLHI9dC5sZW5ndGg7ZTxyO2UrKylzPXRbZV0sYS5zZXQocyxuKSxuKz1zLmxlbmd0aDtyZXR1cm4gYX19LHM9e2FycmF5U2V0OmZ1bmN0aW9uKHQsZSxyLGksbil7Zm9yKHZhciBzPTA7czxpO3MrKyl0W24rc109ZVtyK3NdfSxmbGF0dGVuQ2h1bmtzOmZ1bmN0aW9uKHQpe3JldHVybltdLmNvbmNhdC5hcHBseShbXSx0KX19O3Iuc2V0VHlwZWQ9ZnVuY3Rpb24odCl7dD8oci5CdWY4PVVpbnQ4QXJyYXksci5CdWYxNj1VaW50MTZBcnJheSxyLkJ1ZjMyPUludDMyQXJyYXksci5hc3NpZ24ocixuKSk6KHIuQnVmOD1BcnJheSxyLkJ1ZjE2PUFycmF5LHIuQnVmMzI9QXJyYXksci5hc3NpZ24ocixzKSl9LHIuc2V0VHlwZWQoaSl9LHt9XSw0MjpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBoPXQoXCIuL2NvbW1vblwiKSxuPSEwLHM9ITA7dHJ5e1N0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCxbMF0pfWNhdGNoKHQpe249ITF9dHJ5e1N0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCxuZXcgVWludDhBcnJheSgxKSl9Y2F0Y2godCl7cz0hMX1mb3IodmFyIHU9bmV3IGguQnVmOCgyNTYpLGk9MDtpPDI1NjtpKyspdVtpXT0yNTI8PWk/NjoyNDg8PWk/NToyNDA8PWk/NDoyMjQ8PWk/MzoxOTI8PWk/MjoxO2Z1bmN0aW9uIGwodCxlKXtpZihlPDY1NTM3JiYodC5zdWJhcnJheSYmc3x8IXQuc3ViYXJyYXkmJm4pKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsaC5zaHJpbmtCdWYodCxlKSk7Zm9yKHZhciByPVwiXCIsaT0wO2k8ZTtpKyspcis9U3RyaW5nLmZyb21DaGFyQ29kZSh0W2ldKTtyZXR1cm4gcn11WzI1NF09dVsyNTRdPTEsci5zdHJpbmcyYnVmPWZ1bmN0aW9uKHQpe3ZhciBlLHIsaSxuLHMsYT10Lmxlbmd0aCxvPTA7Zm9yKG49MDtuPGE7bisrKTU1Mjk2PT0oNjQ1MTImKHI9dC5jaGFyQ29kZUF0KG4pKSkmJm4rMTxhJiY1NjMyMD09KDY0NTEyJihpPXQuY2hhckNvZGVBdChuKzEpKSkmJihyPTY1NTM2KyhyLTU1Mjk2PDwxMCkrKGktNTYzMjApLG4rKyksbys9cjwxMjg/MTpyPDIwNDg/MjpyPDY1NTM2PzM6NDtmb3IoZT1uZXcgaC5CdWY4KG8pLG49cz0wO3M8bztuKyspNTUyOTY9PSg2NDUxMiYocj10LmNoYXJDb2RlQXQobikpKSYmbisxPGEmJjU2MzIwPT0oNjQ1MTImKGk9dC5jaGFyQ29kZUF0KG4rMSkpKSYmKHI9NjU1MzYrKHItNTUyOTY8PDEwKSsoaS01NjMyMCksbisrKSxyPDEyOD9lW3MrK109cjoocjwyMDQ4P2VbcysrXT0xOTJ8cj4+PjY6KHI8NjU1MzY/ZVtzKytdPTIyNHxyPj4+MTI6KGVbcysrXT0yNDB8cj4+PjE4LGVbcysrXT0xMjh8cj4+PjEyJjYzKSxlW3MrK109MTI4fHI+Pj42JjYzKSxlW3MrK109MTI4fDYzJnIpO3JldHVybiBlfSxyLmJ1ZjJiaW5zdHJpbmc9ZnVuY3Rpb24odCl7cmV0dXJuIGwodCx0Lmxlbmd0aCl9LHIuYmluc3RyaW5nMmJ1Zj1mdW5jdGlvbih0KXtmb3IodmFyIGU9bmV3IGguQnVmOCh0Lmxlbmd0aCkscj0wLGk9ZS5sZW5ndGg7cjxpO3IrKyllW3JdPXQuY2hhckNvZGVBdChyKTtyZXR1cm4gZX0sci5idWYyc3RyaW5nPWZ1bmN0aW9uKHQsZSl7dmFyIHIsaSxuLHMsYT1lfHx0Lmxlbmd0aCxvPW5ldyBBcnJheSgyKmEpO2ZvcihyPWk9MDtyPGE7KWlmKChuPXRbcisrXSk8MTI4KW9baSsrXT1uO2Vsc2UgaWYoNDwocz11W25dKSlvW2krK109NjU1MzMscis9cy0xO2Vsc2V7Zm9yKG4mPTI9PT1zPzMxOjM9PT1zPzE1Ojc7MTxzJiZyPGE7KW49bjw8Nnw2MyZ0W3IrK10scy0tOzE8cz9vW2krK109NjU1MzM6bjw2NTUzNj9vW2krK109bjoobi09NjU1MzYsb1tpKytdPTU1Mjk2fG4+PjEwJjEwMjMsb1tpKytdPTU2MzIwfDEwMjMmbil9cmV0dXJuIGwobyxpKX0sci51dGY4Ym9yZGVyPWZ1bmN0aW9uKHQsZSl7dmFyIHI7Zm9yKChlPWV8fHQubGVuZ3RoKT50Lmxlbmd0aCYmKGU9dC5sZW5ndGgpLHI9ZS0xOzA8PXImJjEyOD09KDE5MiZ0W3JdKTspci0tO3JldHVybiByPDA/ZTowPT09cj9lOnIrdVt0W3JdXT5lP3I6ZX19LHtcIi4vY29tbW9uXCI6NDF9XSw0MzpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz1mdW5jdGlvbih0LGUscixpKXtmb3IodmFyIG49NjU1MzUmdHwwLHM9dD4+PjE2JjY1NTM1fDAsYT0wOzAhPT1yOyl7Zm9yKHItPWE9MmUzPHI/MmUzOnI7cz1zKyhuPW4rZVtpKytdfDApfDAsLS1hOyk7biU9NjU1MjEscyU9NjU1MjF9cmV0dXJuIG58czw8MTZ8MH19LHt9XSw0NDpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz17Wl9OT19GTFVTSDowLFpfUEFSVElBTF9GTFVTSDoxLFpfU1lOQ19GTFVTSDoyLFpfRlVMTF9GTFVTSDozLFpfRklOSVNIOjQsWl9CTE9DSzo1LFpfVFJFRVM6NixaX09LOjAsWl9TVFJFQU1fRU5EOjEsWl9ORUVEX0RJQ1Q6MixaX0VSUk5POi0xLFpfU1RSRUFNX0VSUk9SOi0yLFpfREFUQV9FUlJPUjotMyxaX0JVRl9FUlJPUjotNSxaX05PX0NPTVBSRVNTSU9OOjAsWl9CRVNUX1NQRUVEOjEsWl9CRVNUX0NPTVBSRVNTSU9OOjksWl9ERUZBVUxUX0NPTVBSRVNTSU9OOi0xLFpfRklMVEVSRUQ6MSxaX0hVRkZNQU5fT05MWToyLFpfUkxFOjMsWl9GSVhFRDo0LFpfREVGQVVMVF9TVFJBVEVHWTowLFpfQklOQVJZOjAsWl9URVhUOjEsWl9VTktOT1dOOjIsWl9ERUZMQVRFRDo4fX0se31dLDQ1OltmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG89ZnVuY3Rpb24oKXtmb3IodmFyIHQsZT1bXSxyPTA7cjwyNTY7cisrKXt0PXI7Zm9yKHZhciBpPTA7aTw4O2krKyl0PTEmdD8zOTg4MjkyMzg0XnQ+Pj4xOnQ+Pj4xO2Vbcl09dH1yZXR1cm4gZX0oKTtlLmV4cG9ydHM9ZnVuY3Rpb24odCxlLHIsaSl7dmFyIG49byxzPWkrcjt0Xj0tMTtmb3IodmFyIGE9aTthPHM7YSsrKXQ9dD4+PjheblsyNTUmKHReZVthXSldO3JldHVybi0xXnR9fSx7fV0sNDY6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgaCxkPXQoXCIuLi91dGlscy9jb21tb25cIiksdT10KFwiLi90cmVlc1wiKSxjPXQoXCIuL2FkbGVyMzJcIikscD10KFwiLi9jcmMzMlwiKSxpPXQoXCIuL21lc3NhZ2VzXCIpLGw9MCxmPTQsbT0wLF89LTIsZz0tMSxiPTQsbj0yLHY9OCx5PTkscz0yODYsYT0zMCxvPTE5LHc9MipzKzEsaz0xNSx4PTMsUz0yNTgsej1TK3grMSxDPTQyLEU9MTEzLEE9MSxJPTIsTz0zLEI9NDtmdW5jdGlvbiBSKHQsZSl7cmV0dXJuIHQubXNnPWlbZV0sZX1mdW5jdGlvbiBUKHQpe3JldHVybih0PDwxKS0oNDx0Pzk6MCl9ZnVuY3Rpb24gRCh0KXtmb3IodmFyIGU9dC5sZW5ndGg7MDw9LS1lOyl0W2VdPTB9ZnVuY3Rpb24gRih0KXt2YXIgZT10LnN0YXRlLHI9ZS5wZW5kaW5nO3I+dC5hdmFpbF9vdXQmJihyPXQuYXZhaWxfb3V0KSwwIT09ciYmKGQuYXJyYXlTZXQodC5vdXRwdXQsZS5wZW5kaW5nX2J1ZixlLnBlbmRpbmdfb3V0LHIsdC5uZXh0X291dCksdC5uZXh0X291dCs9cixlLnBlbmRpbmdfb3V0Kz1yLHQudG90YWxfb3V0Kz1yLHQuYXZhaWxfb3V0LT1yLGUucGVuZGluZy09ciwwPT09ZS5wZW5kaW5nJiYoZS5wZW5kaW5nX291dD0wKSl9ZnVuY3Rpb24gTih0LGUpe3UuX3RyX2ZsdXNoX2Jsb2NrKHQsMDw9dC5ibG9ja19zdGFydD90LmJsb2NrX3N0YXJ0Oi0xLHQuc3Ryc3RhcnQtdC5ibG9ja19zdGFydCxlKSx0LmJsb2NrX3N0YXJ0PXQuc3Ryc3RhcnQsRih0LnN0cm0pfWZ1bmN0aW9uIFUodCxlKXt0LnBlbmRpbmdfYnVmW3QucGVuZGluZysrXT1lfWZ1bmN0aW9uIFAodCxlKXt0LnBlbmRpbmdfYnVmW3QucGVuZGluZysrXT1lPj4+OCYyNTUsdC5wZW5kaW5nX2J1Zlt0LnBlbmRpbmcrK109MjU1JmV9ZnVuY3Rpb24gTCh0LGUpe3ZhciByLGksbj10Lm1heF9jaGFpbl9sZW5ndGgscz10LnN0cnN0YXJ0LGE9dC5wcmV2X2xlbmd0aCxvPXQubmljZV9tYXRjaCxoPXQuc3Ryc3RhcnQ+dC53X3NpemUtej90LnN0cnN0YXJ0LSh0Lndfc2l6ZS16KTowLHU9dC53aW5kb3csbD10LndfbWFzayxmPXQucHJldixkPXQuc3Ryc3RhcnQrUyxjPXVbcythLTFdLHA9dVtzK2FdO3QucHJldl9sZW5ndGg+PXQuZ29vZF9tYXRjaCYmKG4+Pj0yKSxvPnQubG9va2FoZWFkJiYobz10Lmxvb2thaGVhZCk7ZG97aWYodVsocj1lKSthXT09PXAmJnVbcithLTFdPT09YyYmdVtyXT09PXVbc10mJnVbKytyXT09PXVbcysxXSl7cys9MixyKys7ZG97fXdoaWxlKHVbKytzXT09PXVbKytyXSYmdVsrK3NdPT09dVsrK3JdJiZ1Wysrc109PT11Wysrcl0mJnVbKytzXT09PXVbKytyXSYmdVsrK3NdPT09dVsrK3JdJiZ1Wysrc109PT11Wysrcl0mJnVbKytzXT09PXVbKytyXSYmdVsrK3NdPT09dVsrK3JdJiZzPGQpO2lmKGk9Uy0oZC1zKSxzPWQtUyxhPGkpe2lmKHQubWF0Y2hfc3RhcnQ9ZSxvPD0oYT1pKSlicmVhaztjPXVbcythLTFdLHA9dVtzK2FdfX19d2hpbGUoKGU9ZltlJmxdKT5oJiYwIT0tLW4pO3JldHVybiBhPD10Lmxvb2thaGVhZD9hOnQubG9va2FoZWFkfWZ1bmN0aW9uIGoodCl7dmFyIGUscixpLG4scyxhLG8saCx1LGwsZj10Lndfc2l6ZTtkb3tpZihuPXQud2luZG93X3NpemUtdC5sb29rYWhlYWQtdC5zdHJzdGFydCx0LnN0cnN0YXJ0Pj1mKyhmLXopKXtmb3IoZC5hcnJheVNldCh0LndpbmRvdyx0LndpbmRvdyxmLGYsMCksdC5tYXRjaF9zdGFydC09Zix0LnN0cnN0YXJ0LT1mLHQuYmxvY2tfc3RhcnQtPWYsZT1yPXQuaGFzaF9zaXplO2k9dC5oZWFkWy0tZV0sdC5oZWFkW2VdPWY8PWk/aS1mOjAsLS1yOyk7Zm9yKGU9cj1mO2k9dC5wcmV2Wy0tZV0sdC5wcmV2W2VdPWY8PWk/aS1mOjAsLS1yOyk7bis9Zn1pZigwPT09dC5zdHJtLmF2YWlsX2luKWJyZWFrO2lmKGE9dC5zdHJtLG89dC53aW5kb3csaD10LnN0cnN0YXJ0K3QubG9va2FoZWFkLHU9bixsPXZvaWQgMCxsPWEuYXZhaWxfaW4sdTxsJiYobD11KSxyPTA9PT1sPzA6KGEuYXZhaWxfaW4tPWwsZC5hcnJheVNldChvLGEuaW5wdXQsYS5uZXh0X2luLGwsaCksMT09PWEuc3RhdGUud3JhcD9hLmFkbGVyPWMoYS5hZGxlcixvLGwsaCk6Mj09PWEuc3RhdGUud3JhcCYmKGEuYWRsZXI9cChhLmFkbGVyLG8sbCxoKSksYS5uZXh0X2luKz1sLGEudG90YWxfaW4rPWwsbCksdC5sb29rYWhlYWQrPXIsdC5sb29rYWhlYWQrdC5pbnNlcnQ+PXgpZm9yKHM9dC5zdHJzdGFydC10Lmluc2VydCx0Lmluc19oPXQud2luZG93W3NdLHQuaW5zX2g9KHQuaW5zX2g8PHQuaGFzaF9zaGlmdF50LndpbmRvd1tzKzFdKSZ0Lmhhc2hfbWFzazt0Lmluc2VydCYmKHQuaW5zX2g9KHQuaW5zX2g8PHQuaGFzaF9zaGlmdF50LndpbmRvd1tzK3gtMV0pJnQuaGFzaF9tYXNrLHQucHJldltzJnQud19tYXNrXT10LmhlYWRbdC5pbnNfaF0sdC5oZWFkW3QuaW5zX2hdPXMscysrLHQuaW5zZXJ0LS0sISh0Lmxvb2thaGVhZCt0Lmluc2VydDx4KSk7KTt9d2hpbGUodC5sb29rYWhlYWQ8eiYmMCE9PXQuc3RybS5hdmFpbF9pbil9ZnVuY3Rpb24gWih0LGUpe2Zvcih2YXIgcixpOzspe2lmKHQubG9va2FoZWFkPHope2lmKGoodCksdC5sb29rYWhlYWQ8eiYmZT09PWwpcmV0dXJuIEE7aWYoMD09PXQubG9va2FoZWFkKWJyZWFrfWlmKHI9MCx0Lmxvb2thaGVhZD49eCYmKHQuaW5zX2g9KHQuaW5zX2g8PHQuaGFzaF9zaGlmdF50LndpbmRvd1t0LnN0cnN0YXJ0K3gtMV0pJnQuaGFzaF9tYXNrLHI9dC5wcmV2W3Quc3Ryc3RhcnQmdC53X21hc2tdPXQuaGVhZFt0Lmluc19oXSx0LmhlYWRbdC5pbnNfaF09dC5zdHJzdGFydCksMCE9PXImJnQuc3Ryc3RhcnQtcjw9dC53X3NpemUteiYmKHQubWF0Y2hfbGVuZ3RoPUwodCxyKSksdC5tYXRjaF9sZW5ndGg+PXgpaWYoaT11Ll90cl90YWxseSh0LHQuc3Ryc3RhcnQtdC5tYXRjaF9zdGFydCx0Lm1hdGNoX2xlbmd0aC14KSx0Lmxvb2thaGVhZC09dC5tYXRjaF9sZW5ndGgsdC5tYXRjaF9sZW5ndGg8PXQubWF4X2xhenlfbWF0Y2gmJnQubG9va2FoZWFkPj14KXtmb3IodC5tYXRjaF9sZW5ndGgtLTt0LnN0cnN0YXJ0KyssdC5pbnNfaD0odC5pbnNfaDw8dC5oYXNoX3NoaWZ0XnQud2luZG93W3Quc3Ryc3RhcnQreC0xXSkmdC5oYXNoX21hc2sscj10LnByZXZbdC5zdHJzdGFydCZ0LndfbWFza109dC5oZWFkW3QuaW5zX2hdLHQuaGVhZFt0Lmluc19oXT10LnN0cnN0YXJ0LDAhPS0tdC5tYXRjaF9sZW5ndGg7KTt0LnN0cnN0YXJ0Kyt9ZWxzZSB0LnN0cnN0YXJ0Kz10Lm1hdGNoX2xlbmd0aCx0Lm1hdGNoX2xlbmd0aD0wLHQuaW5zX2g9dC53aW5kb3dbdC5zdHJzdGFydF0sdC5pbnNfaD0odC5pbnNfaDw8dC5oYXNoX3NoaWZ0XnQud2luZG93W3Quc3Ryc3RhcnQrMV0pJnQuaGFzaF9tYXNrO2Vsc2UgaT11Ll90cl90YWxseSh0LDAsdC53aW5kb3dbdC5zdHJzdGFydF0pLHQubG9va2FoZWFkLS0sdC5zdHJzdGFydCsrO2lmKGkmJihOKHQsITEpLDA9PT10LnN0cm0uYXZhaWxfb3V0KSlyZXR1cm4gQX1yZXR1cm4gdC5pbnNlcnQ9dC5zdHJzdGFydDx4LTE/dC5zdHJzdGFydDp4LTEsZT09PWY/KE4odCwhMCksMD09PXQuc3RybS5hdmFpbF9vdXQ/TzpCKTp0Lmxhc3RfbGl0JiYoTih0LCExKSwwPT09dC5zdHJtLmF2YWlsX291dCk/QTpJfWZ1bmN0aW9uIFcodCxlKXtmb3IodmFyIHIsaSxuOzspe2lmKHQubG9va2FoZWFkPHope2lmKGoodCksdC5sb29rYWhlYWQ8eiYmZT09PWwpcmV0dXJuIEE7aWYoMD09PXQubG9va2FoZWFkKWJyZWFrfWlmKHI9MCx0Lmxvb2thaGVhZD49eCYmKHQuaW5zX2g9KHQuaW5zX2g8PHQuaGFzaF9zaGlmdF50LndpbmRvd1t0LnN0cnN0YXJ0K3gtMV0pJnQuaGFzaF9tYXNrLHI9dC5wcmV2W3Quc3Ryc3RhcnQmdC53X21hc2tdPXQuaGVhZFt0Lmluc19oXSx0LmhlYWRbdC5pbnNfaF09dC5zdHJzdGFydCksdC5wcmV2X2xlbmd0aD10Lm1hdGNoX2xlbmd0aCx0LnByZXZfbWF0Y2g9dC5tYXRjaF9zdGFydCx0Lm1hdGNoX2xlbmd0aD14LTEsMCE9PXImJnQucHJldl9sZW5ndGg8dC5tYXhfbGF6eV9tYXRjaCYmdC5zdHJzdGFydC1yPD10Lndfc2l6ZS16JiYodC5tYXRjaF9sZW5ndGg9TCh0LHIpLHQubWF0Y2hfbGVuZ3RoPD01JiYoMT09PXQuc3RyYXRlZ3l8fHQubWF0Y2hfbGVuZ3RoPT09eCYmNDA5Njx0LnN0cnN0YXJ0LXQubWF0Y2hfc3RhcnQpJiYodC5tYXRjaF9sZW5ndGg9eC0xKSksdC5wcmV2X2xlbmd0aD49eCYmdC5tYXRjaF9sZW5ndGg8PXQucHJldl9sZW5ndGgpe2ZvcihuPXQuc3Ryc3RhcnQrdC5sb29rYWhlYWQteCxpPXUuX3RyX3RhbGx5KHQsdC5zdHJzdGFydC0xLXQucHJldl9tYXRjaCx0LnByZXZfbGVuZ3RoLXgpLHQubG9va2FoZWFkLT10LnByZXZfbGVuZ3RoLTEsdC5wcmV2X2xlbmd0aC09MjsrK3Quc3Ryc3RhcnQ8PW4mJih0Lmluc19oPSh0Lmluc19oPDx0Lmhhc2hfc2hpZnRedC53aW5kb3dbdC5zdHJzdGFydCt4LTFdKSZ0Lmhhc2hfbWFzayxyPXQucHJldlt0LnN0cnN0YXJ0JnQud19tYXNrXT10LmhlYWRbdC5pbnNfaF0sdC5oZWFkW3QuaW5zX2hdPXQuc3Ryc3RhcnQpLDAhPS0tdC5wcmV2X2xlbmd0aDspO2lmKHQubWF0Y2hfYXZhaWxhYmxlPTAsdC5tYXRjaF9sZW5ndGg9eC0xLHQuc3Ryc3RhcnQrKyxpJiYoTih0LCExKSwwPT09dC5zdHJtLmF2YWlsX291dCkpcmV0dXJuIEF9ZWxzZSBpZih0Lm1hdGNoX2F2YWlsYWJsZSl7aWYoKGk9dS5fdHJfdGFsbHkodCwwLHQud2luZG93W3Quc3Ryc3RhcnQtMV0pKSYmTih0LCExKSx0LnN0cnN0YXJ0KyssdC5sb29rYWhlYWQtLSwwPT09dC5zdHJtLmF2YWlsX291dClyZXR1cm4gQX1lbHNlIHQubWF0Y2hfYXZhaWxhYmxlPTEsdC5zdHJzdGFydCsrLHQubG9va2FoZWFkLS19cmV0dXJuIHQubWF0Y2hfYXZhaWxhYmxlJiYoaT11Ll90cl90YWxseSh0LDAsdC53aW5kb3dbdC5zdHJzdGFydC0xXSksdC5tYXRjaF9hdmFpbGFibGU9MCksdC5pbnNlcnQ9dC5zdHJzdGFydDx4LTE/dC5zdHJzdGFydDp4LTEsZT09PWY/KE4odCwhMCksMD09PXQuc3RybS5hdmFpbF9vdXQ/TzpCKTp0Lmxhc3RfbGl0JiYoTih0LCExKSwwPT09dC5zdHJtLmF2YWlsX291dCk/QTpJfWZ1bmN0aW9uIE0odCxlLHIsaSxuKXt0aGlzLmdvb2RfbGVuZ3RoPXQsdGhpcy5tYXhfbGF6eT1lLHRoaXMubmljZV9sZW5ndGg9cix0aGlzLm1heF9jaGFpbj1pLHRoaXMuZnVuYz1ufWZ1bmN0aW9uIEgoKXt0aGlzLnN0cm09bnVsbCx0aGlzLnN0YXR1cz0wLHRoaXMucGVuZGluZ19idWY9bnVsbCx0aGlzLnBlbmRpbmdfYnVmX3NpemU9MCx0aGlzLnBlbmRpbmdfb3V0PTAsdGhpcy5wZW5kaW5nPTAsdGhpcy53cmFwPTAsdGhpcy5nemhlYWQ9bnVsbCx0aGlzLmd6aW5kZXg9MCx0aGlzLm1ldGhvZD12LHRoaXMubGFzdF9mbHVzaD0tMSx0aGlzLndfc2l6ZT0wLHRoaXMud19iaXRzPTAsdGhpcy53X21hc2s9MCx0aGlzLndpbmRvdz1udWxsLHRoaXMud2luZG93X3NpemU9MCx0aGlzLnByZXY9bnVsbCx0aGlzLmhlYWQ9bnVsbCx0aGlzLmluc19oPTAsdGhpcy5oYXNoX3NpemU9MCx0aGlzLmhhc2hfYml0cz0wLHRoaXMuaGFzaF9tYXNrPTAsdGhpcy5oYXNoX3NoaWZ0PTAsdGhpcy5ibG9ja19zdGFydD0wLHRoaXMubWF0Y2hfbGVuZ3RoPTAsdGhpcy5wcmV2X21hdGNoPTAsdGhpcy5tYXRjaF9hdmFpbGFibGU9MCx0aGlzLnN0cnN0YXJ0PTAsdGhpcy5tYXRjaF9zdGFydD0wLHRoaXMubG9va2FoZWFkPTAsdGhpcy5wcmV2X2xlbmd0aD0wLHRoaXMubWF4X2NoYWluX2xlbmd0aD0wLHRoaXMubWF4X2xhenlfbWF0Y2g9MCx0aGlzLmxldmVsPTAsdGhpcy5zdHJhdGVneT0wLHRoaXMuZ29vZF9tYXRjaD0wLHRoaXMubmljZV9tYXRjaD0wLHRoaXMuZHluX2x0cmVlPW5ldyBkLkJ1ZjE2KDIqdyksdGhpcy5keW5fZHRyZWU9bmV3IGQuQnVmMTYoMiooMiphKzEpKSx0aGlzLmJsX3RyZWU9bmV3IGQuQnVmMTYoMiooMipvKzEpKSxEKHRoaXMuZHluX2x0cmVlKSxEKHRoaXMuZHluX2R0cmVlKSxEKHRoaXMuYmxfdHJlZSksdGhpcy5sX2Rlc2M9bnVsbCx0aGlzLmRfZGVzYz1udWxsLHRoaXMuYmxfZGVzYz1udWxsLHRoaXMuYmxfY291bnQ9bmV3IGQuQnVmMTYoaysxKSx0aGlzLmhlYXA9bmV3IGQuQnVmMTYoMipzKzEpLEQodGhpcy5oZWFwKSx0aGlzLmhlYXBfbGVuPTAsdGhpcy5oZWFwX21heD0wLHRoaXMuZGVwdGg9bmV3IGQuQnVmMTYoMipzKzEpLEQodGhpcy5kZXB0aCksdGhpcy5sX2J1Zj0wLHRoaXMubGl0X2J1ZnNpemU9MCx0aGlzLmxhc3RfbGl0PTAsdGhpcy5kX2J1Zj0wLHRoaXMub3B0X2xlbj0wLHRoaXMuc3RhdGljX2xlbj0wLHRoaXMubWF0Y2hlcz0wLHRoaXMuaW5zZXJ0PTAsdGhpcy5iaV9idWY9MCx0aGlzLmJpX3ZhbGlkPTB9ZnVuY3Rpb24gRyh0KXt2YXIgZTtyZXR1cm4gdCYmdC5zdGF0ZT8odC50b3RhbF9pbj10LnRvdGFsX291dD0wLHQuZGF0YV90eXBlPW4sKGU9dC5zdGF0ZSkucGVuZGluZz0wLGUucGVuZGluZ19vdXQ9MCxlLndyYXA8MCYmKGUud3JhcD0tZS53cmFwKSxlLnN0YXR1cz1lLndyYXA/QzpFLHQuYWRsZXI9Mj09PWUud3JhcD8wOjEsZS5sYXN0X2ZsdXNoPWwsdS5fdHJfaW5pdChlKSxtKTpSKHQsXyl9ZnVuY3Rpb24gSyh0KXt2YXIgZT1HKHQpO3JldHVybiBlPT09bSYmZnVuY3Rpb24odCl7dC53aW5kb3dfc2l6ZT0yKnQud19zaXplLEQodC5oZWFkKSx0Lm1heF9sYXp5X21hdGNoPWhbdC5sZXZlbF0ubWF4X2xhenksdC5nb29kX21hdGNoPWhbdC5sZXZlbF0uZ29vZF9sZW5ndGgsdC5uaWNlX21hdGNoPWhbdC5sZXZlbF0ubmljZV9sZW5ndGgsdC5tYXhfY2hhaW5fbGVuZ3RoPWhbdC5sZXZlbF0ubWF4X2NoYWluLHQuc3Ryc3RhcnQ9MCx0LmJsb2NrX3N0YXJ0PTAsdC5sb29rYWhlYWQ9MCx0Lmluc2VydD0wLHQubWF0Y2hfbGVuZ3RoPXQucHJldl9sZW5ndGg9eC0xLHQubWF0Y2hfYXZhaWxhYmxlPTAsdC5pbnNfaD0wfSh0LnN0YXRlKSxlfWZ1bmN0aW9uIFkodCxlLHIsaSxuLHMpe2lmKCF0KXJldHVybiBfO3ZhciBhPTE7aWYoZT09PWcmJihlPTYpLGk8MD8oYT0wLGk9LWkpOjE1PGkmJihhPTIsaS09MTYpLG48MXx8eTxufHxyIT09dnx8aTw4fHwxNTxpfHxlPDB8fDk8ZXx8czwwfHxiPHMpcmV0dXJuIFIodCxfKTs4PT09aSYmKGk9OSk7dmFyIG89bmV3IEg7cmV0dXJuKHQuc3RhdGU9bykuc3RybT10LG8ud3JhcD1hLG8uZ3poZWFkPW51bGwsby53X2JpdHM9aSxvLndfc2l6ZT0xPDxvLndfYml0cyxvLndfbWFzaz1vLndfc2l6ZS0xLG8uaGFzaF9iaXRzPW4rNyxvLmhhc2hfc2l6ZT0xPDxvLmhhc2hfYml0cyxvLmhhc2hfbWFzaz1vLmhhc2hfc2l6ZS0xLG8uaGFzaF9zaGlmdD1+figoby5oYXNoX2JpdHMreC0xKS94KSxvLndpbmRvdz1uZXcgZC5CdWY4KDIqby53X3NpemUpLG8uaGVhZD1uZXcgZC5CdWYxNihvLmhhc2hfc2l6ZSksby5wcmV2PW5ldyBkLkJ1ZjE2KG8ud19zaXplKSxvLmxpdF9idWZzaXplPTE8PG4rNixvLnBlbmRpbmdfYnVmX3NpemU9NCpvLmxpdF9idWZzaXplLG8ucGVuZGluZ19idWY9bmV3IGQuQnVmOChvLnBlbmRpbmdfYnVmX3NpemUpLG8uZF9idWY9MSpvLmxpdF9idWZzaXplLG8ubF9idWY9MypvLmxpdF9idWZzaXplLG8ubGV2ZWw9ZSxvLnN0cmF0ZWd5PXMsby5tZXRob2Q9cixLKHQpfWg9W25ldyBNKDAsMCwwLDAsZnVuY3Rpb24odCxlKXt2YXIgcj02NTUzNTtmb3Iocj50LnBlbmRpbmdfYnVmX3NpemUtNSYmKHI9dC5wZW5kaW5nX2J1Zl9zaXplLTUpOzspe2lmKHQubG9va2FoZWFkPD0xKXtpZihqKHQpLDA9PT10Lmxvb2thaGVhZCYmZT09PWwpcmV0dXJuIEE7aWYoMD09PXQubG9va2FoZWFkKWJyZWFrfXQuc3Ryc3RhcnQrPXQubG9va2FoZWFkLHQubG9va2FoZWFkPTA7dmFyIGk9dC5ibG9ja19zdGFydCtyO2lmKCgwPT09dC5zdHJzdGFydHx8dC5zdHJzdGFydD49aSkmJih0Lmxvb2thaGVhZD10LnN0cnN0YXJ0LWksdC5zdHJzdGFydD1pLE4odCwhMSksMD09PXQuc3RybS5hdmFpbF9vdXQpKXJldHVybiBBO2lmKHQuc3Ryc3RhcnQtdC5ibG9ja19zdGFydD49dC53X3NpemUteiYmKE4odCwhMSksMD09PXQuc3RybS5hdmFpbF9vdXQpKXJldHVybiBBfXJldHVybiB0Lmluc2VydD0wLGU9PT1mPyhOKHQsITApLDA9PT10LnN0cm0uYXZhaWxfb3V0P086Qik6KHQuc3Ryc3RhcnQ+dC5ibG9ja19zdGFydCYmKE4odCwhMSksdC5zdHJtLmF2YWlsX291dCksQSl9KSxuZXcgTSg0LDQsOCw0LFopLG5ldyBNKDQsNSwxNiw4LFopLG5ldyBNKDQsNiwzMiwzMixaKSxuZXcgTSg0LDQsMTYsMTYsVyksbmV3IE0oOCwxNiwzMiwzMixXKSxuZXcgTSg4LDE2LDEyOCwxMjgsVyksbmV3IE0oOCwzMiwxMjgsMjU2LFcpLG5ldyBNKDMyLDEyOCwyNTgsMTAyNCxXKSxuZXcgTSgzMiwyNTgsMjU4LDQwOTYsVyldLHIuZGVmbGF0ZUluaXQ9ZnVuY3Rpb24odCxlKXtyZXR1cm4gWSh0LGUsdiwxNSw4LDApfSxyLmRlZmxhdGVJbml0Mj1ZLHIuZGVmbGF0ZVJlc2V0PUssci5kZWZsYXRlUmVzZXRLZWVwPUcsci5kZWZsYXRlU2V0SGVhZGVyPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQmJnQuc3RhdGU/MiE9PXQuc3RhdGUud3JhcD9fOih0LnN0YXRlLmd6aGVhZD1lLG0pOl99LHIuZGVmbGF0ZT1mdW5jdGlvbih0LGUpe3ZhciByLGksbixzO2lmKCF0fHwhdC5zdGF0ZXx8NTxlfHxlPDApcmV0dXJuIHQ/Uih0LF8pOl87aWYoaT10LnN0YXRlLCF0Lm91dHB1dHx8IXQuaW5wdXQmJjAhPT10LmF2YWlsX2lufHw2NjY9PT1pLnN0YXR1cyYmZSE9PWYpcmV0dXJuIFIodCwwPT09dC5hdmFpbF9vdXQ/LTU6Xyk7aWYoaS5zdHJtPXQscj1pLmxhc3RfZmx1c2gsaS5sYXN0X2ZsdXNoPWUsaS5zdGF0dXM9PT1DKWlmKDI9PT1pLndyYXApdC5hZGxlcj0wLFUoaSwzMSksVShpLDEzOSksVShpLDgpLGkuZ3poZWFkPyhVKGksKGkuZ3poZWFkLnRleHQ/MTowKSsoaS5nemhlYWQuaGNyYz8yOjApKyhpLmd6aGVhZC5leHRyYT80OjApKyhpLmd6aGVhZC5uYW1lPzg6MCkrKGkuZ3poZWFkLmNvbW1lbnQ/MTY6MCkpLFUoaSwyNTUmaS5nemhlYWQudGltZSksVShpLGkuZ3poZWFkLnRpbWU+PjgmMjU1KSxVKGksaS5nemhlYWQudGltZT4+MTYmMjU1KSxVKGksaS5nemhlYWQudGltZT4+MjQmMjU1KSxVKGksOT09PWkubGV2ZWw/MjoyPD1pLnN0cmF0ZWd5fHxpLmxldmVsPDI/NDowKSxVKGksMjU1JmkuZ3poZWFkLm9zKSxpLmd6aGVhZC5leHRyYSYmaS5nemhlYWQuZXh0cmEubGVuZ3RoJiYoVShpLDI1NSZpLmd6aGVhZC5leHRyYS5sZW5ndGgpLFUoaSxpLmd6aGVhZC5leHRyYS5sZW5ndGg+PjgmMjU1KSksaS5nemhlYWQuaGNyYyYmKHQuYWRsZXI9cCh0LmFkbGVyLGkucGVuZGluZ19idWYsaS5wZW5kaW5nLDApKSxpLmd6aW5kZXg9MCxpLnN0YXR1cz02OSk6KFUoaSwwKSxVKGksMCksVShpLDApLFUoaSwwKSxVKGksMCksVShpLDk9PT1pLmxldmVsPzI6Mjw9aS5zdHJhdGVneXx8aS5sZXZlbDwyPzQ6MCksVShpLDMpLGkuc3RhdHVzPUUpO2Vsc2V7dmFyIGE9disoaS53X2JpdHMtODw8NCk8PDg7YXw9KDI8PWkuc3RyYXRlZ3l8fGkubGV2ZWw8Mj8wOmkubGV2ZWw8Nj8xOjY9PT1pLmxldmVsPzI6Myk8PDYsMCE9PWkuc3Ryc3RhcnQmJihhfD0zMiksYSs9MzEtYSUzMSxpLnN0YXR1cz1FLFAoaSxhKSwwIT09aS5zdHJzdGFydCYmKFAoaSx0LmFkbGVyPj4+MTYpLFAoaSw2NTUzNSZ0LmFkbGVyKSksdC5hZGxlcj0xfWlmKDY5PT09aS5zdGF0dXMpaWYoaS5nemhlYWQuZXh0cmEpe2ZvcihuPWkucGVuZGluZztpLmd6aW5kZXg8KDY1NTM1JmkuZ3poZWFkLmV4dHJhLmxlbmd0aCkmJihpLnBlbmRpbmchPT1pLnBlbmRpbmdfYnVmX3NpemV8fChpLmd6aGVhZC5oY3JjJiZpLnBlbmRpbmc+biYmKHQuYWRsZXI9cCh0LmFkbGVyLGkucGVuZGluZ19idWYsaS5wZW5kaW5nLW4sbikpLEYodCksbj1pLnBlbmRpbmcsaS5wZW5kaW5nIT09aS5wZW5kaW5nX2J1Zl9zaXplKSk7KVUoaSwyNTUmaS5nemhlYWQuZXh0cmFbaS5nemluZGV4XSksaS5nemluZGV4Kys7aS5nemhlYWQuaGNyYyYmaS5wZW5kaW5nPm4mJih0LmFkbGVyPXAodC5hZGxlcixpLnBlbmRpbmdfYnVmLGkucGVuZGluZy1uLG4pKSxpLmd6aW5kZXg9PT1pLmd6aGVhZC5leHRyYS5sZW5ndGgmJihpLmd6aW5kZXg9MCxpLnN0YXR1cz03Myl9ZWxzZSBpLnN0YXR1cz03MztpZig3Mz09PWkuc3RhdHVzKWlmKGkuZ3poZWFkLm5hbWUpe249aS5wZW5kaW5nO2Rve2lmKGkucGVuZGluZz09PWkucGVuZGluZ19idWZfc2l6ZSYmKGkuZ3poZWFkLmhjcmMmJmkucGVuZGluZz5uJiYodC5hZGxlcj1wKHQuYWRsZXIsaS5wZW5kaW5nX2J1ZixpLnBlbmRpbmctbixuKSksRih0KSxuPWkucGVuZGluZyxpLnBlbmRpbmc9PT1pLnBlbmRpbmdfYnVmX3NpemUpKXtzPTE7YnJlYWt9cz1pLmd6aW5kZXg8aS5nemhlYWQubmFtZS5sZW5ndGg/MjU1JmkuZ3poZWFkLm5hbWUuY2hhckNvZGVBdChpLmd6aW5kZXgrKyk6MCxVKGkscyl9d2hpbGUoMCE9PXMpO2kuZ3poZWFkLmhjcmMmJmkucGVuZGluZz5uJiYodC5hZGxlcj1wKHQuYWRsZXIsaS5wZW5kaW5nX2J1ZixpLnBlbmRpbmctbixuKSksMD09PXMmJihpLmd6aW5kZXg9MCxpLnN0YXR1cz05MSl9ZWxzZSBpLnN0YXR1cz05MTtpZig5MT09PWkuc3RhdHVzKWlmKGkuZ3poZWFkLmNvbW1lbnQpe249aS5wZW5kaW5nO2Rve2lmKGkucGVuZGluZz09PWkucGVuZGluZ19idWZfc2l6ZSYmKGkuZ3poZWFkLmhjcmMmJmkucGVuZGluZz5uJiYodC5hZGxlcj1wKHQuYWRsZXIsaS5wZW5kaW5nX2J1ZixpLnBlbmRpbmctbixuKSksRih0KSxuPWkucGVuZGluZyxpLnBlbmRpbmc9PT1pLnBlbmRpbmdfYnVmX3NpemUpKXtzPTE7YnJlYWt9cz1pLmd6aW5kZXg8aS5nemhlYWQuY29tbWVudC5sZW5ndGg/MjU1JmkuZ3poZWFkLmNvbW1lbnQuY2hhckNvZGVBdChpLmd6aW5kZXgrKyk6MCxVKGkscyl9d2hpbGUoMCE9PXMpO2kuZ3poZWFkLmhjcmMmJmkucGVuZGluZz5uJiYodC5hZGxlcj1wKHQuYWRsZXIsaS5wZW5kaW5nX2J1ZixpLnBlbmRpbmctbixuKSksMD09PXMmJihpLnN0YXR1cz0xMDMpfWVsc2UgaS5zdGF0dXM9MTAzO2lmKDEwMz09PWkuc3RhdHVzJiYoaS5nemhlYWQuaGNyYz8oaS5wZW5kaW5nKzI+aS5wZW5kaW5nX2J1Zl9zaXplJiZGKHQpLGkucGVuZGluZysyPD1pLnBlbmRpbmdfYnVmX3NpemUmJihVKGksMjU1JnQuYWRsZXIpLFUoaSx0LmFkbGVyPj44JjI1NSksdC5hZGxlcj0wLGkuc3RhdHVzPUUpKTppLnN0YXR1cz1FKSwwIT09aS5wZW5kaW5nKXtpZihGKHQpLDA9PT10LmF2YWlsX291dClyZXR1cm4gaS5sYXN0X2ZsdXNoPS0xLG19ZWxzZSBpZigwPT09dC5hdmFpbF9pbiYmVChlKTw9VChyKSYmZSE9PWYpcmV0dXJuIFIodCwtNSk7aWYoNjY2PT09aS5zdGF0dXMmJjAhPT10LmF2YWlsX2luKXJldHVybiBSKHQsLTUpO2lmKDAhPT10LmF2YWlsX2lufHwwIT09aS5sb29rYWhlYWR8fGUhPT1sJiY2NjYhPT1pLnN0YXR1cyl7dmFyIG89Mj09PWkuc3RyYXRlZ3k/ZnVuY3Rpb24odCxlKXtmb3IodmFyIHI7Oyl7aWYoMD09PXQubG9va2FoZWFkJiYoaih0KSwwPT09dC5sb29rYWhlYWQpKXtpZihlPT09bClyZXR1cm4gQTticmVha31pZih0Lm1hdGNoX2xlbmd0aD0wLHI9dS5fdHJfdGFsbHkodCwwLHQud2luZG93W3Quc3Ryc3RhcnRdKSx0Lmxvb2thaGVhZC0tLHQuc3Ryc3RhcnQrKyxyJiYoTih0LCExKSwwPT09dC5zdHJtLmF2YWlsX291dCkpcmV0dXJuIEF9cmV0dXJuIHQuaW5zZXJ0PTAsZT09PWY/KE4odCwhMCksMD09PXQuc3RybS5hdmFpbF9vdXQ/TzpCKTp0Lmxhc3RfbGl0JiYoTih0LCExKSwwPT09dC5zdHJtLmF2YWlsX291dCk/QTpJfShpLGUpOjM9PT1pLnN0cmF0ZWd5P2Z1bmN0aW9uKHQsZSl7Zm9yKHZhciByLGksbixzLGE9dC53aW5kb3c7Oyl7aWYodC5sb29rYWhlYWQ8PVMpe2lmKGoodCksdC5sb29rYWhlYWQ8PVMmJmU9PT1sKXJldHVybiBBO2lmKDA9PT10Lmxvb2thaGVhZClicmVha31pZih0Lm1hdGNoX2xlbmd0aD0wLHQubG9va2FoZWFkPj14JiYwPHQuc3Ryc3RhcnQmJihpPWFbbj10LnN0cnN0YXJ0LTFdKT09PWFbKytuXSYmaT09PWFbKytuXSYmaT09PWFbKytuXSl7cz10LnN0cnN0YXJ0K1M7ZG97fXdoaWxlKGk9PT1hWysrbl0mJmk9PT1hWysrbl0mJmk9PT1hWysrbl0mJmk9PT1hWysrbl0mJmk9PT1hWysrbl0mJmk9PT1hWysrbl0mJmk9PT1hWysrbl0mJmk9PT1hWysrbl0mJm48cyk7dC5tYXRjaF9sZW5ndGg9Uy0ocy1uKSx0Lm1hdGNoX2xlbmd0aD50Lmxvb2thaGVhZCYmKHQubWF0Y2hfbGVuZ3RoPXQubG9va2FoZWFkKX1pZih0Lm1hdGNoX2xlbmd0aD49eD8ocj11Ll90cl90YWxseSh0LDEsdC5tYXRjaF9sZW5ndGgteCksdC5sb29rYWhlYWQtPXQubWF0Y2hfbGVuZ3RoLHQuc3Ryc3RhcnQrPXQubWF0Y2hfbGVuZ3RoLHQubWF0Y2hfbGVuZ3RoPTApOihyPXUuX3RyX3RhbGx5KHQsMCx0LndpbmRvd1t0LnN0cnN0YXJ0XSksdC5sb29rYWhlYWQtLSx0LnN0cnN0YXJ0KyspLHImJihOKHQsITEpLDA9PT10LnN0cm0uYXZhaWxfb3V0KSlyZXR1cm4gQX1yZXR1cm4gdC5pbnNlcnQ9MCxlPT09Zj8oTih0LCEwKSwwPT09dC5zdHJtLmF2YWlsX291dD9POkIpOnQubGFzdF9saXQmJihOKHQsITEpLDA9PT10LnN0cm0uYXZhaWxfb3V0KT9BOkl9KGksZSk6aFtpLmxldmVsXS5mdW5jKGksZSk7aWYobyE9PU8mJm8hPT1CfHwoaS5zdGF0dXM9NjY2KSxvPT09QXx8bz09PU8pcmV0dXJuIDA9PT10LmF2YWlsX291dCYmKGkubGFzdF9mbHVzaD0tMSksbTtpZihvPT09SSYmKDE9PT1lP3UuX3RyX2FsaWduKGkpOjUhPT1lJiYodS5fdHJfc3RvcmVkX2Jsb2NrKGksMCwwLCExKSwzPT09ZSYmKEQoaS5oZWFkKSwwPT09aS5sb29rYWhlYWQmJihpLnN0cnN0YXJ0PTAsaS5ibG9ja19zdGFydD0wLGkuaW5zZXJ0PTApKSksRih0KSwwPT09dC5hdmFpbF9vdXQpKXJldHVybiBpLmxhc3RfZmx1c2g9LTEsbX1yZXR1cm4gZSE9PWY/bTppLndyYXA8PTA/MTooMj09PWkud3JhcD8oVShpLDI1NSZ0LmFkbGVyKSxVKGksdC5hZGxlcj4+OCYyNTUpLFUoaSx0LmFkbGVyPj4xNiYyNTUpLFUoaSx0LmFkbGVyPj4yNCYyNTUpLFUoaSwyNTUmdC50b3RhbF9pbiksVShpLHQudG90YWxfaW4+PjgmMjU1KSxVKGksdC50b3RhbF9pbj4+MTYmMjU1KSxVKGksdC50b3RhbF9pbj4+MjQmMjU1KSk6KFAoaSx0LmFkbGVyPj4+MTYpLFAoaSw2NTUzNSZ0LmFkbGVyKSksRih0KSwwPGkud3JhcCYmKGkud3JhcD0taS53cmFwKSwwIT09aS5wZW5kaW5nP206MSl9LHIuZGVmbGF0ZUVuZD1mdW5jdGlvbih0KXt2YXIgZTtyZXR1cm4gdCYmdC5zdGF0ZT8oZT10LnN0YXRlLnN0YXR1cykhPT1DJiY2OSE9PWUmJjczIT09ZSYmOTEhPT1lJiYxMDMhPT1lJiZlIT09RSYmNjY2IT09ZT9SKHQsXyk6KHQuc3RhdGU9bnVsbCxlPT09RT9SKHQsLTMpOm0pOl99LHIuZGVmbGF0ZVNldERpY3Rpb25hcnk9ZnVuY3Rpb24odCxlKXt2YXIgcixpLG4scyxhLG8saCx1LGw9ZS5sZW5ndGg7aWYoIXR8fCF0LnN0YXRlKXJldHVybiBfO2lmKDI9PT0ocz0ocj10LnN0YXRlKS53cmFwKXx8MT09PXMmJnIuc3RhdHVzIT09Q3x8ci5sb29rYWhlYWQpcmV0dXJuIF87Zm9yKDE9PT1zJiYodC5hZGxlcj1jKHQuYWRsZXIsZSxsLDApKSxyLndyYXA9MCxsPj1yLndfc2l6ZSYmKDA9PT1zJiYoRChyLmhlYWQpLHIuc3Ryc3RhcnQ9MCxyLmJsb2NrX3N0YXJ0PTAsci5pbnNlcnQ9MCksdT1uZXcgZC5CdWY4KHIud19zaXplKSxkLmFycmF5U2V0KHUsZSxsLXIud19zaXplLHIud19zaXplLDApLGU9dSxsPXIud19zaXplKSxhPXQuYXZhaWxfaW4sbz10Lm5leHRfaW4saD10LmlucHV0LHQuYXZhaWxfaW49bCx0Lm5leHRfaW49MCx0LmlucHV0PWUsaihyKTtyLmxvb2thaGVhZD49eDspe2ZvcihpPXIuc3Ryc3RhcnQsbj1yLmxvb2thaGVhZC0oeC0xKTtyLmluc19oPShyLmluc19oPDxyLmhhc2hfc2hpZnReci53aW5kb3dbaSt4LTFdKSZyLmhhc2hfbWFzayxyLnByZXZbaSZyLndfbWFza109ci5oZWFkW3IuaW5zX2hdLHIuaGVhZFtyLmluc19oXT1pLGkrKywtLW47KTtyLnN0cnN0YXJ0PWksci5sb29rYWhlYWQ9eC0xLGoocil9cmV0dXJuIHIuc3Ryc3RhcnQrPXIubG9va2FoZWFkLHIuYmxvY2tfc3RhcnQ9ci5zdHJzdGFydCxyLmluc2VydD1yLmxvb2thaGVhZCxyLmxvb2thaGVhZD0wLHIubWF0Y2hfbGVuZ3RoPXIucHJldl9sZW5ndGg9eC0xLHIubWF0Y2hfYXZhaWxhYmxlPTAsdC5uZXh0X2luPW8sdC5pbnB1dD1oLHQuYXZhaWxfaW49YSxyLndyYXA9cyxtfSxyLmRlZmxhdGVJbmZvPVwicGFrbyBkZWZsYXRlIChmcm9tIE5vZGVjYSBwcm9qZWN0KVwifSx7XCIuLi91dGlscy9jb21tb25cIjo0MSxcIi4vYWRsZXIzMlwiOjQzLFwiLi9jcmMzMlwiOjQ1LFwiLi9tZXNzYWdlc1wiOjUxLFwiLi90cmVlc1wiOjUyfV0sNDc6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9ZnVuY3Rpb24oKXt0aGlzLnRleHQ9MCx0aGlzLnRpbWU9MCx0aGlzLnhmbGFncz0wLHRoaXMub3M9MCx0aGlzLmV4dHJhPW51bGwsdGhpcy5leHRyYV9sZW49MCx0aGlzLm5hbWU9XCJcIix0aGlzLmNvbW1lbnQ9XCJcIix0aGlzLmhjcmM9MCx0aGlzLmRvbmU9ITF9fSx7fV0sNDg6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9ZnVuY3Rpb24odCxlKXt2YXIgcixpLG4scyxhLG8saCx1LGwsZixkLGMscCxtLF8sZyxiLHYseSx3LGsseCxTLHosQztyPXQuc3RhdGUsaT10Lm5leHRfaW4sej10LmlucHV0LG49aSsodC5hdmFpbF9pbi01KSxzPXQubmV4dF9vdXQsQz10Lm91dHB1dCxhPXMtKGUtdC5hdmFpbF9vdXQpLG89cysodC5hdmFpbF9vdXQtMjU3KSxoPXIuZG1heCx1PXIud3NpemUsbD1yLndoYXZlLGY9ci53bmV4dCxkPXIud2luZG93LGM9ci5ob2xkLHA9ci5iaXRzLG09ci5sZW5jb2RlLF89ci5kaXN0Y29kZSxnPSgxPDxyLmxlbmJpdHMpLTEsYj0oMTw8ci5kaXN0Yml0cyktMTt0OmRve3A8MTUmJihjKz16W2krK108PHAscCs9OCxjKz16W2krK108PHAscCs9OCksdj1tW2MmZ107ZTpmb3IoOzspe2lmKGM+Pj49eT12Pj4+MjQscC09eSwwPT09KHk9dj4+PjE2JjI1NSkpQ1tzKytdPTY1NTM1JnY7ZWxzZXtpZighKDE2JnkpKXtpZigwPT0oNjQmeSkpe3Y9bVsoNjU1MzUmdikrKGMmKDE8PHkpLTEpXTtjb250aW51ZSBlfWlmKDMyJnkpe3IubW9kZT0xMjticmVhayB0fXQubXNnPVwiaW52YWxpZCBsaXRlcmFsL2xlbmd0aCBjb2RlXCIsci5tb2RlPTMwO2JyZWFrIHR9dz02NTUzNSZ2LCh5Jj0xNSkmJihwPHkmJihjKz16W2krK108PHAscCs9OCksdys9YyYoMTw8eSktMSxjPj4+PXkscC09eSkscDwxNSYmKGMrPXpbaSsrXTw8cCxwKz04LGMrPXpbaSsrXTw8cCxwKz04KSx2PV9bYyZiXTtyOmZvcig7Oyl7aWYoYz4+Pj15PXY+Pj4yNCxwLT15LCEoMTYmKHk9dj4+PjE2JjI1NSkpKXtpZigwPT0oNjQmeSkpe3Y9X1soNjU1MzUmdikrKGMmKDE8PHkpLTEpXTtjb250aW51ZSByfXQubXNnPVwiaW52YWxpZCBkaXN0YW5jZSBjb2RlXCIsci5tb2RlPTMwO2JyZWFrIHR9aWYoaz02NTUzNSZ2LHA8KHkmPTE1KSYmKGMrPXpbaSsrXTw8cCwocCs9OCk8eSYmKGMrPXpbaSsrXTw8cCxwKz04KSksaDwoays9YyYoMTw8eSktMSkpe3QubXNnPVwiaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2tcIixyLm1vZGU9MzA7YnJlYWsgdH1pZihjPj4+PXkscC09eSwoeT1zLWEpPGspe2lmKGw8KHk9ay15KSYmci5zYW5lKXt0Lm1zZz1cImludmFsaWQgZGlzdGFuY2UgdG9vIGZhciBiYWNrXCIsci5tb2RlPTMwO2JyZWFrIHR9aWYoUz1kLCh4PTApPT09Zil7aWYoeCs9dS15LHk8dyl7Zm9yKHctPXk7Q1tzKytdPWRbeCsrXSwtLXk7KTt4PXMtayxTPUN9fWVsc2UgaWYoZjx5KXtpZih4Kz11K2YteSwoeS09Zik8dyl7Zm9yKHctPXk7Q1tzKytdPWRbeCsrXSwtLXk7KTtpZih4PTAsZjx3KXtmb3Iody09eT1mO0NbcysrXT1kW3grK10sLS15Oyk7eD1zLWssUz1DfX19ZWxzZSBpZih4Kz1mLXkseTx3KXtmb3Iody09eTtDW3MrK109ZFt4KytdLC0teTspO3g9cy1rLFM9Q31mb3IoOzI8dzspQ1tzKytdPVNbeCsrXSxDW3MrK109U1t4KytdLENbcysrXT1TW3grK10sdy09Mzt3JiYoQ1tzKytdPVNbeCsrXSwxPHcmJihDW3MrK109U1t4KytdKSl9ZWxzZXtmb3IoeD1zLWs7Q1tzKytdPUNbeCsrXSxDW3MrK109Q1t4KytdLENbcysrXT1DW3grK10sMjwody09Myk7KTt3JiYoQ1tzKytdPUNbeCsrXSwxPHcmJihDW3MrK109Q1t4KytdKSl9YnJlYWt9fWJyZWFrfX13aGlsZShpPG4mJnM8byk7aS09dz1wPj4zLGMmPSgxPDwocC09dzw8MykpLTEsdC5uZXh0X2luPWksdC5uZXh0X291dD1zLHQuYXZhaWxfaW49aTxuP24taSs1OjUtKGktbiksdC5hdmFpbF9vdXQ9czxvP28tcysyNTc6MjU3LShzLW8pLHIuaG9sZD1jLHIuYml0cz1wfX0se31dLDQ5OltmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIEk9dChcIi4uL3V0aWxzL2NvbW1vblwiKSxPPXQoXCIuL2FkbGVyMzJcIiksQj10KFwiLi9jcmMzMlwiKSxSPXQoXCIuL2luZmZhc3RcIiksVD10KFwiLi9pbmZ0cmVlc1wiKSxEPTEsRj0yLE49MCxVPS0yLFA9MSxpPTg1MixuPTU5MjtmdW5jdGlvbiBMKHQpe3JldHVybih0Pj4+MjQmMjU1KSsodD4+PjgmNjUyODApKygoNjUyODAmdCk8PDgpKygoMjU1JnQpPDwyNCl9ZnVuY3Rpb24gcygpe3RoaXMubW9kZT0wLHRoaXMubGFzdD0hMSx0aGlzLndyYXA9MCx0aGlzLmhhdmVkaWN0PSExLHRoaXMuZmxhZ3M9MCx0aGlzLmRtYXg9MCx0aGlzLmNoZWNrPTAsdGhpcy50b3RhbD0wLHRoaXMuaGVhZD1udWxsLHRoaXMud2JpdHM9MCx0aGlzLndzaXplPTAsdGhpcy53aGF2ZT0wLHRoaXMud25leHQ9MCx0aGlzLndpbmRvdz1udWxsLHRoaXMuaG9sZD0wLHRoaXMuYml0cz0wLHRoaXMubGVuZ3RoPTAsdGhpcy5vZmZzZXQ9MCx0aGlzLmV4dHJhPTAsdGhpcy5sZW5jb2RlPW51bGwsdGhpcy5kaXN0Y29kZT1udWxsLHRoaXMubGVuYml0cz0wLHRoaXMuZGlzdGJpdHM9MCx0aGlzLm5jb2RlPTAsdGhpcy5ubGVuPTAsdGhpcy5uZGlzdD0wLHRoaXMuaGF2ZT0wLHRoaXMubmV4dD1udWxsLHRoaXMubGVucz1uZXcgSS5CdWYxNigzMjApLHRoaXMud29yaz1uZXcgSS5CdWYxNigyODgpLHRoaXMubGVuZHluPW51bGwsdGhpcy5kaXN0ZHluPW51bGwsdGhpcy5zYW5lPTAsdGhpcy5iYWNrPTAsdGhpcy53YXM9MH1mdW5jdGlvbiBhKHQpe3ZhciBlO3JldHVybiB0JiZ0LnN0YXRlPyhlPXQuc3RhdGUsdC50b3RhbF9pbj10LnRvdGFsX291dD1lLnRvdGFsPTAsdC5tc2c9XCJcIixlLndyYXAmJih0LmFkbGVyPTEmZS53cmFwKSxlLm1vZGU9UCxlLmxhc3Q9MCxlLmhhdmVkaWN0PTAsZS5kbWF4PTMyNzY4LGUuaGVhZD1udWxsLGUuaG9sZD0wLGUuYml0cz0wLGUubGVuY29kZT1lLmxlbmR5bj1uZXcgSS5CdWYzMihpKSxlLmRpc3Rjb2RlPWUuZGlzdGR5bj1uZXcgSS5CdWYzMihuKSxlLnNhbmU9MSxlLmJhY2s9LTEsTik6VX1mdW5jdGlvbiBvKHQpe3ZhciBlO3JldHVybiB0JiZ0LnN0YXRlPygoZT10LnN0YXRlKS53c2l6ZT0wLGUud2hhdmU9MCxlLnduZXh0PTAsYSh0KSk6VX1mdW5jdGlvbiBoKHQsZSl7dmFyIHIsaTtyZXR1cm4gdCYmdC5zdGF0ZT8oaT10LnN0YXRlLGU8MD8ocj0wLGU9LWUpOihyPTErKGU+PjQpLGU8NDgmJihlJj0xNSkpLGUmJihlPDh8fDE1PGUpP1U6KG51bGwhPT1pLndpbmRvdyYmaS53Yml0cyE9PWUmJihpLndpbmRvdz1udWxsKSxpLndyYXA9cixpLndiaXRzPWUsbyh0KSkpOlV9ZnVuY3Rpb24gdSh0LGUpe3ZhciByLGk7cmV0dXJuIHQ/KGk9bmV3IHMsKHQuc3RhdGU9aSkud2luZG93PW51bGwsKHI9aCh0LGUpKSE9PU4mJih0LnN0YXRlPW51bGwpLHIpOlV9dmFyIGwsZixkPSEwO2Z1bmN0aW9uIGoodCl7aWYoZCl7dmFyIGU7Zm9yKGw9bmV3IEkuQnVmMzIoNTEyKSxmPW5ldyBJLkJ1ZjMyKDMyKSxlPTA7ZTwxNDQ7KXQubGVuc1tlKytdPTg7Zm9yKDtlPDI1NjspdC5sZW5zW2UrK109OTtmb3IoO2U8MjgwOyl0LmxlbnNbZSsrXT03O2Zvcig7ZTwyODg7KXQubGVuc1tlKytdPTg7Zm9yKFQoRCx0LmxlbnMsMCwyODgsbCwwLHQud29yayx7Yml0czo5fSksZT0wO2U8MzI7KXQubGVuc1tlKytdPTU7VChGLHQubGVucywwLDMyLGYsMCx0Lndvcmsse2JpdHM6NX0pLGQ9ITF9dC5sZW5jb2RlPWwsdC5sZW5iaXRzPTksdC5kaXN0Y29kZT1mLHQuZGlzdGJpdHM9NX1mdW5jdGlvbiBaKHQsZSxyLGkpe3ZhciBuLHM9dC5zdGF0ZTtyZXR1cm4gbnVsbD09PXMud2luZG93JiYocy53c2l6ZT0xPDxzLndiaXRzLHMud25leHQ9MCxzLndoYXZlPTAscy53aW5kb3c9bmV3IEkuQnVmOChzLndzaXplKSksaT49cy53c2l6ZT8oSS5hcnJheVNldChzLndpbmRvdyxlLHItcy53c2l6ZSxzLndzaXplLDApLHMud25leHQ9MCxzLndoYXZlPXMud3NpemUpOihpPChuPXMud3NpemUtcy53bmV4dCkmJihuPWkpLEkuYXJyYXlTZXQocy53aW5kb3csZSxyLWksbixzLnduZXh0KSwoaS09bik/KEkuYXJyYXlTZXQocy53aW5kb3csZSxyLWksaSwwKSxzLnduZXh0PWkscy53aGF2ZT1zLndzaXplKToocy53bmV4dCs9bixzLnduZXh0PT09cy53c2l6ZSYmKHMud25leHQ9MCkscy53aGF2ZTxzLndzaXplJiYocy53aGF2ZSs9bikpKSwwfXIuaW5mbGF0ZVJlc2V0PW8sci5pbmZsYXRlUmVzZXQyPWgsci5pbmZsYXRlUmVzZXRLZWVwPWEsci5pbmZsYXRlSW5pdD1mdW5jdGlvbih0KXtyZXR1cm4gdSh0LDE1KX0sci5pbmZsYXRlSW5pdDI9dSxyLmluZmxhdGU9ZnVuY3Rpb24odCxlKXt2YXIgcixpLG4scyxhLG8saCx1LGwsZixkLGMscCxtLF8sZyxiLHYseSx3LGsseCxTLHosQz0wLEU9bmV3IEkuQnVmOCg0KSxBPVsxNiwxNywxOCwwLDgsNyw5LDYsMTAsNSwxMSw0LDEyLDMsMTMsMiwxNCwxLDE1XTtpZighdHx8IXQuc3RhdGV8fCF0Lm91dHB1dHx8IXQuaW5wdXQmJjAhPT10LmF2YWlsX2luKXJldHVybiBVOzEyPT09KHI9dC5zdGF0ZSkubW9kZSYmKHIubW9kZT0xMyksYT10Lm5leHRfb3V0LG49dC5vdXRwdXQsaD10LmF2YWlsX291dCxzPXQubmV4dF9pbixpPXQuaW5wdXQsbz10LmF2YWlsX2luLHU9ci5ob2xkLGw9ci5iaXRzLGY9byxkPWgseD1OO3Q6Zm9yKDs7KXN3aXRjaChyLm1vZGUpe2Nhc2UgUDppZigwPT09ci53cmFwKXtyLm1vZGU9MTM7YnJlYWt9Zm9yKDtsPDE2Oyl7aWYoMD09PW8pYnJlYWsgdDtvLS0sdSs9aVtzKytdPDxsLGwrPTh9aWYoMiZyLndyYXAmJjM1NjE1PT09dSl7RVtyLmNoZWNrPTBdPTI1NSZ1LEVbMV09dT4+PjgmMjU1LHIuY2hlY2s9QihyLmNoZWNrLEUsMiwwKSxsPXU9MCxyLm1vZGU9MjticmVha31pZihyLmZsYWdzPTAsci5oZWFkJiYoci5oZWFkLmRvbmU9ITEpLCEoMSZyLndyYXApfHwoKCgyNTUmdSk8PDgpKyh1Pj44KSklMzEpe3QubXNnPVwiaW5jb3JyZWN0IGhlYWRlciBjaGVja1wiLHIubW9kZT0zMDticmVha31pZig4IT0oMTUmdSkpe3QubXNnPVwidW5rbm93biBjb21wcmVzc2lvbiBtZXRob2RcIixyLm1vZGU9MzA7YnJlYWt9aWYobC09NCxrPTgrKDE1Jih1Pj4+PTQpKSwwPT09ci53Yml0cylyLndiaXRzPWs7ZWxzZSBpZihrPnIud2JpdHMpe3QubXNnPVwiaW52YWxpZCB3aW5kb3cgc2l6ZVwiLHIubW9kZT0zMDticmVha31yLmRtYXg9MTw8ayx0LmFkbGVyPXIuY2hlY2s9MSxyLm1vZGU9NTEyJnU/MTA6MTIsbD11PTA7YnJlYWs7Y2FzZSAyOmZvcig7bDwxNjspe2lmKDA9PT1vKWJyZWFrIHQ7by0tLHUrPWlbcysrXTw8bCxsKz04fWlmKHIuZmxhZ3M9dSw4IT0oMjU1JnIuZmxhZ3MpKXt0Lm1zZz1cInVua25vd24gY29tcHJlc3Npb24gbWV0aG9kXCIsci5tb2RlPTMwO2JyZWFrfWlmKDU3MzQ0JnIuZmxhZ3Mpe3QubXNnPVwidW5rbm93biBoZWFkZXIgZmxhZ3Mgc2V0XCIsci5tb2RlPTMwO2JyZWFrfXIuaGVhZCYmKHIuaGVhZC50ZXh0PXU+PjgmMSksNTEyJnIuZmxhZ3MmJihFWzBdPTI1NSZ1LEVbMV09dT4+PjgmMjU1LHIuY2hlY2s9QihyLmNoZWNrLEUsMiwwKSksbD11PTAsci5tb2RlPTM7Y2FzZSAzOmZvcig7bDwzMjspe2lmKDA9PT1vKWJyZWFrIHQ7by0tLHUrPWlbcysrXTw8bCxsKz04fXIuaGVhZCYmKHIuaGVhZC50aW1lPXUpLDUxMiZyLmZsYWdzJiYoRVswXT0yNTUmdSxFWzFdPXU+Pj44JjI1NSxFWzJdPXU+Pj4xNiYyNTUsRVszXT11Pj4+MjQmMjU1LHIuY2hlY2s9QihyLmNoZWNrLEUsNCwwKSksbD11PTAsci5tb2RlPTQ7Y2FzZSA0OmZvcig7bDwxNjspe2lmKDA9PT1vKWJyZWFrIHQ7by0tLHUrPWlbcysrXTw8bCxsKz04fXIuaGVhZCYmKHIuaGVhZC54ZmxhZ3M9MjU1JnUsci5oZWFkLm9zPXU+PjgpLDUxMiZyLmZsYWdzJiYoRVswXT0yNTUmdSxFWzFdPXU+Pj44JjI1NSxyLmNoZWNrPUIoci5jaGVjayxFLDIsMCkpLGw9dT0wLHIubW9kZT01O2Nhc2UgNTppZigxMDI0JnIuZmxhZ3Mpe2Zvcig7bDwxNjspe2lmKDA9PT1vKWJyZWFrIHQ7by0tLHUrPWlbcysrXTw8bCxsKz04fXIubGVuZ3RoPXUsci5oZWFkJiYoci5oZWFkLmV4dHJhX2xlbj11KSw1MTImci5mbGFncyYmKEVbMF09MjU1JnUsRVsxXT11Pj4+OCYyNTUsci5jaGVjaz1CKHIuY2hlY2ssRSwyLDApKSxsPXU9MH1lbHNlIHIuaGVhZCYmKHIuaGVhZC5leHRyYT1udWxsKTtyLm1vZGU9NjtjYXNlIDY6aWYoMTAyNCZyLmZsYWdzJiYobzwoYz1yLmxlbmd0aCkmJihjPW8pLGMmJihyLmhlYWQmJihrPXIuaGVhZC5leHRyYV9sZW4tci5sZW5ndGgsci5oZWFkLmV4dHJhfHwoci5oZWFkLmV4dHJhPW5ldyBBcnJheShyLmhlYWQuZXh0cmFfbGVuKSksSS5hcnJheVNldChyLmhlYWQuZXh0cmEsaSxzLGMsaykpLDUxMiZyLmZsYWdzJiYoci5jaGVjaz1CKHIuY2hlY2ssaSxjLHMpKSxvLT1jLHMrPWMsci5sZW5ndGgtPWMpLHIubGVuZ3RoKSlicmVhayB0O3IubGVuZ3RoPTAsci5tb2RlPTc7Y2FzZSA3OmlmKDIwNDgmci5mbGFncyl7aWYoMD09PW8pYnJlYWsgdDtmb3IoYz0wO2s9aVtzK2MrK10sci5oZWFkJiZrJiZyLmxlbmd0aDw2NTUzNiYmKHIuaGVhZC5uYW1lKz1TdHJpbmcuZnJvbUNoYXJDb2RlKGspKSxrJiZjPG87KTtpZig1MTImci5mbGFncyYmKHIuY2hlY2s9QihyLmNoZWNrLGksYyxzKSksby09YyxzKz1jLGspYnJlYWsgdH1lbHNlIHIuaGVhZCYmKHIuaGVhZC5uYW1lPW51bGwpO3IubGVuZ3RoPTAsci5tb2RlPTg7Y2FzZSA4OmlmKDQwOTYmci5mbGFncyl7aWYoMD09PW8pYnJlYWsgdDtmb3IoYz0wO2s9aVtzK2MrK10sci5oZWFkJiZrJiZyLmxlbmd0aDw2NTUzNiYmKHIuaGVhZC5jb21tZW50Kz1TdHJpbmcuZnJvbUNoYXJDb2RlKGspKSxrJiZjPG87KTtpZig1MTImci5mbGFncyYmKHIuY2hlY2s9QihyLmNoZWNrLGksYyxzKSksby09YyxzKz1jLGspYnJlYWsgdH1lbHNlIHIuaGVhZCYmKHIuaGVhZC5jb21tZW50PW51bGwpO3IubW9kZT05O2Nhc2UgOTppZig1MTImci5mbGFncyl7Zm9yKDtsPDE2Oyl7aWYoMD09PW8pYnJlYWsgdDtvLS0sdSs9aVtzKytdPDxsLGwrPTh9aWYodSE9PSg2NTUzNSZyLmNoZWNrKSl7dC5tc2c9XCJoZWFkZXIgY3JjIG1pc21hdGNoXCIsci5tb2RlPTMwO2JyZWFrfWw9dT0wfXIuaGVhZCYmKHIuaGVhZC5oY3JjPXIuZmxhZ3M+PjkmMSxyLmhlYWQuZG9uZT0hMCksdC5hZGxlcj1yLmNoZWNrPTAsci5tb2RlPTEyO2JyZWFrO2Nhc2UgMTA6Zm9yKDtsPDMyOyl7aWYoMD09PW8pYnJlYWsgdDtvLS0sdSs9aVtzKytdPDxsLGwrPTh9dC5hZGxlcj1yLmNoZWNrPUwodSksbD11PTAsci5tb2RlPTExO2Nhc2UgMTE6aWYoMD09PXIuaGF2ZWRpY3QpcmV0dXJuIHQubmV4dF9vdXQ9YSx0LmF2YWlsX291dD1oLHQubmV4dF9pbj1zLHQuYXZhaWxfaW49byxyLmhvbGQ9dSxyLmJpdHM9bCwyO3QuYWRsZXI9ci5jaGVjaz0xLHIubW9kZT0xMjtjYXNlIDEyOmlmKDU9PT1lfHw2PT09ZSlicmVhayB0O2Nhc2UgMTM6aWYoci5sYXN0KXt1Pj4+PTcmbCxsLT03Jmwsci5tb2RlPTI3O2JyZWFrfWZvcig7bDwzOyl7aWYoMD09PW8pYnJlYWsgdDtvLS0sdSs9aVtzKytdPDxsLGwrPTh9c3dpdGNoKHIubGFzdD0xJnUsbC09MSwzJih1Pj4+PTEpKXtjYXNlIDA6ci5tb2RlPTE0O2JyZWFrO2Nhc2UgMTppZihqKHIpLHIubW9kZT0yMCw2IT09ZSlicmVhazt1Pj4+PTIsbC09MjticmVhayB0O2Nhc2UgMjpyLm1vZGU9MTc7YnJlYWs7Y2FzZSAzOnQubXNnPVwiaW52YWxpZCBibG9jayB0eXBlXCIsci5tb2RlPTMwfXU+Pj49MixsLT0yO2JyZWFrO2Nhc2UgMTQ6Zm9yKHU+Pj49NyZsLGwtPTcmbDtsPDMyOyl7aWYoMD09PW8pYnJlYWsgdDtvLS0sdSs9aVtzKytdPDxsLGwrPTh9aWYoKDY1NTM1JnUpIT0odT4+PjE2XjY1NTM1KSl7dC5tc2c9XCJpbnZhbGlkIHN0b3JlZCBibG9jayBsZW5ndGhzXCIsci5tb2RlPTMwO2JyZWFrfWlmKHIubGVuZ3RoPTY1NTM1JnUsbD11PTAsci5tb2RlPTE1LDY9PT1lKWJyZWFrIHQ7Y2FzZSAxNTpyLm1vZGU9MTY7Y2FzZSAxNjppZihjPXIubGVuZ3RoKXtpZihvPGMmJihjPW8pLGg8YyYmKGM9aCksMD09PWMpYnJlYWsgdDtJLmFycmF5U2V0KG4saSxzLGMsYSksby09YyxzKz1jLGgtPWMsYSs9YyxyLmxlbmd0aC09YzticmVha31yLm1vZGU9MTI7YnJlYWs7Y2FzZSAxNzpmb3IoO2w8MTQ7KXtpZigwPT09bylicmVhayB0O28tLSx1Kz1pW3MrK108PGwsbCs9OH1pZihyLm5sZW49MjU3KygzMSZ1KSx1Pj4+PTUsbC09NSxyLm5kaXN0PTErKDMxJnUpLHU+Pj49NSxsLT01LHIubmNvZGU9NCsoMTUmdSksdT4+Pj00LGwtPTQsMjg2PHIubmxlbnx8MzA8ci5uZGlzdCl7dC5tc2c9XCJ0b28gbWFueSBsZW5ndGggb3IgZGlzdGFuY2Ugc3ltYm9sc1wiLHIubW9kZT0zMDticmVha31yLmhhdmU9MCxyLm1vZGU9MTg7Y2FzZSAxODpmb3IoO3IuaGF2ZTxyLm5jb2RlOyl7Zm9yKDtsPDM7KXtpZigwPT09bylicmVhayB0O28tLSx1Kz1pW3MrK108PGwsbCs9OH1yLmxlbnNbQVtyLmhhdmUrK11dPTcmdSx1Pj4+PTMsbC09M31mb3IoO3IuaGF2ZTwxOTspci5sZW5zW0Fbci5oYXZlKytdXT0wO2lmKHIubGVuY29kZT1yLmxlbmR5bixyLmxlbmJpdHM9NyxTPXtiaXRzOnIubGVuYml0c30seD1UKDAsci5sZW5zLDAsMTksci5sZW5jb2RlLDAsci53b3JrLFMpLHIubGVuYml0cz1TLmJpdHMseCl7dC5tc2c9XCJpbnZhbGlkIGNvZGUgbGVuZ3RocyBzZXRcIixyLm1vZGU9MzA7YnJlYWt9ci5oYXZlPTAsci5tb2RlPTE5O2Nhc2UgMTk6Zm9yKDtyLmhhdmU8ci5ubGVuK3IubmRpc3Q7KXtmb3IoO2c9KEM9ci5sZW5jb2RlW3UmKDE8PHIubGVuYml0cyktMV0pPj4+MTYmMjU1LGI9NjU1MzUmQywhKChfPUM+Pj4yNCk8PWwpOyl7aWYoMD09PW8pYnJlYWsgdDtvLS0sdSs9aVtzKytdPDxsLGwrPTh9aWYoYjwxNil1Pj4+PV8sbC09XyxyLmxlbnNbci5oYXZlKytdPWI7ZWxzZXtpZigxNj09PWIpe2Zvcih6PV8rMjtsPHo7KXtpZigwPT09bylicmVhayB0O28tLSx1Kz1pW3MrK108PGwsbCs9OH1pZih1Pj4+PV8sbC09XywwPT09ci5oYXZlKXt0Lm1zZz1cImludmFsaWQgYml0IGxlbmd0aCByZXBlYXRcIixyLm1vZGU9MzA7YnJlYWt9az1yLmxlbnNbci5oYXZlLTFdLGM9MysoMyZ1KSx1Pj4+PTIsbC09Mn1lbHNlIGlmKDE3PT09Yil7Zm9yKHo9XyszO2w8ejspe2lmKDA9PT1vKWJyZWFrIHQ7by0tLHUrPWlbcysrXTw8bCxsKz04fWwtPV8saz0wLGM9MysoNyYodT4+Pj1fKSksdT4+Pj0zLGwtPTN9ZWxzZXtmb3Ioej1fKzc7bDx6Oyl7aWYoMD09PW8pYnJlYWsgdDtvLS0sdSs9aVtzKytdPDxsLGwrPTh9bC09XyxrPTAsYz0xMSsoMTI3Jih1Pj4+PV8pKSx1Pj4+PTcsbC09N31pZihyLmhhdmUrYz5yLm5sZW4rci5uZGlzdCl7dC5tc2c9XCJpbnZhbGlkIGJpdCBsZW5ndGggcmVwZWF0XCIsci5tb2RlPTMwO2JyZWFrfWZvcig7Yy0tOylyLmxlbnNbci5oYXZlKytdPWt9fWlmKDMwPT09ci5tb2RlKWJyZWFrO2lmKDA9PT1yLmxlbnNbMjU2XSl7dC5tc2c9XCJpbnZhbGlkIGNvZGUgLS0gbWlzc2luZyBlbmQtb2YtYmxvY2tcIixyLm1vZGU9MzA7YnJlYWt9aWYoci5sZW5iaXRzPTksUz17Yml0czpyLmxlbmJpdHN9LHg9VChELHIubGVucywwLHIubmxlbixyLmxlbmNvZGUsMCxyLndvcmssUyksci5sZW5iaXRzPVMuYml0cyx4KXt0Lm1zZz1cImludmFsaWQgbGl0ZXJhbC9sZW5ndGhzIHNldFwiLHIubW9kZT0zMDticmVha31pZihyLmRpc3RiaXRzPTYsci5kaXN0Y29kZT1yLmRpc3RkeW4sUz17Yml0czpyLmRpc3RiaXRzfSx4PVQoRixyLmxlbnMsci5ubGVuLHIubmRpc3Qsci5kaXN0Y29kZSwwLHIud29yayxTKSxyLmRpc3RiaXRzPVMuYml0cyx4KXt0Lm1zZz1cImludmFsaWQgZGlzdGFuY2VzIHNldFwiLHIubW9kZT0zMDticmVha31pZihyLm1vZGU9MjAsNj09PWUpYnJlYWsgdDtjYXNlIDIwOnIubW9kZT0yMTtjYXNlIDIxOmlmKDY8PW8mJjI1ODw9aCl7dC5uZXh0X291dD1hLHQuYXZhaWxfb3V0PWgsdC5uZXh0X2luPXMsdC5hdmFpbF9pbj1vLHIuaG9sZD11LHIuYml0cz1sLFIodCxkKSxhPXQubmV4dF9vdXQsbj10Lm91dHB1dCxoPXQuYXZhaWxfb3V0LHM9dC5uZXh0X2luLGk9dC5pbnB1dCxvPXQuYXZhaWxfaW4sdT1yLmhvbGQsbD1yLmJpdHMsMTI9PT1yLm1vZGUmJihyLmJhY2s9LTEpO2JyZWFrfWZvcihyLmJhY2s9MDtnPShDPXIubGVuY29kZVt1JigxPDxyLmxlbmJpdHMpLTFdKT4+PjE2JjI1NSxiPTY1NTM1JkMsISgoXz1DPj4+MjQpPD1sKTspe2lmKDA9PT1vKWJyZWFrIHQ7by0tLHUrPWlbcysrXTw8bCxsKz04fWlmKGcmJjA9PSgyNDAmZykpe2Zvcih2PV8seT1nLHc9YjtnPShDPXIubGVuY29kZVt3KygodSYoMTw8dit5KS0xKT4+dildKT4+PjE2JjI1NSxiPTY1NTM1JkMsISh2KyhfPUM+Pj4yNCk8PWwpOyl7aWYoMD09PW8pYnJlYWsgdDtvLS0sdSs9aVtzKytdPDxsLGwrPTh9dT4+Pj12LGwtPXYsci5iYWNrKz12fWlmKHU+Pj49XyxsLT1fLHIuYmFjays9XyxyLmxlbmd0aD1iLDA9PT1nKXtyLm1vZGU9MjY7YnJlYWt9aWYoMzImZyl7ci5iYWNrPS0xLHIubW9kZT0xMjticmVha31pZig2NCZnKXt0Lm1zZz1cImludmFsaWQgbGl0ZXJhbC9sZW5ndGggY29kZVwiLHIubW9kZT0zMDticmVha31yLmV4dHJhPTE1Jmcsci5tb2RlPTIyO2Nhc2UgMjI6aWYoci5leHRyYSl7Zm9yKHo9ci5leHRyYTtsPHo7KXtpZigwPT09bylicmVhayB0O28tLSx1Kz1pW3MrK108PGwsbCs9OH1yLmxlbmd0aCs9dSYoMTw8ci5leHRyYSktMSx1Pj4+PXIuZXh0cmEsbC09ci5leHRyYSxyLmJhY2srPXIuZXh0cmF9ci53YXM9ci5sZW5ndGgsci5tb2RlPTIzO2Nhc2UgMjM6Zm9yKDtnPShDPXIuZGlzdGNvZGVbdSYoMTw8ci5kaXN0Yml0cyktMV0pPj4+MTYmMjU1LGI9NjU1MzUmQywhKChfPUM+Pj4yNCk8PWwpOyl7aWYoMD09PW8pYnJlYWsgdDtvLS0sdSs9aVtzKytdPDxsLGwrPTh9aWYoMD09KDI0MCZnKSl7Zm9yKHY9Xyx5PWcsdz1iO2c9KEM9ci5kaXN0Y29kZVt3KygodSYoMTw8dit5KS0xKT4+dildKT4+PjE2JjI1NSxiPTY1NTM1JkMsISh2KyhfPUM+Pj4yNCk8PWwpOyl7aWYoMD09PW8pYnJlYWsgdDtvLS0sdSs9aVtzKytdPDxsLGwrPTh9dT4+Pj12LGwtPXYsci5iYWNrKz12fWlmKHU+Pj49XyxsLT1fLHIuYmFjays9Xyw2NCZnKXt0Lm1zZz1cImludmFsaWQgZGlzdGFuY2UgY29kZVwiLHIubW9kZT0zMDticmVha31yLm9mZnNldD1iLHIuZXh0cmE9MTUmZyxyLm1vZGU9MjQ7Y2FzZSAyNDppZihyLmV4dHJhKXtmb3Ioej1yLmV4dHJhO2w8ejspe2lmKDA9PT1vKWJyZWFrIHQ7by0tLHUrPWlbcysrXTw8bCxsKz04fXIub2Zmc2V0Kz11JigxPDxyLmV4dHJhKS0xLHU+Pj49ci5leHRyYSxsLT1yLmV4dHJhLHIuYmFjays9ci5leHRyYX1pZihyLm9mZnNldD5yLmRtYXgpe3QubXNnPVwiaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2tcIixyLm1vZGU9MzA7YnJlYWt9ci5tb2RlPTI1O2Nhc2UgMjU6aWYoMD09PWgpYnJlYWsgdDtpZihjPWQtaCxyLm9mZnNldD5jKXtpZigoYz1yLm9mZnNldC1jKT5yLndoYXZlJiZyLnNhbmUpe3QubXNnPVwiaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2tcIixyLm1vZGU9MzA7YnJlYWt9cD1jPnIud25leHQ/KGMtPXIud25leHQsci53c2l6ZS1jKTpyLnduZXh0LWMsYz5yLmxlbmd0aCYmKGM9ci5sZW5ndGgpLG09ci53aW5kb3d9ZWxzZSBtPW4scD1hLXIub2Zmc2V0LGM9ci5sZW5ndGg7Zm9yKGg8YyYmKGM9aCksaC09YyxyLmxlbmd0aC09YztuW2ErK109bVtwKytdLC0tYzspOzA9PT1yLmxlbmd0aCYmKHIubW9kZT0yMSk7YnJlYWs7Y2FzZSAyNjppZigwPT09aClicmVhayB0O25bYSsrXT1yLmxlbmd0aCxoLS0sci5tb2RlPTIxO2JyZWFrO2Nhc2UgMjc6aWYoci53cmFwKXtmb3IoO2w8MzI7KXtpZigwPT09bylicmVhayB0O28tLSx1fD1pW3MrK108PGwsbCs9OH1pZihkLT1oLHQudG90YWxfb3V0Kz1kLHIudG90YWwrPWQsZCYmKHQuYWRsZXI9ci5jaGVjaz1yLmZsYWdzP0Ioci5jaGVjayxuLGQsYS1kKTpPKHIuY2hlY2ssbixkLGEtZCkpLGQ9aCwoci5mbGFncz91OkwodSkpIT09ci5jaGVjayl7dC5tc2c9XCJpbmNvcnJlY3QgZGF0YSBjaGVja1wiLHIubW9kZT0zMDticmVha31sPXU9MH1yLm1vZGU9Mjg7Y2FzZSAyODppZihyLndyYXAmJnIuZmxhZ3Mpe2Zvcig7bDwzMjspe2lmKDA9PT1vKWJyZWFrIHQ7by0tLHUrPWlbcysrXTw8bCxsKz04fWlmKHUhPT0oNDI5NDk2NzI5NSZyLnRvdGFsKSl7dC5tc2c9XCJpbmNvcnJlY3QgbGVuZ3RoIGNoZWNrXCIsci5tb2RlPTMwO2JyZWFrfWw9dT0wfXIubW9kZT0yOTtjYXNlIDI5Ong9MTticmVhayB0O2Nhc2UgMzA6eD0tMzticmVhayB0O2Nhc2UgMzE6cmV0dXJuLTQ7Y2FzZSAzMjpkZWZhdWx0OnJldHVybiBVfXJldHVybiB0Lm5leHRfb3V0PWEsdC5hdmFpbF9vdXQ9aCx0Lm5leHRfaW49cyx0LmF2YWlsX2luPW8sci5ob2xkPXUsci5iaXRzPWwsKHIud3NpemV8fGQhPT10LmF2YWlsX291dCYmci5tb2RlPDMwJiYoci5tb2RlPDI3fHw0IT09ZSkpJiZaKHQsdC5vdXRwdXQsdC5uZXh0X291dCxkLXQuYXZhaWxfb3V0KT8oci5tb2RlPTMxLC00KTooZi09dC5hdmFpbF9pbixkLT10LmF2YWlsX291dCx0LnRvdGFsX2luKz1mLHQudG90YWxfb3V0Kz1kLHIudG90YWwrPWQsci53cmFwJiZkJiYodC5hZGxlcj1yLmNoZWNrPXIuZmxhZ3M/QihyLmNoZWNrLG4sZCx0Lm5leHRfb3V0LWQpOk8oci5jaGVjayxuLGQsdC5uZXh0X291dC1kKSksdC5kYXRhX3R5cGU9ci5iaXRzKyhyLmxhc3Q/NjQ6MCkrKDEyPT09ci5tb2RlPzEyODowKSsoMjA9PT1yLm1vZGV8fDE1PT09ci5tb2RlPzI1NjowKSwoMD09ZiYmMD09PWR8fDQ9PT1lKSYmeD09PU4mJih4PS01KSx4KX0sci5pbmZsYXRlRW5kPWZ1bmN0aW9uKHQpe2lmKCF0fHwhdC5zdGF0ZSlyZXR1cm4gVTt2YXIgZT10LnN0YXRlO3JldHVybiBlLndpbmRvdyYmKGUud2luZG93PW51bGwpLHQuc3RhdGU9bnVsbCxOfSxyLmluZmxhdGVHZXRIZWFkZXI9ZnVuY3Rpb24odCxlKXt2YXIgcjtyZXR1cm4gdCYmdC5zdGF0ZT8wPT0oMiYocj10LnN0YXRlKS53cmFwKT9VOigoci5oZWFkPWUpLmRvbmU9ITEsTik6VX0sci5pbmZsYXRlU2V0RGljdGlvbmFyeT1mdW5jdGlvbih0LGUpe3ZhciByLGk9ZS5sZW5ndGg7cmV0dXJuIHQmJnQuc3RhdGU/MCE9PShyPXQuc3RhdGUpLndyYXAmJjExIT09ci5tb2RlP1U6MTE9PT1yLm1vZGUmJk8oMSxlLGksMCkhPT1yLmNoZWNrPy0zOloodCxlLGksaSk/KHIubW9kZT0zMSwtNCk6KHIuaGF2ZWRpY3Q9MSxOKTpVfSxyLmluZmxhdGVJbmZvPVwicGFrbyBpbmZsYXRlIChmcm9tIE5vZGVjYSBwcm9qZWN0KVwifSx7XCIuLi91dGlscy9jb21tb25cIjo0MSxcIi4vYWRsZXIzMlwiOjQzLFwiLi9jcmMzMlwiOjQ1LFwiLi9pbmZmYXN0XCI6NDgsXCIuL2luZnRyZWVzXCI6NTB9XSw1MDpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBEPXQoXCIuLi91dGlscy9jb21tb25cIiksRj1bMyw0LDUsNiw3LDgsOSwxMCwxMSwxMywxNSwxNywxOSwyMywyNywzMSwzNSw0Myw1MSw1OSw2Nyw4Myw5OSwxMTUsMTMxLDE2MywxOTUsMjI3LDI1OCwwLDBdLE49WzE2LDE2LDE2LDE2LDE2LDE2LDE2LDE2LDE3LDE3LDE3LDE3LDE4LDE4LDE4LDE4LDE5LDE5LDE5LDE5LDIwLDIwLDIwLDIwLDIxLDIxLDIxLDIxLDE2LDcyLDc4XSxVPVsxLDIsMyw0LDUsNyw5LDEzLDE3LDI1LDMzLDQ5LDY1LDk3LDEyOSwxOTMsMjU3LDM4NSw1MTMsNzY5LDEwMjUsMTUzNywyMDQ5LDMwNzMsNDA5Nyw2MTQ1LDgxOTMsMTIyODksMTYzODUsMjQ1NzcsMCwwXSxQPVsxNiwxNiwxNiwxNiwxNywxNywxOCwxOCwxOSwxOSwyMCwyMCwyMSwyMSwyMiwyMiwyMywyMywyNCwyNCwyNSwyNSwyNiwyNiwyNywyNywyOCwyOCwyOSwyOSw2NCw2NF07ZS5leHBvcnRzPWZ1bmN0aW9uKHQsZSxyLGksbixzLGEsbyl7dmFyIGgsdSxsLGYsZCxjLHAsbSxfLGc9by5iaXRzLGI9MCx2PTAseT0wLHc9MCxrPTAseD0wLFM9MCx6PTAsQz0wLEU9MCxBPW51bGwsST0wLE89bmV3IEQuQnVmMTYoMTYpLEI9bmV3IEQuQnVmMTYoMTYpLFI9bnVsbCxUPTA7Zm9yKGI9MDtiPD0xNTtiKyspT1tiXT0wO2Zvcih2PTA7djxpO3YrKylPW2Vbcit2XV0rKztmb3Ioaz1nLHc9MTU7MTw9dyYmMD09PU9bd107dy0tKTtpZih3PGsmJihrPXcpLDA9PT13KXJldHVybiBuW3MrK109MjA5NzE1MjAsbltzKytdPTIwOTcxNTIwLG8uYml0cz0xLDA7Zm9yKHk9MTt5PHcmJjA9PT1PW3ldO3krKyk7Zm9yKGs8eSYmKGs9eSksYj16PTE7Yjw9MTU7YisrKWlmKHo8PD0xLCh6LT1PW2JdKTwwKXJldHVybi0xO2lmKDA8eiYmKDA9PT10fHwxIT09dykpcmV0dXJuLTE7Zm9yKEJbMV09MCxiPTE7YjwxNTtiKyspQltiKzFdPUJbYl0rT1tiXTtmb3Iodj0wO3Y8aTt2KyspMCE9PWVbcit2XSYmKGFbQltlW3Irdl1dKytdPXYpO2lmKGM9MD09PXQ/KEE9Uj1hLDE5KToxPT09dD8oQT1GLEktPTI1NyxSPU4sVC09MjU3LDI1Nik6KEE9VSxSPVAsLTEpLGI9eSxkPXMsUz12PUU9MCxsPS0xLGY9KEM9MTw8KHg9aykpLTEsMT09PXQmJjg1MjxDfHwyPT09dCYmNTkyPEMpcmV0dXJuIDE7Zm9yKDs7KXtmb3IocD1iLVMsXz1hW3ZdPGM/KG09MCxhW3ZdKTphW3ZdPmM/KG09UltUK2Fbdl1dLEFbSSthW3ZdXSk6KG09OTYsMCksaD0xPDxiLVMseT11PTE8PHg7bltkKyhFPj5TKSsodS09aCldPXA8PDI0fG08PDE2fF98MCwwIT09dTspO2ZvcihoPTE8PGItMTtFJmg7KWg+Pj0xO2lmKDAhPT1oPyhFJj1oLTEsRSs9aCk6RT0wLHYrKywwPT0tLU9bYl0pe2lmKGI9PT13KWJyZWFrO2I9ZVtyK2Fbdl1dfWlmKGs8YiYmKEUmZikhPT1sKXtmb3IoMD09PVMmJihTPWspLGQrPXksej0xPDwoeD1iLVMpO3grUzx3JiYhKCh6LT1PW3grU10pPD0wKTspeCsrLHo8PD0xO2lmKEMrPTE8PHgsMT09PXQmJjg1MjxDfHwyPT09dCYmNTkyPEMpcmV0dXJuIDE7bltsPUUmZl09azw8MjR8eDw8MTZ8ZC1zfDB9fXJldHVybiAwIT09RSYmKG5bZCtFXT1iLVM8PDI0fDY0PDwxNnwwKSxvLmJpdHM9aywwfX0se1wiLi4vdXRpbHMvY29tbW9uXCI6NDF9XSw1MTpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz17MjpcIm5lZWQgZGljdGlvbmFyeVwiLDE6XCJzdHJlYW0gZW5kXCIsMDpcIlwiLFwiLTFcIjpcImZpbGUgZXJyb3JcIixcIi0yXCI6XCJzdHJlYW0gZXJyb3JcIixcIi0zXCI6XCJkYXRhIGVycm9yXCIsXCItNFwiOlwiaW5zdWZmaWNpZW50IG1lbW9yeVwiLFwiLTVcIjpcImJ1ZmZlciBlcnJvclwiLFwiLTZcIjpcImluY29tcGF0aWJsZSB2ZXJzaW9uXCJ9fSx7fV0sNTI6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj10KFwiLi4vdXRpbHMvY29tbW9uXCIpLG89MCxoPTE7ZnVuY3Rpb24gaSh0KXtmb3IodmFyIGU9dC5sZW5ndGg7MDw9LS1lOyl0W2VdPTB9dmFyIHM9MCxhPTI5LHU9MjU2LGw9dSsxK2EsZj0zMCxkPTE5LF89MipsKzEsZz0xNSxjPTE2LHA9NyxtPTI1NixiPTE2LHY9MTcseT0xOCx3PVswLDAsMCwwLDAsMCwwLDAsMSwxLDEsMSwyLDIsMiwyLDMsMywzLDMsNCw0LDQsNCw1LDUsNSw1LDBdLGs9WzAsMCwwLDAsMSwxLDIsMiwzLDMsNCw0LDUsNSw2LDYsNyw3LDgsOCw5LDksMTAsMTAsMTEsMTEsMTIsMTIsMTMsMTNdLHg9WzAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMiwzLDddLFM9WzE2LDE3LDE4LDAsOCw3LDksNiwxMCw1LDExLDQsMTIsMywxMywyLDE0LDEsMTVdLHo9bmV3IEFycmF5KDIqKGwrMikpO2koeik7dmFyIEM9bmV3IEFycmF5KDIqZik7aShDKTt2YXIgRT1uZXcgQXJyYXkoNTEyKTtpKEUpO3ZhciBBPW5ldyBBcnJheSgyNTYpO2koQSk7dmFyIEk9bmV3IEFycmF5KGEpO2koSSk7dmFyIE8sQixSLFQ9bmV3IEFycmF5KGYpO2Z1bmN0aW9uIEQodCxlLHIsaSxuKXt0aGlzLnN0YXRpY190cmVlPXQsdGhpcy5leHRyYV9iaXRzPWUsdGhpcy5leHRyYV9iYXNlPXIsdGhpcy5lbGVtcz1pLHRoaXMubWF4X2xlbmd0aD1uLHRoaXMuaGFzX3N0cmVlPXQmJnQubGVuZ3RofWZ1bmN0aW9uIEYodCxlKXt0aGlzLmR5bl90cmVlPXQsdGhpcy5tYXhfY29kZT0wLHRoaXMuc3RhdF9kZXNjPWV9ZnVuY3Rpb24gTih0KXtyZXR1cm4gdDwyNTY/RVt0XTpFWzI1NisodD4+PjcpXX1mdW5jdGlvbiBVKHQsZSl7dC5wZW5kaW5nX2J1Zlt0LnBlbmRpbmcrK109MjU1JmUsdC5wZW5kaW5nX2J1Zlt0LnBlbmRpbmcrK109ZT4+PjgmMjU1fWZ1bmN0aW9uIFAodCxlLHIpe3QuYmlfdmFsaWQ+Yy1yPyh0LmJpX2J1Znw9ZTw8dC5iaV92YWxpZCY2NTUzNSxVKHQsdC5iaV9idWYpLHQuYmlfYnVmPWU+PmMtdC5iaV92YWxpZCx0LmJpX3ZhbGlkKz1yLWMpOih0LmJpX2J1Znw9ZTw8dC5iaV92YWxpZCY2NTUzNSx0LmJpX3ZhbGlkKz1yKX1mdW5jdGlvbiBMKHQsZSxyKXtQKHQsclsyKmVdLHJbMiplKzFdKX1mdW5jdGlvbiBqKHQsZSl7Zm9yKHZhciByPTA7cnw9MSZ0LHQ+Pj49MSxyPDw9MSwwPC0tZTspO3JldHVybiByPj4+MX1mdW5jdGlvbiBaKHQsZSxyKXt2YXIgaSxuLHM9bmV3IEFycmF5KGcrMSksYT0wO2ZvcihpPTE7aTw9ZztpKyspc1tpXT1hPWErcltpLTFdPDwxO2ZvcihuPTA7bjw9ZTtuKyspe3ZhciBvPXRbMipuKzFdOzAhPT1vJiYodFsyKm5dPWooc1tvXSsrLG8pKX19ZnVuY3Rpb24gVyh0KXt2YXIgZTtmb3IoZT0wO2U8bDtlKyspdC5keW5fbHRyZWVbMiplXT0wO2ZvcihlPTA7ZTxmO2UrKyl0LmR5bl9kdHJlZVsyKmVdPTA7Zm9yKGU9MDtlPGQ7ZSsrKXQuYmxfdHJlZVsyKmVdPTA7dC5keW5fbHRyZWVbMiptXT0xLHQub3B0X2xlbj10LnN0YXRpY19sZW49MCx0Lmxhc3RfbGl0PXQubWF0Y2hlcz0wfWZ1bmN0aW9uIE0odCl7ODx0LmJpX3ZhbGlkP1UodCx0LmJpX2J1Zik6MDx0LmJpX3ZhbGlkJiYodC5wZW5kaW5nX2J1Zlt0LnBlbmRpbmcrK109dC5iaV9idWYpLHQuYmlfYnVmPTAsdC5iaV92YWxpZD0wfWZ1bmN0aW9uIEgodCxlLHIsaSl7dmFyIG49MiplLHM9MipyO3JldHVybiB0W25dPHRbc118fHRbbl09PT10W3NdJiZpW2VdPD1pW3JdfWZ1bmN0aW9uIEcodCxlLHIpe2Zvcih2YXIgaT10LmhlYXBbcl0sbj1yPDwxO248PXQuaGVhcF9sZW4mJihuPHQuaGVhcF9sZW4mJkgoZSx0LmhlYXBbbisxXSx0LmhlYXBbbl0sdC5kZXB0aCkmJm4rKywhSChlLGksdC5oZWFwW25dLHQuZGVwdGgpKTspdC5oZWFwW3JdPXQuaGVhcFtuXSxyPW4sbjw8PTE7dC5oZWFwW3JdPWl9ZnVuY3Rpb24gSyh0LGUscil7dmFyIGksbixzLGEsbz0wO2lmKDAhPT10Lmxhc3RfbGl0KWZvcig7aT10LnBlbmRpbmdfYnVmW3QuZF9idWYrMipvXTw8OHx0LnBlbmRpbmdfYnVmW3QuZF9idWYrMipvKzFdLG49dC5wZW5kaW5nX2J1Zlt0LmxfYnVmK29dLG8rKywwPT09aT9MKHQsbixlKTooTCh0LChzPUFbbl0pK3UrMSxlKSwwIT09KGE9d1tzXSkmJlAodCxuLT1JW3NdLGEpLEwodCxzPU4oLS1pKSxyKSwwIT09KGE9a1tzXSkmJlAodCxpLT1UW3NdLGEpKSxvPHQubGFzdF9saXQ7KTtMKHQsbSxlKX1mdW5jdGlvbiBZKHQsZSl7dmFyIHIsaSxuLHM9ZS5keW5fdHJlZSxhPWUuc3RhdF9kZXNjLnN0YXRpY190cmVlLG89ZS5zdGF0X2Rlc2MuaGFzX3N0cmVlLGg9ZS5zdGF0X2Rlc2MuZWxlbXMsdT0tMTtmb3IodC5oZWFwX2xlbj0wLHQuaGVhcF9tYXg9XyxyPTA7cjxoO3IrKykwIT09c1syKnJdPyh0LmhlYXBbKyt0LmhlYXBfbGVuXT11PXIsdC5kZXB0aFtyXT0wKTpzWzIqcisxXT0wO2Zvcig7dC5oZWFwX2xlbjwyOylzWzIqKG49dC5oZWFwWysrdC5oZWFwX2xlbl09dTwyPysrdTowKV09MSx0LmRlcHRoW25dPTAsdC5vcHRfbGVuLS0sbyYmKHQuc3RhdGljX2xlbi09YVsyKm4rMV0pO2ZvcihlLm1heF9jb2RlPXUscj10LmhlYXBfbGVuPj4xOzE8PXI7ci0tKUcodCxzLHIpO2ZvcihuPWg7cj10LmhlYXBbMV0sdC5oZWFwWzFdPXQuaGVhcFt0LmhlYXBfbGVuLS1dLEcodCxzLDEpLGk9dC5oZWFwWzFdLHQuaGVhcFstLXQuaGVhcF9tYXhdPXIsdC5oZWFwWy0tdC5oZWFwX21heF09aSxzWzIqbl09c1syKnJdK3NbMippXSx0LmRlcHRoW25dPSh0LmRlcHRoW3JdPj10LmRlcHRoW2ldP3QuZGVwdGhbcl06dC5kZXB0aFtpXSkrMSxzWzIqcisxXT1zWzIqaSsxXT1uLHQuaGVhcFsxXT1uKyssRyh0LHMsMSksMjw9dC5oZWFwX2xlbjspO3QuaGVhcFstLXQuaGVhcF9tYXhdPXQuaGVhcFsxXSxmdW5jdGlvbih0LGUpe3ZhciByLGksbixzLGEsbyxoPWUuZHluX3RyZWUsdT1lLm1heF9jb2RlLGw9ZS5zdGF0X2Rlc2Muc3RhdGljX3RyZWUsZj1lLnN0YXRfZGVzYy5oYXNfc3RyZWUsZD1lLnN0YXRfZGVzYy5leHRyYV9iaXRzLGM9ZS5zdGF0X2Rlc2MuZXh0cmFfYmFzZSxwPWUuc3RhdF9kZXNjLm1heF9sZW5ndGgsbT0wO2ZvcihzPTA7czw9ZztzKyspdC5ibF9jb3VudFtzXT0wO2ZvcihoWzIqdC5oZWFwW3QuaGVhcF9tYXhdKzFdPTAscj10LmhlYXBfbWF4KzE7cjxfO3IrKylwPChzPWhbMipoWzIqKGk9dC5oZWFwW3JdKSsxXSsxXSsxKSYmKHM9cCxtKyspLGhbMippKzFdPXMsdTxpfHwodC5ibF9jb3VudFtzXSsrLGE9MCxjPD1pJiYoYT1kW2ktY10pLG89aFsyKmldLHQub3B0X2xlbis9byoocythKSxmJiYodC5zdGF0aWNfbGVuKz1vKihsWzIqaSsxXSthKSkpO2lmKDAhPT1tKXtkb3tmb3Iocz1wLTE7MD09PXQuYmxfY291bnRbc107KXMtLTt0LmJsX2NvdW50W3NdLS0sdC5ibF9jb3VudFtzKzFdKz0yLHQuYmxfY291bnRbcF0tLSxtLT0yfXdoaWxlKDA8bSk7Zm9yKHM9cDswIT09cztzLS0pZm9yKGk9dC5ibF9jb3VudFtzXTswIT09aTspdTwobj10LmhlYXBbLS1yXSl8fChoWzIqbisxXSE9PXMmJih0Lm9wdF9sZW4rPShzLWhbMipuKzFdKSpoWzIqbl0saFsyKm4rMV09cyksaS0tKX19KHQsZSksWihzLHUsdC5ibF9jb3VudCl9ZnVuY3Rpb24gWCh0LGUscil7dmFyIGksbixzPS0xLGE9ZVsxXSxvPTAsaD03LHU9NDtmb3IoMD09PWEmJihoPTEzOCx1PTMpLGVbMioocisxKSsxXT02NTUzNSxpPTA7aTw9cjtpKyspbj1hLGE9ZVsyKihpKzEpKzFdLCsrbzxoJiZuPT09YXx8KG88dT90LmJsX3RyZWVbMipuXSs9bzowIT09bj8obiE9PXMmJnQuYmxfdHJlZVsyKm5dKyssdC5ibF90cmVlWzIqYl0rKyk6bzw9MTA/dC5ibF90cmVlWzIqdl0rKzp0LmJsX3RyZWVbMip5XSsrLHM9bix1PShvPTApPT09YT8oaD0xMzgsMyk6bj09PWE/KGg9NiwzKTooaD03LDQpKX1mdW5jdGlvbiBWKHQsZSxyKXt2YXIgaSxuLHM9LTEsYT1lWzFdLG89MCxoPTcsdT00O2ZvcigwPT09YSYmKGg9MTM4LHU9MyksaT0wO2k8PXI7aSsrKWlmKG49YSxhPWVbMiooaSsxKSsxXSwhKCsrbzxoJiZuPT09YSkpe2lmKG88dSlmb3IoO0wodCxuLHQuYmxfdHJlZSksMCE9LS1vOyk7ZWxzZSAwIT09bj8obiE9PXMmJihMKHQsbix0LmJsX3RyZWUpLG8tLSksTCh0LGIsdC5ibF90cmVlKSxQKHQsby0zLDIpKTpvPD0xMD8oTCh0LHYsdC5ibF90cmVlKSxQKHQsby0zLDMpKTooTCh0LHksdC5ibF90cmVlKSxQKHQsby0xMSw3KSk7cz1uLHU9KG89MCk9PT1hPyhoPTEzOCwzKTpuPT09YT8oaD02LDMpOihoPTcsNCl9fWkoVCk7dmFyIHE9ITE7ZnVuY3Rpb24gSih0LGUscixpKXtQKHQsKHM8PDEpKyhpPzE6MCksMyksZnVuY3Rpb24odCxlLHIsaSl7TSh0KSxpJiYoVSh0LHIpLFUodCx+cikpLG4uYXJyYXlTZXQodC5wZW5kaW5nX2J1Zix0LndpbmRvdyxlLHIsdC5wZW5kaW5nKSx0LnBlbmRpbmcrPXJ9KHQsZSxyLCEwKX1yLl90cl9pbml0PWZ1bmN0aW9uKHQpe3F8fChmdW5jdGlvbigpe3ZhciB0LGUscixpLG4scz1uZXcgQXJyYXkoZysxKTtmb3IoaT1yPTA7aTxhLTE7aSsrKWZvcihJW2ldPXIsdD0wO3Q8MTw8d1tpXTt0KyspQVtyKytdPWk7Zm9yKEFbci0xXT1pLGk9bj0wO2k8MTY7aSsrKWZvcihUW2ldPW4sdD0wO3Q8MTw8a1tpXTt0KyspRVtuKytdPWk7Zm9yKG4+Pj03O2k8ZjtpKyspZm9yKFRbaV09bjw8Nyx0PTA7dDwxPDxrW2ldLTc7dCsrKUVbMjU2K24rK109aTtmb3IoZT0wO2U8PWc7ZSsrKXNbZV09MDtmb3IodD0wO3Q8PTE0MzspelsyKnQrMV09OCx0Kyssc1s4XSsrO2Zvcig7dDw9MjU1Oyl6WzIqdCsxXT05LHQrKyxzWzldKys7Zm9yKDt0PD0yNzk7KXpbMip0KzFdPTcsdCsrLHNbN10rKztmb3IoO3Q8PTI4NzspelsyKnQrMV09OCx0Kyssc1s4XSsrO2ZvcihaKHosbCsxLHMpLHQ9MDt0PGY7dCsrKUNbMip0KzFdPTUsQ1syKnRdPWoodCw1KTtPPW5ldyBEKHosdyx1KzEsbCxnKSxCPW5ldyBEKEMsaywwLGYsZyksUj1uZXcgRChuZXcgQXJyYXkoMCkseCwwLGQscCl9KCkscT0hMCksdC5sX2Rlc2M9bmV3IEYodC5keW5fbHRyZWUsTyksdC5kX2Rlc2M9bmV3IEYodC5keW5fZHRyZWUsQiksdC5ibF9kZXNjPW5ldyBGKHQuYmxfdHJlZSxSKSx0LmJpX2J1Zj0wLHQuYmlfdmFsaWQ9MCxXKHQpfSxyLl90cl9zdG9yZWRfYmxvY2s9SixyLl90cl9mbHVzaF9ibG9jaz1mdW5jdGlvbih0LGUscixpKXt2YXIgbixzLGE9MDswPHQubGV2ZWw/KDI9PT10LnN0cm0uZGF0YV90eXBlJiYodC5zdHJtLmRhdGFfdHlwZT1mdW5jdGlvbih0KXt2YXIgZSxyPTQwOTM2MjQ0NDc7Zm9yKGU9MDtlPD0zMTtlKysscj4+Pj0xKWlmKDEmciYmMCE9PXQuZHluX2x0cmVlWzIqZV0pcmV0dXJuIG87aWYoMCE9PXQuZHluX2x0cmVlWzE4XXx8MCE9PXQuZHluX2x0cmVlWzIwXXx8MCE9PXQuZHluX2x0cmVlWzI2XSlyZXR1cm4gaDtmb3IoZT0zMjtlPHU7ZSsrKWlmKDAhPT10LmR5bl9sdHJlZVsyKmVdKXJldHVybiBoO3JldHVybiBvfSh0KSksWSh0LHQubF9kZXNjKSxZKHQsdC5kX2Rlc2MpLGE9ZnVuY3Rpb24odCl7dmFyIGU7Zm9yKFgodCx0LmR5bl9sdHJlZSx0LmxfZGVzYy5tYXhfY29kZSksWCh0LHQuZHluX2R0cmVlLHQuZF9kZXNjLm1heF9jb2RlKSxZKHQsdC5ibF9kZXNjKSxlPWQtMTszPD1lJiYwPT09dC5ibF90cmVlWzIqU1tlXSsxXTtlLS0pO3JldHVybiB0Lm9wdF9sZW4rPTMqKGUrMSkrNSs1KzQsZX0odCksbj10Lm9wdF9sZW4rMys3Pj4+Mywocz10LnN0YXRpY19sZW4rMys3Pj4+Myk8PW4mJihuPXMpKTpuPXM9cis1LHIrNDw9biYmLTEhPT1lP0oodCxlLHIsaSk6ND09PXQuc3RyYXRlZ3l8fHM9PT1uPyhQKHQsMisoaT8xOjApLDMpLEsodCx6LEMpKTooUCh0LDQrKGk/MTowKSwzKSxmdW5jdGlvbih0LGUscixpKXt2YXIgbjtmb3IoUCh0LGUtMjU3LDUpLFAodCxyLTEsNSksUCh0LGktNCw0KSxuPTA7bjxpO24rKylQKHQsdC5ibF90cmVlWzIqU1tuXSsxXSwzKTtWKHQsdC5keW5fbHRyZWUsZS0xKSxWKHQsdC5keW5fZHRyZWUsci0xKX0odCx0LmxfZGVzYy5tYXhfY29kZSsxLHQuZF9kZXNjLm1heF9jb2RlKzEsYSsxKSxLKHQsdC5keW5fbHRyZWUsdC5keW5fZHRyZWUpKSxXKHQpLGkmJk0odCl9LHIuX3RyX3RhbGx5PWZ1bmN0aW9uKHQsZSxyKXtyZXR1cm4gdC5wZW5kaW5nX2J1Zlt0LmRfYnVmKzIqdC5sYXN0X2xpdF09ZT4+PjgmMjU1LHQucGVuZGluZ19idWZbdC5kX2J1ZisyKnQubGFzdF9saXQrMV09MjU1JmUsdC5wZW5kaW5nX2J1Zlt0LmxfYnVmK3QubGFzdF9saXRdPTI1NSZyLHQubGFzdF9saXQrKywwPT09ZT90LmR5bl9sdHJlZVsyKnJdKys6KHQubWF0Y2hlcysrLGUtLSx0LmR5bl9sdHJlZVsyKihBW3JdK3UrMSldKyssdC5keW5fZHRyZWVbMipOKGUpXSsrKSx0Lmxhc3RfbGl0PT09dC5saXRfYnVmc2l6ZS0xfSxyLl90cl9hbGlnbj1mdW5jdGlvbih0KXtQKHQsMiwzKSxMKHQsbSx6KSxmdW5jdGlvbih0KXsxNj09PXQuYmlfdmFsaWQ/KFUodCx0LmJpX2J1ZiksdC5iaV9idWY9MCx0LmJpX3ZhbGlkPTApOjg8PXQuYmlfdmFsaWQmJih0LnBlbmRpbmdfYnVmW3QucGVuZGluZysrXT0yNTUmdC5iaV9idWYsdC5iaV9idWY+Pj04LHQuYmlfdmFsaWQtPTgpfSh0KX19LHtcIi4uL3V0aWxzL2NvbW1vblwiOjQxfV0sNTM6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9ZnVuY3Rpb24oKXt0aGlzLmlucHV0PW51bGwsdGhpcy5uZXh0X2luPTAsdGhpcy5hdmFpbF9pbj0wLHRoaXMudG90YWxfaW49MCx0aGlzLm91dHB1dD1udWxsLHRoaXMubmV4dF9vdXQ9MCx0aGlzLmF2YWlsX291dD0wLHRoaXMudG90YWxfb3V0PTAsdGhpcy5tc2c9XCJcIix0aGlzLnN0YXRlPW51bGwsdGhpcy5kYXRhX3R5cGU9Mix0aGlzLmFkbGVyPTB9fSx7fV0sNTQ6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9XCJmdW5jdGlvblwiPT10eXBlb2Ygc2V0SW1tZWRpYXRlP3NldEltbWVkaWF0ZTpmdW5jdGlvbigpe3ZhciB0PVtdLnNsaWNlLmFwcGx5KGFyZ3VtZW50cyk7dC5zcGxpY2UoMSwwLDApLHNldFRpbWVvdXQuYXBwbHkobnVsbCx0KX19LHt9XX0se30sWzEwXSkoMTApfSk7IiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsIihmdW5jdGlvbiAoZ2xvYmFsLCB1bmRlZmluZWQpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIGlmIChnbG9iYWwuc2V0SW1tZWRpYXRlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbmV4dEhhbmRsZSA9IDE7IC8vIFNwZWMgc2F5cyBncmVhdGVyIHRoYW4gemVyb1xuICAgIHZhciB0YXNrc0J5SGFuZGxlID0ge307XG4gICAgdmFyIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IGZhbHNlO1xuICAgIHZhciBkb2MgPSBnbG9iYWwuZG9jdW1lbnQ7XG4gICAgdmFyIHJlZ2lzdGVySW1tZWRpYXRlO1xuXG4gICAgZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGNhbGxiYWNrKSB7XG4gICAgICAvLyBDYWxsYmFjayBjYW4gZWl0aGVyIGJlIGEgZnVuY3Rpb24gb3IgYSBzdHJpbmdcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBjYWxsYmFjayA9IG5ldyBGdW5jdGlvbihcIlwiICsgY2FsbGJhY2spO1xuICAgICAgfVxuICAgICAgLy8gQ29weSBmdW5jdGlvbiBhcmd1bWVudHNcbiAgICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaSArIDFdO1xuICAgICAgfVxuICAgICAgLy8gU3RvcmUgYW5kIHJlZ2lzdGVyIHRoZSB0YXNrXG4gICAgICB2YXIgdGFzayA9IHsgY2FsbGJhY2s6IGNhbGxiYWNrLCBhcmdzOiBhcmdzIH07XG4gICAgICB0YXNrc0J5SGFuZGxlW25leHRIYW5kbGVdID0gdGFzaztcbiAgICAgIHJlZ2lzdGVySW1tZWRpYXRlKG5leHRIYW5kbGUpO1xuICAgICAgcmV0dXJuIG5leHRIYW5kbGUrKztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShoYW5kbGUpIHtcbiAgICAgICAgZGVsZXRlIHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBydW4odGFzaykge1xuICAgICAgICB2YXIgY2FsbGJhY2sgPSB0YXNrLmNhbGxiYWNrO1xuICAgICAgICB2YXIgYXJncyA9IHRhc2suYXJncztcbiAgICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBjYWxsYmFjay5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBydW5JZlByZXNlbnQoaGFuZGxlKSB7XG4gICAgICAgIC8vIEZyb20gdGhlIHNwZWM6IFwiV2FpdCB1bnRpbCBhbnkgaW52b2NhdGlvbnMgb2YgdGhpcyBhbGdvcml0aG0gc3RhcnRlZCBiZWZvcmUgdGhpcyBvbmUgaGF2ZSBjb21wbGV0ZWQuXCJcbiAgICAgICAgLy8gU28gaWYgd2UncmUgY3VycmVudGx5IHJ1bm5pbmcgYSB0YXNrLCB3ZSdsbCBuZWVkIHRvIGRlbGF5IHRoaXMgaW52b2NhdGlvbi5cbiAgICAgICAgaWYgKGN1cnJlbnRseVJ1bm5pbmdBVGFzaykge1xuICAgICAgICAgICAgLy8gRGVsYXkgYnkgZG9pbmcgYSBzZXRUaW1lb3V0LiBzZXRJbW1lZGlhdGUgd2FzIHRyaWVkIGluc3RlYWQsIGJ1dCBpbiBGaXJlZm94IDcgaXQgZ2VuZXJhdGVkIGFcbiAgICAgICAgICAgIC8vIFwidG9vIG11Y2ggcmVjdXJzaW9uXCIgZXJyb3IuXG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciB0YXNrID0gdGFza3NCeUhhbmRsZVtoYW5kbGVdO1xuICAgICAgICAgICAgaWYgKHRhc2spIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJ1bih0YXNrKTtcbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBjbGVhckltbWVkaWF0ZShoYW5kbGUpO1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsTmV4dFRpY2tJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkgeyBydW5JZlByZXNlbnQoaGFuZGxlKTsgfSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FuVXNlUG9zdE1lc3NhZ2UoKSB7XG4gICAgICAgIC8vIFRoZSB0ZXN0IGFnYWluc3QgYGltcG9ydFNjcmlwdHNgIHByZXZlbnRzIHRoaXMgaW1wbGVtZW50YXRpb24gZnJvbSBiZWluZyBpbnN0YWxsZWQgaW5zaWRlIGEgd2ViIHdvcmtlcixcbiAgICAgICAgLy8gd2hlcmUgYGdsb2JhbC5wb3N0TWVzc2FnZWAgbWVhbnMgc29tZXRoaW5nIGNvbXBsZXRlbHkgZGlmZmVyZW50IGFuZCBjYW4ndCBiZSB1c2VkIGZvciB0aGlzIHB1cnBvc2UuXG4gICAgICAgIGlmIChnbG9iYWwucG9zdE1lc3NhZ2UgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzKSB7XG4gICAgICAgICAgICB2YXIgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IHRydWU7XG4gICAgICAgICAgICB2YXIgb2xkT25NZXNzYWdlID0gZ2xvYmFsLm9ubWVzc2FnZTtcbiAgICAgICAgICAgIGdsb2JhbC5vbm1lc3NhZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzID0gZmFsc2U7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKFwiXCIsIFwiKlwiKTtcbiAgICAgICAgICAgIGdsb2JhbC5vbm1lc3NhZ2UgPSBvbGRPbk1lc3NhZ2U7XG4gICAgICAgICAgICByZXR1cm4gcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxQb3N0TWVzc2FnZUltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICAvLyBJbnN0YWxscyBhbiBldmVudCBoYW5kbGVyIG9uIGBnbG9iYWxgIGZvciB0aGUgYG1lc3NhZ2VgIGV2ZW50OiBzZWVcbiAgICAgICAgLy8gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9ET00vd2luZG93LnBvc3RNZXNzYWdlXG4gICAgICAgIC8vICogaHR0cDovL3d3dy53aGF0d2cub3JnL3NwZWNzL3dlYi1hcHBzL2N1cnJlbnQtd29yay9tdWx0aXBhZ2UvY29tbXMuaHRtbCNjcm9zc0RvY3VtZW50TWVzc2FnZXNcblxuICAgICAgICB2YXIgbWVzc2FnZVByZWZpeCA9IFwic2V0SW1tZWRpYXRlJFwiICsgTWF0aC5yYW5kb20oKSArIFwiJFwiO1xuICAgICAgICB2YXIgb25HbG9iYWxNZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5zb3VyY2UgPT09IGdsb2JhbCAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBldmVudC5kYXRhID09PSBcInN0cmluZ1wiICYmXG4gICAgICAgICAgICAgICAgZXZlbnQuZGF0YS5pbmRleE9mKG1lc3NhZ2VQcmVmaXgpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcnVuSWZQcmVzZW50KCtldmVudC5kYXRhLnNsaWNlKG1lc3NhZ2VQcmVmaXgubGVuZ3RoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgICAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgb25HbG9iYWxNZXNzYWdlLCBmYWxzZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnbG9iYWwuYXR0YWNoRXZlbnQoXCJvbm1lc3NhZ2VcIiwgb25HbG9iYWxNZXNzYWdlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBnbG9iYWwucG9zdE1lc3NhZ2UobWVzc2FnZVByZWZpeCArIGhhbmRsZSwgXCIqXCIpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxNZXNzYWdlQ2hhbm5lbEltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICB2YXIgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgICAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgaGFuZGxlID0gZXZlbnQuZGF0YTtcbiAgICAgICAgICAgIHJ1bklmUHJlc2VudChoYW5kbGUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBjaGFubmVsLnBvcnQyLnBvc3RNZXNzYWdlKGhhbmRsZSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFJlYWR5U3RhdGVDaGFuZ2VJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIGh0bWwgPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgPHNjcmlwdD4gZWxlbWVudDsgaXRzIHJlYWR5c3RhdGVjaGFuZ2UgZXZlbnQgd2lsbCBiZSBmaXJlZCBhc3luY2hyb25vdXNseSBvbmNlIGl0IGlzIGluc2VydGVkXG4gICAgICAgICAgICAvLyBpbnRvIHRoZSBkb2N1bWVudC4gRG8gc28sIHRodXMgcXVldWluZyB1cCB0aGUgdGFzay4gUmVtZW1iZXIgdG8gY2xlYW4gdXAgb25jZSBpdCdzIGJlZW4gY2FsbGVkLlxuICAgICAgICAgICAgdmFyIHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG4gICAgICAgICAgICAgICAgc2NyaXB0ID0gbnVsbDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBodG1sLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFNldFRpbWVvdXRJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQocnVuSWZQcmVzZW50LCAwLCBoYW5kbGUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIElmIHN1cHBvcnRlZCwgd2Ugc2hvdWxkIGF0dGFjaCB0byB0aGUgcHJvdG90eXBlIG9mIGdsb2JhbCwgc2luY2UgdGhhdCBpcyB3aGVyZSBzZXRUaW1lb3V0IGV0IGFsLiBsaXZlLlxuICAgIHZhciBhdHRhY2hUbyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoZ2xvYmFsKTtcbiAgICBhdHRhY2hUbyA9IGF0dGFjaFRvICYmIGF0dGFjaFRvLnNldFRpbWVvdXQgPyBhdHRhY2hUbyA6IGdsb2JhbDtcblxuICAgIC8vIERvbid0IGdldCBmb29sZWQgYnkgZS5nLiBicm93c2VyaWZ5IGVudmlyb25tZW50cy5cbiAgICBpZiAoe30udG9TdHJpbmcuY2FsbChnbG9iYWwucHJvY2VzcykgPT09IFwiW29iamVjdCBwcm9jZXNzXVwiKSB7XG4gICAgICAgIC8vIEZvciBOb2RlLmpzIGJlZm9yZSAwLjlcbiAgICAgICAgaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoY2FuVXNlUG9zdE1lc3NhZ2UoKSkge1xuICAgICAgICAvLyBGb3Igbm9uLUlFMTAgbW9kZXJuIGJyb3dzZXJzXG4gICAgICAgIGluc3RhbGxQb3N0TWVzc2FnZUltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGdsb2JhbC5NZXNzYWdlQ2hhbm5lbCkge1xuICAgICAgICAvLyBGb3Igd2ViIHdvcmtlcnMsIHdoZXJlIHN1cHBvcnRlZFxuICAgICAgICBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChkb2MgJiYgXCJvbnJlYWR5c3RhdGVjaGFuZ2VcIiBpbiBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKSkge1xuICAgICAgICAvLyBGb3IgSUUgNuKAkzhcbiAgICAgICAgaW5zdGFsbFJlYWR5U3RhdGVDaGFuZ2VJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRm9yIG9sZGVyIGJyb3dzZXJzXG4gICAgICAgIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKTtcbiAgICB9XG5cbiAgICBhdHRhY2hUby5zZXRJbW1lZGlhdGUgPSBzZXRJbW1lZGlhdGU7XG4gICAgYXR0YWNoVG8uY2xlYXJJbW1lZGlhdGUgPSBjbGVhckltbWVkaWF0ZTtcbn0odHlwZW9mIHNlbGYgPT09IFwidW5kZWZpbmVkXCIgPyB0eXBlb2YgZ2xvYmFsID09PSBcInVuZGVmaW5lZFwiID8gdGhpcyA6IGdsb2JhbCA6IHNlbGYpKTtcbiIsInZhciBzY29wZSA9ICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbCkgfHxcbiAgICAgICAgICAgICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmKSB8fFxuICAgICAgICAgICAgd2luZG93O1xudmFyIGFwcGx5ID0gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5O1xuXG4vLyBET00gQVBJcywgZm9yIGNvbXBsZXRlbmVzc1xuXG5leHBvcnRzLnNldFRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0VGltZW91dCwgc2NvcGUsIGFyZ3VtZW50cyksIGNsZWFyVGltZW91dCk7XG59O1xuZXhwb3J0cy5zZXRJbnRlcnZhbCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRJbnRlcnZhbCwgc2NvcGUsIGFyZ3VtZW50cyksIGNsZWFySW50ZXJ2YWwpO1xufTtcbmV4cG9ydHMuY2xlYXJUaW1lb3V0ID1cbmV4cG9ydHMuY2xlYXJJbnRlcnZhbCA9IGZ1bmN0aW9uKHRpbWVvdXQpIHtcbiAgaWYgKHRpbWVvdXQpIHtcbiAgICB0aW1lb3V0LmNsb3NlKCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIFRpbWVvdXQoaWQsIGNsZWFyRm4pIHtcbiAgdGhpcy5faWQgPSBpZDtcbiAgdGhpcy5fY2xlYXJGbiA9IGNsZWFyRm47XG59XG5UaW1lb3V0LnByb3RvdHlwZS51bnJlZiA9IFRpbWVvdXQucHJvdG90eXBlLnJlZiA9IGZ1bmN0aW9uKCkge307XG5UaW1lb3V0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9jbGVhckZuLmNhbGwoc2NvcGUsIHRoaXMuX2lkKTtcbn07XG5cbi8vIERvZXMgbm90IHN0YXJ0IHRoZSB0aW1lLCBqdXN0IHNldHMgdXAgdGhlIG1lbWJlcnMgbmVlZGVkLlxuZXhwb3J0cy5lbnJvbGwgPSBmdW5jdGlvbihpdGVtLCBtc2Vjcykge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gbXNlY3M7XG59O1xuXG5leHBvcnRzLnVuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gLTE7XG59O1xuXG5leHBvcnRzLl91bnJlZkFjdGl2ZSA9IGV4cG9ydHMuYWN0aXZlID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG5cbiAgdmFyIG1zZWNzID0gaXRlbS5faWRsZVRpbWVvdXQ7XG4gIGlmIChtc2VjcyA+PSAwKSB7XG4gICAgaXRlbS5faWRsZVRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gb25UaW1lb3V0KCkge1xuICAgICAgaWYgKGl0ZW0uX29uVGltZW91dClcbiAgICAgICAgaXRlbS5fb25UaW1lb3V0KCk7XG4gICAgfSwgbXNlY3MpO1xuICB9XG59O1xuXG4vLyBzZXRpbW1lZGlhdGUgYXR0YWNoZXMgaXRzZWxmIHRvIHRoZSBnbG9iYWwgb2JqZWN0XG5yZXF1aXJlKFwic2V0aW1tZWRpYXRlXCIpO1xuLy8gT24gc29tZSBleG90aWMgZW52aXJvbm1lbnRzLCBpdCdzIG5vdCBjbGVhciB3aGljaCBvYmplY3QgYHNldGltbWVkaWF0ZWAgd2FzXG4vLyBhYmxlIHRvIGluc3RhbGwgb250by4gIFNlYXJjaCBlYWNoIHBvc3NpYmlsaXR5IGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZVxuLy8gYHNldGltbWVkaWF0ZWAgbGlicmFyeS5cbmV4cG9ydHMuc2V0SW1tZWRpYXRlID0gKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYuc2V0SW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuc2V0SW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAodGhpcyAmJiB0aGlzLnNldEltbWVkaWF0ZSk7XG5leHBvcnRzLmNsZWFySW1tZWRpYXRlID0gKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLmNsZWFySW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuY2xlYXJJbW1lZGlhdGUpO1xuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiLypcbiAgICBDb3B5cmlnaHQgMjAyMCBSaWNrIFdleXJhdWNoLFxuXG4gICAgUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UgXG4gICAgd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZCwgcHJvdmlkZWQgdGhhdCB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZVxuICAgIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIGFwcGVhciBpbiBhbGwgY29waWVzLlxuXG4gICAgVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSCBcbiAgICBSRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIFxuICAgIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULCBcbiAgICBJTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST00gTE9TUyBcbiAgICBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1IgT1RIRVIgXG4gICAgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUiBQRVJGT1JNQU5DRSBcbiAgICBPRiBUSElTIFNPRlRXQVJFLlxuKi9cblxuaW1wb3J0IHsgQ3JlYXRlNDBrUm9zdGVyIH0gZnJvbSBcIi4vcm9zdGVyNDBrXCI7XG5pbXBvcnQgeyBSZW5kZXJlcjQwayB9IGZyb20gXCIuL3JlbmRlcmVyNDBrXCI7XG5pbXBvcnQgeyBDcmVhdGUzMGtSb3N0ZXIgfSBmcm9tIFwiLi9yb3N0ZXIzMGtcIjtcbmltcG9ydCB7IFJlbmRlcmVyMzBrIH0gZnJvbSBcIi4vcmVuZGVyZXIzMGtcIjtcbmltcG9ydCB7IENyZWF0ZUFvU1Jvc3RlciB9IGZyb20gXCIuL3Jvc3RlckFvU1wiO1xuaW1wb3J0IHsgUmVuZGVyZXJBb1MgfSBmcm9tIFwiLi9yZW5kZXJlckFvU1wiO1xuaW1wb3J0IHsgQ3JlYXRlV2FyY3J5Um9zdGVyIH0gZnJvbSBcIi4vcm9zdGVyV2FyY3J5XCI7XG5pbXBvcnQgeyBSZW5kZXJlcldhcmNyeSB9IGZyb20gXCIuL3JlbmRlcmVyV2FyY3J5XCI7XG5pbXBvcnQgSlNaaXAgZnJvbSBcImpzemlwXCI7XG5pbXBvcnQgeyBKU1ppcE9iamVjdCB9IGZyb20gJ2pzemlwJztcblxuZnVuY3Rpb24gY2xlYW51cCgpOiB2b2lkIHtcbiAgJCgnI3Jvc3Rlci10aXRsZScpLmVtcHR5KCk7XG4gICQoJyNyb3N0ZXItbGlzdHMnKS5lbXB0eSgpO1xuICAkKCcjZm9yY2UtdW5pdHMnKS5lbXB0eSgpO1xufVxuXG5mdW5jdGlvbiBnZXRGaWxlRXh0ZW5zaW9uKGZpbGVuYW1lOiBzdHJpbmcpOiBzdHJpbmcge1xuICBjb25zdCBzdWJzdHJpbmdzID0gZmlsZW5hbWUuc3BsaXQoJy4nKTtcbiAgaWYgKHN1YnN0cmluZ3MubGVuZ3RoID4gMSkge1xuICAgIHJldHVybiBzdWJzdHJpbmdzW3N1YnN0cmluZ3MubGVuZ3RoLTFdLnRvTG93ZXJDYXNlKCk7XG4gIH1cbiAgcmV0dXJuIFwiXCI7XG59XG5cbmZ1bmN0aW9uIHBhcnNlWE1MKHhtbGRhdGE6IHN0cmluZykge1xuICBsZXQgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xuICBsZXQgZG9jID0gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyh4bWxkYXRhLCBcInRleHQveG1sXCIpO1xuXG4gIGlmIChkb2MpIHtcbiAgICAvLyBEZXRlcm1pbmUgcm9zdGVyIHR5cGUgKGdhbWUgc3lzdGVtKS5cbiAgICBsZXQgaW5mbyA9IGRvYy5xdWVyeVNlbGVjdG9yKFwicm9zdGVyXCIpO1xuICAgIGlmIChpbmZvKSB7XG4gICAgICBjb25zdCBnYW1lVHlwZSA9IGluZm8uZ2V0QXR0cmlidXRlTm9kZShcImdhbWVTeXN0ZW1OYW1lXCIpPy5ub2RlVmFsdWU7XG4gICAgICBpZiAoIWdhbWVUeXBlKSByZXR1cm47XG5cbiAgICAgIGNvbnN0IHJvc3RlclRpdGxlID0gJCgnI3Jvc3Rlci10aXRsZScpWzBdO1xuICAgICAgY29uc3Qgcm9zdGVyTGlzdCA9ICQoJyNyb3N0ZXItbGlzdHMnKVswXTtcbiAgICAgIGNvbnN0IGZvcmNlVW5pdHMgPSAkKCcjZm9yY2UtdW5pdHMnKVswXTtcblxuICAgICAgaWYgKChnYW1lVHlwZSA9PSBcIldhcmhhbW1lciA0MCwwMDAgOHRoIEVkaXRpb25cIikgfHxcbiAgICAgICAgICAoZ2FtZVR5cGUgPT0gXCJXYXJoYW1tZXIgNDAsMDAwIDl0aCBFZGl0aW9uXCIpKSB7XG4gICAgICAgIGxldCByb3N0ZXIgPSBDcmVhdGU0MGtSb3N0ZXIoZG9jKTtcbiAgICAgICAgaWYgKHJvc3Rlcikge1xuICAgICAgICAgIGlmIChyb3N0ZXIuX2ZvcmNlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCByZW5kZXJlcjogUmVuZGVyZXI0MGsgPSBuZXcgUmVuZGVyZXI0MGsocm9zdGVyKTtcbiAgICAgICAgICAgIHJlbmRlcmVyLnJlbmRlcihyb3N0ZXJUaXRsZSwgcm9zdGVyTGlzdCwgZm9yY2VVbml0cyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChnYW1lVHlwZSA9PSBcIldhcmhhbW1lciA0MCwwMDA6IEtpbGwgVGVhbSAoMjAxOClcIikge1xuICAgICAgICAvL2FsZXJ0KFwiS2lsbCBUZWFtIG5vdCBzdXBwb3J0ZWQgeWV0LlwiKTtcbiAgICAgICAgbGV0IHJvc3RlciA9IENyZWF0ZTQwa1Jvc3Rlcihkb2MsIGZhbHNlKTtcbiAgICAgICAgaWYgKHJvc3Rlcikge1xuICAgICAgICAgIGlmIChyb3N0ZXIuX2ZvcmNlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCByZW5kZXJlcjogUmVuZGVyZXI0MGsgPSBuZXcgUmVuZGVyZXI0MGsocm9zdGVyKTtcbiAgICAgICAgICAgIHJlbmRlcmVyLnJlbmRlcihyb3N0ZXJUaXRsZSwgcm9zdGVyTGlzdCwgZm9yY2VVbml0cyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChnYW1lVHlwZSA9PSBcIkFnZSBvZiBTaWdtYXJcIikge1xuICAgICAgICBsZXQgcm9zdGVyID0gQ3JlYXRlQW9TUm9zdGVyKGRvYyk7XG4gICAgICAgIGlmIChyb3N0ZXIpIHtcbiAgICAgICAgICBjb25zdCByZW5kZXJlcjogUmVuZGVyZXJBb1MgPSBuZXcgUmVuZGVyZXJBb1Mocm9zdGVyKTtcbiAgICAgICAgICByZW5kZXJlci5yZW5kZXIocm9zdGVyVGl0bGUsIHJvc3Rlckxpc3QsIGZvcmNlVW5pdHMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChnYW1lVHlwZSA9PSBcIldhcmhhbW1lciBBZ2Ugb2YgU2lnbWFyOiBXYXJjcnlcIikge1xuICAgICAgICBsZXQgcm9zdGVyID0gQ3JlYXRlV2FyY3J5Um9zdGVyKGRvYyk7XG4gICAgICAgIGlmIChyb3N0ZXIpIHtcbiAgICAgICAgICBjb25zdCByZW5kZXJlcjogUmVuZGVyZXJXYXJjcnkgPSBuZXcgUmVuZGVyZXJXYXJjcnkocm9zdGVyKTtcbiAgICAgICAgICByZW5kZXJlci5yZW5kZXIocm9zdGVyVGl0bGUsIHJvc3Rlckxpc3QsIGZvcmNlVW5pdHMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChnYW1lVHlwZSA9PSBcIldhcmhhbW1lciAzMCwwMDAgLSBUaGUgSG9ydXMgSGVyZXN5XCIpIHtcbiAgICAgICAgICBsZXQgcm9zdGVyID0gQ3JlYXRlMzBrUm9zdGVyKGRvYyk7XG4gICAgICAgICAgaWYgKHJvc3Rlcikge1xuICAgICAgICAgICAgaWYgKHJvc3Rlci5fZm9yY2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgY29uc3QgcmVuZGVyZXI6IFJlbmRlcmVyMzBrID0gbmV3IFJlbmRlcmVyMzBrKHJvc3Rlcik7XG4gICAgICAgICAgICAgIHJlbmRlcmVyLnJlbmRlcihyb3N0ZXJUaXRsZSwgcm9zdGVyTGlzdCwgZm9yY2VVbml0cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gVE9ETzogYWRkIChwcm9wZXIpIHN1cHBvcnQgZm9yIEFwb2NhbHlwc2VcbiAgICAgIC8vIGVsc2UgaWYgKGdhbWVUeXBlID09IFwiV2FyaGFtbWVyIDQwLDAwMDogQXBvY2FseXBzZVwiKSB7XG4gICAgICAvLyAgICBsZXQgcm9zdGVyID0gQ3JlYXRlNDBrUm9zdGVyKGRvYyk7XG4gICAgICAvLyAgICBpZiAocm9zdGVyKSB7XG4gICAgICAvLyAgICAgIGlmIChyb3N0ZXIuX2ZvcmNlcy5sZW5ndGggPiAwKSB7XG4gICAgICAvLyAgICAgICAgY29uc3QgcmVuZGVyZXI6IFJlbmRlcmVyNDBrID0gbmV3IFJlbmRlcmVyNDBrKHJvc3Rlcik7XG4gICAgICAvLyAgICAgICAgcmVuZGVyZXIucmVuZGVyKHJvc3RlclRpdGxlLCByb3N0ZXJMaXN0LCBmb3JjZVVuaXRzKTtcbiAgICAgIC8vICAgICAgfVxuICAgICAgLy8gICAgfVxuICAgICAgLy8gfVxuICAgICAgZWxzZSB7XG4gICAgICAgICAgJCgnI2Vycm9yVGV4dCcpLmh0bWwoJ1ByZXR0eVNjcmliZSBkb2VzIG5vdCBzdXBwb3J0IGdhbWUgdHlwZSBcXCcnICsgZ2FtZVR5cGUgKyAnXFwnLicpO1xuICAgICAgICAgICQoJyNlcnJvckRpYWxvZycpLm1vZGFsKCk7ICAgIFxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4kKCcjcm9zdGVyLWZpbGUnKS5vbihcImNoYW5nZVwiLCBmdW5jdGlvbiBoYW5kbGVGaWxlU2VsZWN0KGV2ZW50OiBFdmVudCkge1xuICBjb25zdCBpbnB1dCA9IGV2ZW50LnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50O1xuICBjb25zdCBmaWxlcyA9IGlucHV0LmZpbGVzO1xuXG4gIGNsZWFudXAoKTtcblxuICBpZiAoZmlsZXMpIHtcbiAgICAvLyBmaWxlcyBpcyBhIEZpbGVMaXN0IG9mIEZpbGUgb2JqZWN0cy4gTGlzdCBzb21lIHByb3BlcnRpZXMuXG4gICAgbGV0IG91dHB1dCA9IFtdO1xuICAgIGZvciAobGV0IGYgb2YgZmlsZXMpIHtcblxuICAgICAgY29uc3QgZmlsZUV4dCA9IGdldEZpbGVFeHRlbnNpb24oZi5uYW1lKTtcbiAgICAgIGlmIChmaWxlRXh0ID09PSBcInJvc3pcIiB8fCBmaWxlRXh0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBsZXQgemlwID0gbmV3IEpTWmlwKCk7XG4gICAgICAgIHppcC5sb2FkQXN5bmMoZikudGhlbihmdW5jdGlvbih6aXA6IEpTWmlwKSB7XG4gICAgICAgICAgemlwLmZvckVhY2goZnVuY3Rpb24ocGF0aDogc3RyaW5nLCBmaWxlOiBKU1ppcE9iamVjdCkge1xuICAgICAgICAgICAgZmlsZS5hc3luYyhcInRleHRcIikudGhlbihmdW5jdGlvbih4bWxkYXRhKSB7XG4gICAgICAgICAgICAgIHBhcnNlWE1MKHhtbGRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSlcbiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgICAgICAgJCgnI2Vycm9yVGV4dCcpLmh0bWwoJ0ZhaWxlZCB0byBsb2FkIGNvbXByZXNzZWQgcm9zdGVyIGZpbGUsICcgKyBmLm5hbWUgKyAnLCByZWFzb24gJyArIHJlYXNvbik7XG4gICAgICAgICAgJCgnI2Vycm9yRGlhbG9nJykubW9kYWwoKTsgIFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGZpbGVFeHQgPT09IFwicm9zXCIpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICAgICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgY29uc3QgcmUgPSBlLnRhcmdldDtcbiAgICAgICAgICBpZiAocmUgJiYgcmUucmVzdWx0KSB7XG4gICAgICAgICAgICBsZXQgc291cmNlRGF0YSA9IHJlLnJlc3VsdDtcbiAgICAgICAgICAgIC8vIFNraXAgZW5jb2RpbmcgdGFnXG4gICAgICAgICAgICBjb25zdCB4bWxkYXRhc3RhcnQgPSBzb3VyY2VEYXRhLnRvU3RyaW5nKCkuaW5kZXhPZignLCcpICsgMTtcbiAgICAgICAgICAgIGNvbnN0IHhtbGRhdGEgPSB3aW5kb3cuYXRvYihzb3VyY2VEYXRhLnRvU3RyaW5nKCkuc2xpY2UoeG1sZGF0YXN0YXJ0KSk7XG4gICAgICAgICAgICBwYXJzZVhNTCh4bWxkYXRhKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoZik7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgJCgnI2Vycm9yVGV4dCcpLmh0bWwoJ1ByZXR0eVNjcmliZSBvbmx5IHN1cHBvcnRzIC5yb3MgYW5kIC5yb3N6IGZpbGVzLiAgU2VsZWN0ZWQgZmlsZSBpcyBhIFxcJycgKyBmaWxlRXh0ICsgXCJcXCcgZmlsZS5cIik7XG4gICAgICAgICQoJyNlcnJvckRpYWxvZycpLm1vZGFsKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59KTtcbiIsIi8qXG4gICAgQ29weXJpZ2h0IDIwMjAgUmljayBXZXlyYXVjaCxcblxuICAgIFBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlIFxuICAgIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQsIHByb3ZpZGVkIHRoYXQgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2VcbiAgICBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBhcHBlYXIgaW4gYWxsIGNvcGllcy5cblxuICAgIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEggXG4gICAgUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBcbiAgICBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCwgXG4gICAgSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NIExPU1MgXG4gICAgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SIE9USEVSIFxuICAgIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1IgUEVSRk9STUFOQ0UgXG4gICAgT0YgVEhJUyBTT0ZUV0FSRS5cbiovXG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVuZGVyZXIge1xuXG4gICAgcmVuZGVyKHRpdGxlOiBIVE1MRWxlbWVudHxudWxsLCBsaXN0OiBIVE1MRWxlbWVudHxudWxsLCBmb3JjZXM6IEhUTUxFbGVtZW50fG51bGwpOiB2b2lkO1xuXG59XG5cbmV4cG9ydCBlbnVtIEp1c3RpZmljYXRpb24ge1xuICAgIExlZnQsXG4gICAgUmlnaHQsXG4gICAgQ2VudGVyXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gUmVuZGVyVGV4dChjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgdGV4dDogc3RyaW5nLCB4OiBudW1iZXIsIHk6IG51bWJlciwgdzogbnVtYmVyLCBoOiBudW1iZXIsIGhvdzogSnVzdGlmaWNhdGlvbik6IHZvaWQge1xuICAgIGlmIChjdHggJiYgdGV4dC5sZW5ndGgpIHtcbiAgICAgICAgY3R4LnRleHRCYXNlbGluZSA9ICd0b3AnOyAvLyBNYWtlIHRoZSB0ZXh0IG9yaWdpbiBhdCB0aGUgdXBwZXItbGVmdCB0byBtYWtlIHBvc2l0aW9uaW5nIGVhc2llclxuICAgICAgICBsZXQgbWVhc3VyZSA9IGN0eC5tZWFzdXJlVGV4dCh0ZXh0KTtcbiAgICAgICAgY29uc3QgdHcgPSBtZWFzdXJlLndpZHRoO1xuICAgICAgICBjb25zdCB0aCA9IG1lYXN1cmUuYWN0dWFsQm91bmRpbmdCb3hEZXNjZW50IC0gbWVhc3VyZS5hY3R1YWxCb3VuZGluZ0JveEFzY2VudDtcblxuICAgICAgICBpZiAoaG93ID09IEp1c3RpZmljYXRpb24uQ2VudGVyKSB7XG4gICAgICAgICAgICBjdHguZmlsbFRleHQodGV4dCwgeCArIE1hdGgubWF4KCh3IC0gdHcpIC8gMiwgMCksIHkgKyAoaCAtIHRoKSAvIDIsIHcpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGhvdyA9PSBKdXN0aWZpY2F0aW9uLkxlZnQpIHtcbiAgICAgICAgICAgIGN0eC5maWxsVGV4dCh0ZXh0LCB4LCB5ICsgKGggLSB0aCkgLyAyLCB3KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChob3cgPT0gSnVzdGlmaWNhdGlvbi5SaWdodCkge1xuICAgICAgICAgICAgY3R4LmZpbGxUZXh0KHRleHQsIHggKyB3IC0gdHcsIHkgKyAoaCAtIHRoKSAvIDIsIHcpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gUmVuZGVyUGFyYWdyYXBoKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCB0ZXh0OiBzdHJpbmcsIHg6IG51bWJlciwgeTogbnVtYmVyLCB3OiBudW1iZXIpOiBudW1iZXIge1xuICAgIGxldCBjdXJZOiBudW1iZXIgPSB5O1xuICAgIGlmIChjdHggJiYgdGV4dC5sZW5ndGgpIHtcbiAgICAgICAgbGV0IGxpbmVzOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgICBsZXQgY3VycmVudExpbmU6IHN0cmluZ1tdID0gW107XG4gICAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAndG9wJzsgLy8gTWFrZSB0aGUgdGV4dCBvcmlnaW4gYXQgdGhlIHVwcGVyLWxlZnQgdG8gbWFrZSBwb3NpdGlvbmluZyBlYXNpZXJcbiAgICAgICAgbGV0IGxlbmd0aCA9IDA7XG4gICAgICAgIGNvbnN0IHNwYWNlV2lkdGggPSBjdHgubWVhc3VyZVRleHQoXCIgXCIpLndpZHRoO1xuICAgICAgICBjb25zdCBoZWlnaHRNZWFzdXJlID0gY3R4Lm1lYXN1cmVUZXh0KHRleHQpO1xuICAgICAgICBjb25zdCB0aCA9IChoZWlnaHRNZWFzdXJlLmFjdHVhbEJvdW5kaW5nQm94RGVzY2VudCAtIGhlaWdodE1lYXN1cmUuYWN0dWFsQm91bmRpbmdCb3hBc2NlbnQpICogMS4yO1xuXG4gICAgICAgIHRleHQuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24gKHdvcmQpIHtcbiAgICAgICAgICAgIGNvbnN0IG1lYXN1cmU6IFRleHRNZXRyaWNzID0gY3R4Lm1lYXN1cmVUZXh0KHdvcmQpO1xuICAgICAgICAgICAgaWYgKChsZW5ndGggKyBtZWFzdXJlLndpZHRoKSA+IHcpIHtcbiAgICAgICAgICAgICAgICBsaW5lcy5wdXNoKGN1cnJlbnRMaW5lLmpvaW4oXCIgXCIpKTtcbiAgICAgICAgICAgICAgICBjdXJyZW50TGluZS5sZW5ndGggPSAwO1xuICAgICAgICAgICAgICAgIGxlbmd0aCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZW5ndGggKz0gbWVhc3VyZS53aWR0aCArIHNwYWNlV2lkdGg7XG4gICAgICAgICAgICBjdXJyZW50TGluZS5wdXNoKHdvcmQpO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGN1cnJlbnRMaW5lLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGxpbmVzLnB1c2goY3VycmVudExpbmUuam9pbihcIiBcIikpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgbCBvZiBsaW5lcykge1xuICAgICAgICAgICAgY3R4LmZpbGxUZXh0KGwsIHgsIGN1clkpO1xuICAgICAgICAgICAgY3VyWSArPSB0aDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY3VyWTtcbn1cblxuXG4iLCIvKlxuICAgIENvcHlyaWdodCAyMDIwIFJpY2sgV2V5cmF1Y2gsXG5cbiAgICBQZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSBcbiAgICB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLCBwcm92aWRlZCB0aGF0IHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlXG4gICAgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2UgYXBwZWFyIGluIGFsbCBjb3BpZXMuXG5cbiAgICBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIIFxuICAgIFJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgXG4gICAgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsIFxuICAgIElORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTSBMT1NTIFxuICAgIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUiBPVEhFUiBcbiAgICBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SIFBFUkZPUk1BTkNFIFxuICAgIE9GIFRISVMgU09GVFdBUkUuXG4qL1xuXG5pbXBvcnQgeyBVbml0MzBrLCBVbml0Um9sZTMwaywgVW5pdFJvbGVUb1N0cmluZzMwaywgTW9kZWwzMGssIFZlaGljbGUzMGssIFdhbGtlcjMwaywgRmx5ZXIzMGssIFBzeWNoaWNQb3dlcjMwaywgV2VhcG9uMzBrLCBSb3N0ZXIzMGssIFBzeWtlcjMwayB9IGZyb20gXCIuL3Jvc3RlcjMwa1wiO1xuaW1wb3J0IHsgUmVuZGVyZXIsIEp1c3RpZmljYXRpb24sIFJlbmRlclRleHQsIFJlbmRlclBhcmFncmFwaCB9IGZyb20gXCIuL3JlbmRlcmVyXCI7XG5cbmV4cG9ydCBjbGFzcyBSZW5kZXJlcjMwayBpbXBsZW1lbnRzIFJlbmRlcmVyIHtcblxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgX3JlczogbnVtYmVyID0gMTQ0O1xuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgX21hcmdpbjogbnVtYmVyID0gMDtcblxuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IF9iZXZlbFNpemUgPSAxNTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9kZXNjcmlwdGlvblN0YXJ0WCA9IDE5MDtcbiAgICBwcml2YXRlIF9kZXNjcmlwdGlvbldpZHRoOiBudW1iZXIgPSA2MDA7XG5cbiAgICBwcml2YXRlIF9zaG93V291bmRCb3hlczogYm9vbGVhbiA9IHRydWU7XG5cbiAgICBwcml2YXRlIF9yb3N0ZXI6IFJvc3RlcjMwayB8IG51bGwgPSBudWxsO1xuXG4gICAgcHJpdmF0ZSBfY3VycmVudFg6IG51bWJlciA9IDA7XG4gICAgcHJpdmF0ZSBfY3VycmVudFk6IG51bWJlciA9IDA7XG4gICAgcHJpdmF0ZSBfbWF4V2lkdGg6IG51bWJlciA9IDA7XG4gICAgcHJpdmF0ZSBfbWF4SGVpZ2h0OiBudW1iZXIgPSAwO1xuXG4gICAgcHJpdmF0ZSBfb2N0YWdvbjogSFRNTEltYWdlRWxlbWVudCB8IG51bGwgPSBudWxsO1xuXG4gICAgcHJpdmF0ZSBfcm9sZXM6IE1hcDxVbml0Um9sZTMwaywgSFRNTEltYWdlRWxlbWVudCB8IG51bGw+ID0gbmV3IE1hcCgpO1xuXG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgX2JsYWNrQ29sb3IgPSAnIzFkMjcyYSc7XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgX2dyZXkxID0gJyNiM2JiYjUnO1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IF9ncmV5TGlnaHQgPSAnI2RkZTFkZic7XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgX2ZpbGxDb2xvciA9ICcjZjZmNmY2JztcblxuICAgIGNvbnN0cnVjdG9yKHJvc3RlcjogUm9zdGVyMzBrKSB7XG5cbiAgICAgICAgdGhpcy5fcm9zdGVyID0gcm9zdGVyO1xuICAgICAgICB0aGlzLl9vY3RhZ29uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ29jdGFnb24nKSBhcyBIVE1MSW1hZ2VFbGVtZW50O1xuXG4gICAgICAgIHRoaXMuX3JvbGVzLnNldChVbml0Um9sZTMway5IUSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JvbGVfaHEnKSBhcyBIVE1MSW1hZ2VFbGVtZW50KTtcbiAgICAgICAgdGhpcy5fcm9sZXMuc2V0KFVuaXRSb2xlMzBrLlRSLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9sZV90cicpIGFzIEhUTUxJbWFnZUVsZW1lbnQpO1xuICAgICAgICB0aGlzLl9yb2xlcy5zZXQoVW5pdFJvbGUzMGsuRUwsIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb2xlX2VsJykgYXMgSFRNTEltYWdlRWxlbWVudCk7XG4gICAgICAgIHRoaXMuX3JvbGVzLnNldChVbml0Um9sZTMway5GQSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JvbGVfZmEnKSBhcyBIVE1MSW1hZ2VFbGVtZW50KTtcbiAgICAgICAgdGhpcy5fcm9sZXMuc2V0KFVuaXRSb2xlMzBrLkhTLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9sZV9ocycpIGFzIEhUTUxJbWFnZUVsZW1lbnQpO1xuICAgICAgICB0aGlzLl9yb2xlcy5zZXQoVW5pdFJvbGUzMGsuRkwsIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb2xlX2ZsJykgYXMgSFRNTEltYWdlRWxlbWVudCk7XG4gICAgICAgIHRoaXMuX3JvbGVzLnNldChVbml0Um9sZTMway5EVCwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JvbGVfZHQnKSBhcyBIVE1MSW1hZ2VFbGVtZW50KTtcbiAgICAgICAgdGhpcy5fcm9sZXMuc2V0KFVuaXRSb2xlMzBrLkZULCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9sZV9mdCcpIGFzIEhUTUxJbWFnZUVsZW1lbnQpO1xuICAgICAgICB0aGlzLl9yb2xlcy5zZXQoVW5pdFJvbGUzMGsuTFcsIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb2xlX2x3JykgYXMgSFRNTEltYWdlRWxlbWVudCk7XG4gICAgfVxuXG4gICAgcmVuZGVyKHRpdGxlOiBIVE1MRWxlbWVudCB8IG51bGwsIGxpc3Q6IEhUTUxFbGVtZW50IHwgbnVsbCwgZm9yY2VzOiBIVE1MRWxlbWVudCB8IG51bGwpOiB2b2lkIHtcblxuICAgICAgICBpZiAodGhpcy5fcm9zdGVyID09IG51bGwpIHJldHVybjtcblxuICAgICAgICBpZiAodGl0bGUpIHtcbiAgICAgICAgICAgIHRpdGxlLmlubmVySFRNTCA9ICc8aDM+JyArIHRoaXMuX3Jvc3Rlci5fbmFtZSArICcgKCcgKyB0aGlzLl9yb3N0ZXIuX3BvaW50cyArICcgcHRzKTwvaDM+JztcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGZvcmNlIG9mIHRoaXMuX3Jvc3Rlci5fZm9yY2VzKSB7XG4gICAgICAgICAgICBjb25zdCBmb3JjZVRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBpZiAoZm9yY2VUaXRsZSkge1xuICAgICAgICAgICAgICAgIGZvcmNlVGl0bGUuaW5uZXJIVE1MID0gJzxwPicgKyBmb3JjZS5fY2F0YWxvZyArICcgJyArIGZvcmNlLl9uYW1lICsgJzwvcD4nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxpc3QpXG4gICAgICAgICAgICAgICAgbGlzdC5hcHBlbmRDaGlsZChmb3JjZVRpdGxlKTtcblxuICAgICAgICAgICAgY29uc3QgdGFibGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0YWJsZScpO1xuICAgICAgICAgICAgdGFibGUuY2xhc3NMaXN0LmFkZCgndGFibGUnKTtcbiAgICAgICAgICAgIHRhYmxlLmNsYXNzTGlzdC5hZGQoJ3RhYmxlLXNtJyk7XG4gICAgICAgICAgICB0YWJsZS5jbGFzc0xpc3QuYWRkKCd0YWJsZS1zdHJpcGVkJyk7XG4gICAgICAgICAgICBjb25zdCB0aGVhZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RoZWFkJyk7XG4gICAgICAgICAgICB0YWJsZS5hcHBlbmRDaGlsZCh0aGVhZCk7XG4gICAgICAgICAgICB0aGVhZC5jbGFzc0xpc3QuYWRkKCd0aGVhZC1saWdodCcpO1xuICAgICAgICAgICAgY29uc3QgdHIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpO1xuICAgICAgICAgICAgdGhlYWQuYXBwZW5kQ2hpbGQodHIpO1xuICAgICAgICAgICAgY29uc3QgaGVhZGVySW5mbyA9IFt7IG5hbWU6IFwiTkFNRVwiLCB3OiAnMjUlJyB9LCB7IG5hbWU6IFwiUk9MRVwiLCB3OiAnMjAlJyB9LCB7IG5hbWU6IFwiTU9ERUxTXCIsIHc6ICc0MCUnIH0sIHsgbmFtZTogXCJQT0lOVFNcIiwgdzogJzE1JScgfV07XG4gICAgICAgICAgICBoZWFkZXJJbmZvLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHRoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGgnKTtcbiAgICAgICAgICAgICAgICB0aC5zY29wZSA9IFwiY29sXCI7XG4gICAgICAgICAgICAgICAgdGguaW5uZXJIVE1MID0gZWxlbWVudC5uYW1lO1xuICAgICAgICAgICAgICAgIHRoLnN0eWxlLndpZHRoID0gZWxlbWVudC53O1xuICAgICAgICAgICAgICAgIHRyLmFwcGVuZENoaWxkKHRoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZm9yY2VUaXRsZS5hcHBlbmRDaGlsZCh0YWJsZSk7XG5cbiAgICAgICAgICAgIGxldCBib2R5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGJvZHknKTtcbiAgICAgICAgICAgIHRhYmxlLmFwcGVuZENoaWxkKGJvZHkpO1xuICAgICAgICAgICAgZm9yIChsZXQgdW5pdCBvZiBmb3JjZS5fdW5pdHMpIHtcbiAgICAgICAgICAgICAgICBsZXQgdHIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpO1xuICAgICAgICAgICAgICAgIGxldCB1bmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG4gICAgICAgICAgICAgICAgdW5hbWUuaW5uZXJIVE1MID0gdW5pdC5fbmFtZTtcbiAgICAgICAgICAgICAgICBsZXQgcm9sZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG4gICAgICAgICAgICAgICAgcm9sZS5pbm5lckhUTUwgPSBVbml0Um9sZVRvU3RyaW5nMzBrW3VuaXQuX3JvbGVdO1xuICAgICAgICAgICAgICAgIGxldCBtb2RlbHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xuICAgICAgICAgICAgICAgIG1vZGVscy5pbm5lckhUTUwgPSBcIlwiO1xuICAgICAgICAgICAgICAgIGxldCBtaSA9IDA7XG4gICAgICAgICAgICAgICAgLy8gVE9ETzogdGhlIGxpc3Qgb2YgbW9kZWxzIG1heSBub3QgYmUgdW5pcXVlLCBtYWtlIHRoZSBsaXN0IHVuaXF1ZSBhbmQgdXBkYXRlIGNvdW50cyBhY2NvcmRpbmdseS5cbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG1vZGVsIG9mIHVuaXQuX21vZGVscykge1xuICAgICAgICAgICAgICAgICAgICBpZiAobW9kZWwuX2NvdW50ID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWxzLmlubmVySFRNTCArPSBtb2RlbC5fY291bnQgKyBcIiBcIiArIG1vZGVsLl9uYW1lO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWxzLmlubmVySFRNTCArPSBtb2RlbC5fbmFtZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtaSsrO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWkgIT0gdW5pdC5fbW9kZWxzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWxzLmlubmVySFRNTCArPSBcIiwgIFwiXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IHB0cyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG4gICAgICAgICAgICAgICAgcHRzLmlubmVySFRNTCA9IHVuaXQuX3BvaW50cy50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIHRyLmFwcGVuZENoaWxkKHVuYW1lKTtcbiAgICAgICAgICAgICAgICB0ci5hcHBlbmRDaGlsZChyb2xlKTtcbiAgICAgICAgICAgICAgICB0ci5hcHBlbmRDaGlsZChtb2RlbHMpO1xuICAgICAgICAgICAgICAgIHRyLmFwcGVuZENoaWxkKHB0cyk7XG4gICAgICAgICAgICAgICAgYm9keS5hcHBlbmRDaGlsZCh0cik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChmb3JjZS5fcnVsZXMuc2l6ZSA+IDApIHtcbiAgICAgICAgICAgICAgICBsZXQgYWxsZWdpYW5jZVJ1bGVzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgbGV0IHJ1bGVzSGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDMnKTtcbiAgICAgICAgICAgICAgICBhbGxlZ2lhbmNlUnVsZXMuYXBwZW5kQ2hpbGQocnVsZXNIZWFkZXIpO1xuICAgICAgICAgICAgICAgIHJ1bGVzSGVhZGVyLnRleHRDb250ZW50ID0gZm9yY2UuX2NhdGFsb2cgKyBcIiBBbGxlZ2lhbmNlIFJ1bGVzXCI7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgcnVsZSBvZiBmb3JjZS5fcnVsZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgbmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2g0Jyk7XG4gICAgICAgICAgICAgICAgICAgIG5hbWUudGV4dENvbnRlbnQgPSBydWxlWzBdO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZGVzYyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICAgICAgICAgICAgICAgICAgZGVzYy50ZXh0Q29udGVudCA9IHJ1bGVbMV07XG4gICAgICAgICAgICAgICAgICAgIHJvdy5hcHBlbmRDaGlsZChuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgcm93LmFwcGVuZENoaWxkKGRlc2MpO1xuICAgICAgICAgICAgICAgICAgICBhbGxlZ2lhbmNlUnVsZXMuYXBwZW5kQ2hpbGQocm93KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoZm9yY2VzKVxuICAgICAgICAgICAgICAgICAgICBmb3JjZXMuYXBwZW5kQ2hpbGQoYWxsZWdpYW5jZVJ1bGVzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yIChsZXQgdW5pdCBvZiBmb3JjZS5fdW5pdHMpIHtcbiAgICAgICAgICAgICAgICBsZXQgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJykgYXMgSFRNTENhbnZhc0VsZW1lbnQ7XG4gICAgICAgICAgICAgICAgY2FudmFzLndpZHRoID0gUmVuZGVyZXIzMGsuX3JlcyAqIDUuNTtcbiAgICAgICAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gUmVuZGVyZXIzMGsuX3JlcyAqIDEyO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Rlc2NyaXB0aW9uV2lkdGggPSBjYW52YXMud2lkdGggLSB0aGlzLl9kZXNjcmlwdGlvblN0YXJ0WCAtIDEwO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgZGltcyA9IHRoaXMucmVuZGVyVW5pdCh1bml0LCBjYW52YXMsIDAsIDApO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgYm9yZGVyID0gMjU7XG4gICAgICAgICAgICAgICAgbGV0IGZpbmFsQ2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJykgYXMgSFRNTENhbnZhc0VsZW1lbnQ7XG4gICAgICAgICAgICAgICAgZmluYWxDYW52YXMud2lkdGggPSBkaW1zWzBdICsgYm9yZGVyICogMjtcbiAgICAgICAgICAgICAgICBmaW5hbENhbnZhcy5oZWlnaHQgPSBkaW1zWzFdICsgYm9yZGVyICogMjtcbiAgICAgICAgICAgICAgICBsZXQgZmluYWxDdHggPSBmaW5hbENhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgICAgICAgICAgIGZpbmFsQ3R4Py5kcmF3SW1hZ2UoY2FudmFzLCBib3JkZXIsIGJvcmRlcik7XG4gICAgICAgICAgICAgICAgaWYgKGZvcmNlcykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgY2FudmFzRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgICAgIGNhbnZhc0Rpdi5hcHBlbmRDaGlsZChmaW5hbENhbnZhcyk7XG4gICAgICAgICAgICAgICAgICAgIGZvcmNlcy5hcHBlbmRDaGlsZChjYW52YXNEaXYpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW5kZXJCb3JkZXIoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIHg6IG51bWJlciwgeTogbnVtYmVyLCB3OiBudW1iZXIsIGg6IG51bWJlcikge1xuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBSZW5kZXJlcjMway5fYmxhY2tDb2xvcjtcblxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5tb3ZlVG8oeCwgeSArIFJlbmRlcmVyMzBrLl9iZXZlbFNpemUpO1xuICAgICAgICBjdHgubGluZVRvKHgsIHkgKyBoIC0gUmVuZGVyZXIzMGsuX2JldmVsU2l6ZSk7XG4gICAgICAgIGN0eC5saW5lVG8oeCArIFJlbmRlcmVyMzBrLl9iZXZlbFNpemUsIHkgKyBoKTtcbiAgICAgICAgY3R4LmxpbmVUbyh4ICsgdyAtIFJlbmRlcmVyMzBrLl9iZXZlbFNpemUsIHkgKyBoKTtcbiAgICAgICAgY3R4LmxpbmVUbyh4ICsgdywgeSArIGggLSBSZW5kZXJlcjMway5fYmV2ZWxTaXplKTtcbiAgICAgICAgY3R4LmxpbmVUbyh4ICsgdywgeSArIFJlbmRlcmVyMzBrLl9iZXZlbFNpemUpO1xuICAgICAgICBjdHgubGluZVRvKHggKyB3IC0gUmVuZGVyZXIzMGsuX2JldmVsU2l6ZSwgeSk7XG4gICAgICAgIGN0eC5saW5lVG8oeCArIFJlbmRlcmVyMzBrLl9iZXZlbFNpemUsIHkpO1xuICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgIGN0eC5zdHJva2UoKTtcblxuICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gUmVuZGVyZXIzMGsuX2ZpbGxDb2xvcjtcbiAgICAgICAgY3R4Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9IFwiZGVzdGluYXRpb24tb3ZlclwiO1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5tb3ZlVG8oeCwgeSArIFJlbmRlcmVyMzBrLl9iZXZlbFNpemUpO1xuICAgICAgICBjdHgubGluZVRvKHgsIHkgKyBoIC0gUmVuZGVyZXIzMGsuX2JldmVsU2l6ZSk7XG4gICAgICAgIGN0eC5saW5lVG8oeCArIFJlbmRlcmVyMzBrLl9iZXZlbFNpemUsIHkgKyBoKTtcbiAgICAgICAgY3R4LmxpbmVUbyh4ICsgdyAtIFJlbmRlcmVyMzBrLl9iZXZlbFNpemUsIHkgKyBoKTtcbiAgICAgICAgY3R4LmxpbmVUbyh4ICsgdywgeSArIGggLSBSZW5kZXJlcjMway5fYmV2ZWxTaXplKTtcbiAgICAgICAgY3R4LmxpbmVUbyh4ICsgdywgeSArIFJlbmRlcmVyMzBrLl9iZXZlbFNpemUpO1xuICAgICAgICBjdHgubGluZVRvKHggKyB3IC0gUmVuZGVyZXIzMGsuX2JldmVsU2l6ZSwgeSk7XG4gICAgICAgIGN0eC5saW5lVG8oeCArIFJlbmRlcmVyMzBrLl9iZXZlbFNpemUsIHkpO1xuICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgIGN0eC5maWxsKCk7XG5cbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlcldhdGVybWFyayhjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCkge1xuXG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW5kZXJMaW5lKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKTogdm9pZCB7XG4gICAgICAgIGN0eC5saW5lV2lkdGggPSAyO1xuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBSZW5kZXJlcjMway5fYmxhY2tDb2xvcjtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBjdHgubW92ZVRvKHRoaXMuX2N1cnJlbnRYLCB0aGlzLl9jdXJyZW50WSk7XG4gICAgICAgIGN0eC5saW5lVG8odGhpcy5fY3VycmVudFggKyB0aGlzLl9tYXhXaWR0aCwgdGhpcy5fY3VycmVudFkpO1xuICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRZICs9IDE7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW5kZXJUYWJsZUhlYWRlcihjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgbGFiZWxzOiBzdHJpbmdbXSwgY29sdW1uV2lkdGhzOiBudW1iZXJbXSB8IG51bGwpIHtcbiAgICAgICAgbGV0IHggPSB0aGlzLl9jdXJyZW50WDtcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gMjI7XG4gICAgICAgIGNvbnN0IHdpZHRoID0gdGhpcy5fbWF4V2lkdGg7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBSZW5kZXJlcjMway5fZ3JleTE7XG4gICAgICAgIGN0eC5maWxsUmVjdCh0aGlzLl9jdXJyZW50WCwgdGhpcy5fY3VycmVudFksIHdpZHRoLCBoZWlnaHQpO1xuXG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBSZW5kZXJlcjMway5fYmxhY2tDb2xvcjtcbiAgICAgICAgY3R4LmZvbnQgPSAnMTRweCBzYW5zLXNlcmlmJztcbiAgICAgICAgdmFyIHcgPSA1MDtcbiAgICAgICAgaWYgKGxhYmVscykge1xuICAgICAgICAgICAgY3R4LmZvbnQgPSAnMTJweCBzYW5zLXNlcmlmJztcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGFiZWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbHVtbldpZHRocykgdyA9IGNvbHVtbldpZHRoc1tpXTtcbiAgICAgICAgICAgICAgICBSZW5kZXJUZXh0KGN0eCwgbGFiZWxzW2ldLCB4LCB0aGlzLl9jdXJyZW50WSwgdywgaGVpZ2h0LCBKdXN0aWZpY2F0aW9uLkNlbnRlcik7XG4gICAgICAgICAgICAgICAgeCArPSB3O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fY3VycmVudFkgKz0gaGVpZ2h0O1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVuZGVyUG93ZXJzKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCBwb3dlcnM6IFBzeWNoaWNQb3dlcjMwa1tdLCBjb2x1bW5XaWR0aHM6IG51bWJlcltdIHwgbnVsbCk6IHZvaWQge1xuICAgICAgICBjdHguZm9udCA9ICcxMnB4IHNhbnMtc2VyaWYnO1xuXG4gICAgICAgIGNvbnN0IGhlaWdodCA9IDIyO1xuXG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgbGV0IHcgPSA1MDtcblxuICAgICAgICBjdHguc2F2ZSgpO1xuXG4gICAgICAgIGZvciAoY29uc3QgcG93ZXIgb2YgcG93ZXJzKSB7XG4gICAgICAgICAgICBsZXQgY2kgPSAwO1xuICAgICAgICAgICAgbGV0IHggPSB0aGlzLl9jdXJyZW50WDtcblxuICAgICAgICAgICAgbGV0IHhTdGFydCA9IHRoaXMuX2N1cnJlbnRYO1xuICAgICAgICAgICAgbGV0IHlTdGFydCA9IHRoaXMuX2N1cnJlbnRZO1xuXG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gUmVuZGVyZXIzMGsuX2JsYWNrQ29sb3I7XG4gICAgICAgICAgICBpZiAoY29sdW1uV2lkdGhzKSB3ID0gY29sdW1uV2lkdGhzW2NpKytdO1xuICAgICAgICAgICAgUmVuZGVyVGV4dChjdHgsIHBvd2VyLl9uYW1lLnRvU3RyaW5nKCksIHgsIHRoaXMuX2N1cnJlbnRZLCB3LCBoZWlnaHQsIEp1c3RpZmljYXRpb24uQ2VudGVyKTtcbiAgICAgICAgICAgIHggKz0gdztcblxuICAgICAgICAgICAgaWYgKGNvbHVtbldpZHRocykgdyA9IGNvbHVtbldpZHRoc1tjaSsrXTtcbiAgICAgICAgICAgIFJlbmRlclRleHQoY3R4LCBwb3dlci5fd2FycENoYXJnZS50b1N0cmluZygpLCB4LCB0aGlzLl9jdXJyZW50WSwgdywgaGVpZ2h0LCBKdXN0aWZpY2F0aW9uLkNlbnRlcik7XG4gICAgICAgICAgICB4ICs9IHc7XG5cbiAgICAgICAgICAgIGlmIChjb2x1bW5XaWR0aHMpIHcgPSBjb2x1bW5XaWR0aHNbY2krK107XG4gICAgICAgICAgICBSZW5kZXJUZXh0KGN0eCwgcG93ZXIuX3JhbmdlLnRvU3RyaW5nKCksIHgsIHRoaXMuX2N1cnJlbnRZLCB3LCBoZWlnaHQsIEp1c3RpZmljYXRpb24uQ2VudGVyKTtcbiAgICAgICAgICAgIHggKz0gdztcblxuICAgICAgICAgICAgaWYgKGNvbHVtbldpZHRocykgdyA9IGNvbHVtbldpZHRoc1tjaSsrXTtcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRZICs9IDQ7XG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50WSA9IFJlbmRlclBhcmFncmFwaChjdHgsIHBvd2VyLl9kZXRhaWxzLCB4LCB0aGlzLl9jdXJyZW50WSwgdyk7XG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50WSArPSAyO1xuICAgICAgICAgICAgeCArPSB3O1xuXG5cbiAgICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgICBpZiAoaSAlIDIpIGN0eC5maWxsU3R5bGUgPSBSZW5kZXJlcjMway5fZ3JleUxpZ2h0O1xuICAgICAgICAgICAgZWxzZSBjdHguZmlsbFN0eWxlID0gJyNmZmZmZmYnO1xuICAgICAgICAgICAgY3R4Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9IFwiZGVzdGluYXRpb24tb3ZlclwiO1xuICAgICAgICAgICAgY29uc3QgYWN0dWFsSGVpZ2h0ID0gdGhpcy5fY3VycmVudFkgLSB5U3RhcnQ7XG4gICAgICAgICAgICBjdHguZmlsbFJlY3QoeFN0YXJ0LCB5U3RhcnQsIHRoaXMuX21heFdpZHRoLCBhY3R1YWxIZWlnaHQpO1xuICAgICAgICAgICAgaSsrO1xuXG4gICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW5kZXJXZWFwb25zKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCB3ZWFwb25zOiBXZWFwb24zMGtbXSwgY29sdW1uV2lkdGhzOiBudW1iZXJbXSB8IG51bGwpOiB2b2lkIHtcbiAgICAgICAgY3R4LmZvbnQgPSAnMTJweCBzYW5zLXNlcmlmJztcblxuICAgICAgICBjb25zdCBoZWlnaHQgPSAyMjtcblxuICAgICAgICBjdHguc2F2ZSgpO1xuXG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgbGV0IHcgPSA1MDtcbiAgICAgICAgZm9yIChjb25zdCB3ZWFwb24gb2Ygd2VhcG9ucykge1xuXG4gICAgICAgICAgICBsZXQgY2kgPSAwO1xuICAgICAgICAgICAgbGV0IHggPSB0aGlzLl9jdXJyZW50WDtcblxuICAgICAgICAgICAgbGV0IHhTdGFydCA9IHRoaXMuX2N1cnJlbnRYO1xuICAgICAgICAgICAgbGV0IHlTdGFydCA9IHRoaXMuX2N1cnJlbnRZO1xuXG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gUmVuZGVyZXIzMGsuX2JsYWNrQ29sb3I7XG4gICAgICAgICAgICBpZiAoY29sdW1uV2lkdGhzKSB3ID0gY29sdW1uV2lkdGhzW2NpKytdO1xuICAgICAgICAgICAgUmVuZGVyVGV4dChjdHgsIHdlYXBvbi5fbmFtZS50b1N0cmluZygpLCB4LCB0aGlzLl9jdXJyZW50WSwgdywgaGVpZ2h0LCBKdXN0aWZpY2F0aW9uLkNlbnRlcik7XG4gICAgICAgICAgICB4ICs9IHc7XG5cbiAgICAgICAgICAgIGlmIChjb2x1bW5XaWR0aHMpIHcgPSBjb2x1bW5XaWR0aHNbY2krK107XG4gICAgICAgICAgICBSZW5kZXJUZXh0KGN0eCwgd2VhcG9uLl9yYW5nZS50b1N0cmluZygpLCB4LCB0aGlzLl9jdXJyZW50WSwgdywgaGVpZ2h0LCBKdXN0aWZpY2F0aW9uLkNlbnRlcik7XG4gICAgICAgICAgICB4ICs9IHc7XG5cbiAgICAgICAgICAgIGlmIChjb2x1bW5XaWR0aHMpIHcgPSBjb2x1bW5XaWR0aHNbY2krK107XG4gICAgICAgICAgICBSZW5kZXJUZXh0KGN0eCwgd2VhcG9uLl9zdHIudG9TdHJpbmcoKSwgeCwgdGhpcy5fY3VycmVudFksIHcsIGhlaWdodCwgSnVzdGlmaWNhdGlvbi5DZW50ZXIpO1xuICAgICAgICAgICAgeCArPSB3O1xuXG4gICAgICAgICAgICBpZiAoY29sdW1uV2lkdGhzKSB3ID0gY29sdW1uV2lkdGhzW2NpKytdO1xuICAgICAgICAgICAgUmVuZGVyVGV4dChjdHgsIHdlYXBvbi5fYXAudG9TdHJpbmcoKSwgeCwgdGhpcy5fY3VycmVudFksIHcsIGhlaWdodCwgSnVzdGlmaWNhdGlvbi5DZW50ZXIpO1xuICAgICAgICAgICAgeCArPSB3O1xuXG4gICAgICAgICAgICBpZiAoY29sdW1uV2lkdGhzKSB3ID0gY29sdW1uV2lkdGhzW2NpKytdO1xuICAgICAgICAgICAgUmVuZGVyVGV4dChjdHgsIHdlYXBvbi5fdHlwZS50b1N0cmluZygpLCB4LCB0aGlzLl9jdXJyZW50WSwgdywgaGVpZ2h0LCBKdXN0aWZpY2F0aW9uLkNlbnRlcik7XG4gICAgICAgICAgICB4ICs9IHc7XG5cbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRZICs9IGhlaWdodDtcbiAgICAgICAgICAgIHggKz0gdztcblxuICAgICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICAgIGN0eC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSBcImRlc3RpbmF0aW9uLW92ZXJcIjtcbiAgICAgICAgICAgIGNvbnN0IGFjdHVhbEhlaWdodCA9IHRoaXMuX2N1cnJlbnRZIC0geVN0YXJ0O1xuICAgICAgICAgICAgaWYgKGkgJSAyKSBjdHguZmlsbFN0eWxlID0gUmVuZGVyZXIzMGsuX2dyZXlMaWdodDtcbiAgICAgICAgICAgIGVsc2UgY3R4LmZpbGxTdHlsZSA9ICcjZmZmZmZmJztcbiAgICAgICAgICAgIGN0eC5maWxsUmVjdCh4U3RhcnQsIHlTdGFydCwgdGhpcy5fbWF4V2lkdGgsIGFjdHVhbEhlaWdodCk7XG4gICAgICAgICAgICBpKys7XG5cbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgIH1cbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlck1vZGVsKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCBtb2RlbDogTW9kZWwzMGssIGNvbHVtbldpZHRoczogbnVtYmVyW10gfCBudWxsLCBiZzogbnVtYmVyKTogdm9pZCB7XG5cbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gMjQ7XG5cbiAgICAgICAgbGV0IHcgPSA1MDtcbiAgICAgICAgbGV0IHggPSB0aGlzLl9jdXJyZW50WDtcbiAgICAgICAgbGV0IGNpID0gMDtcblxuICAgICAgICBpZiAoYmcgJSAyKSBjdHguZmlsbFN0eWxlID0gUmVuZGVyZXIzMGsuX2dyZXlMaWdodDtcbiAgICAgICAgZWxzZSBjdHguZmlsbFN0eWxlID0gJyNmZmZmZmYnO1xuICAgICAgICBjdHguZmlsbFJlY3QoeCwgdGhpcy5fY3VycmVudFksIHRoaXMuX21heFdpZHRoLCBoZWlnaHQpO1xuXG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBSZW5kZXJlcjMway5fYmxhY2tDb2xvcjtcbiAgICAgICAgY3R4LmZvbnQgPSAnMTJweCBzYW5zLXNlcmlmJztcblxuICAgICAgICBpZiAoY29sdW1uV2lkdGhzKSB3ID0gY29sdW1uV2lkdGhzW2NpKytdO1xuICAgICAgICBSZW5kZXJUZXh0KGN0eCwgbW9kZWwuX25hbWUudG9TdHJpbmcoKSwgeCwgdGhpcy5fY3VycmVudFksIHcsIGhlaWdodCwgSnVzdGlmaWNhdGlvbi5DZW50ZXIpO1xuICAgICAgICB4ICs9IHc7XG5cbiAgICAgICAgaWYgKGNvbHVtbldpZHRocykgdyA9IGNvbHVtbldpZHRoc1tjaSsrXTtcbiAgICAgICAgUmVuZGVyVGV4dChjdHgsIG1vZGVsLl93cy50b1N0cmluZygpLCB4LCB0aGlzLl9jdXJyZW50WSwgdywgaGVpZ2h0LCBKdXN0aWZpY2F0aW9uLkNlbnRlcik7XG4gICAgICAgIHggKz0gdztcblxuICAgICAgICBpZiAoY29sdW1uV2lkdGhzKSB3ID0gY29sdW1uV2lkdGhzW2NpKytdO1xuICAgICAgICBSZW5kZXJUZXh0KGN0eCwgbW9kZWwuX2JzLnRvU3RyaW5nKCksIHgsIHRoaXMuX2N1cnJlbnRZLCB3LCBoZWlnaHQsIEp1c3RpZmljYXRpb24uQ2VudGVyKTtcbiAgICAgICAgeCArPSB3O1xuXG4gICAgICAgIGlmIChjb2x1bW5XaWR0aHMpIHcgPSBjb2x1bW5XaWR0aHNbY2krK107XG4gICAgICAgIFJlbmRlclRleHQoY3R4LCBtb2RlbC5fc3RyLnRvU3RyaW5nKCksIHgsIHRoaXMuX2N1cnJlbnRZLCB3LCBoZWlnaHQsIEp1c3RpZmljYXRpb24uQ2VudGVyKTtcbiAgICAgICAgeCArPSB3O1xuXG4gICAgICAgIGlmIChjb2x1bW5XaWR0aHMpIHcgPSBjb2x1bW5XaWR0aHNbY2krK107XG4gICAgICAgIFJlbmRlclRleHQoY3R4LCBtb2RlbC5fdG91Z2huZXNzLnRvU3RyaW5nKCksIHgsIHRoaXMuX2N1cnJlbnRZLCB3LCBoZWlnaHQsIEp1c3RpZmljYXRpb24uQ2VudGVyKTtcbiAgICAgICAgeCArPSB3O1xuXG4gICAgICAgIGlmIChjb2x1bW5XaWR0aHMpIHcgPSBjb2x1bW5XaWR0aHNbY2krK107XG4gICAgICAgIFJlbmRlclRleHQoY3R4LCBtb2RlbC5fd291bmRzLnRvU3RyaW5nKCksIHgsIHRoaXMuX2N1cnJlbnRZLCB3LCBoZWlnaHQsIEp1c3RpZmljYXRpb24uQ2VudGVyKTtcbiAgICAgICAgeCArPSB3O1xuXG4gICAgICAgIGlmIChjb2x1bW5XaWR0aHMpIHcgPSBjb2x1bW5XaWR0aHNbY2krK107XG4gICAgICAgIFJlbmRlclRleHQoY3R4LCBtb2RlbC5faW5pdGlhdGl2ZS50b1N0cmluZygpLCB4LCB0aGlzLl9jdXJyZW50WSwgdywgaGVpZ2h0LCBKdXN0aWZpY2F0aW9uLkNlbnRlcik7XG4gICAgICAgIHggKz0gdztcblxuICAgICAgICBpZiAoY29sdW1uV2lkdGhzKSB3ID0gY29sdW1uV2lkdGhzW2NpKytdO1xuICAgICAgICBSZW5kZXJUZXh0KGN0eCwgbW9kZWwuX2F0dGFja3MudG9TdHJpbmcoKSwgeCwgdGhpcy5fY3VycmVudFksIHcsIGhlaWdodCwgSnVzdGlmaWNhdGlvbi5DZW50ZXIpO1xuICAgICAgICB4ICs9IHc7XG5cbiAgICAgICAgaWYgKGNvbHVtbldpZHRocykgdyA9IGNvbHVtbldpZHRoc1tjaSsrXTtcbiAgICAgICAgUmVuZGVyVGV4dChjdHgsIG1vZGVsLl9sZWFkZXJzaGlwLnRvU3RyaW5nKCksIHgsIHRoaXMuX2N1cnJlbnRZLCB3LCBoZWlnaHQsIEp1c3RpZmljYXRpb24uQ2VudGVyKTtcbiAgICAgICAgeCArPSB3O1xuXG4gICAgICAgIGlmIChjb2x1bW5XaWR0aHMpIHcgPSBjb2x1bW5XaWR0aHNbY2krK107XG4gICAgICAgIFJlbmRlclRleHQoY3R4LCBtb2RlbC5fc2F2ZS50b1N0cmluZygpLCB4LCB0aGlzLl9jdXJyZW50WSwgdywgaGVpZ2h0LCBKdXN0aWZpY2F0aW9uLkNlbnRlcik7XG4gICAgICAgIHggKz0gdztcblxuICAgICAgICB0aGlzLl9jdXJyZW50WSArPSBoZWlnaHQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW5kZXJWZWhpY2xlKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCBtb2RlbDogVmVoaWNsZTMwaywgY29sdW1uV2lkdGhzOiBudW1iZXJbXSB8IG51bGwsIGJnOiBudW1iZXIpOiB2b2lkIHtcblxuICAgICAgICBjb25zdCBoZWlnaHQgPSAyNDtcblxuICAgICAgICBsZXQgdyA9IDUwO1xuICAgICAgICBsZXQgeCA9IHRoaXMuX2N1cnJlbnRYO1xuICAgICAgICBsZXQgY2kgPSAwO1xuXG4gICAgICAgIGlmIChiZyAlIDIpIGN0eC5maWxsU3R5bGUgPSBSZW5kZXJlcjMway5fZ3JleUxpZ2h0O1xuICAgICAgICBlbHNlIGN0eC5maWxsU3R5bGUgPSAnI2ZmZmZmZic7XG4gICAgICAgIGN0eC5maWxsUmVjdCh4LCB0aGlzLl9jdXJyZW50WSwgdGhpcy5fbWF4V2lkdGgsIGhlaWdodCk7XG5cbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IFJlbmRlcmVyMzBrLl9ibGFja0NvbG9yO1xuICAgICAgICBjdHguZm9udCA9ICcxMnB4IHNhbnMtc2VyaWYnO1xuXG4gICAgICAgIGlmIChjb2x1bW5XaWR0aHMpIHcgPSBjb2x1bW5XaWR0aHNbY2krK107XG4gICAgICAgIFJlbmRlclRleHQoY3R4LCBtb2RlbC5fbmFtZS50b1N0cmluZygpLCB4LCB0aGlzLl9jdXJyZW50WSwgdywgaGVpZ2h0LCBKdXN0aWZpY2F0aW9uLkNlbnRlcik7XG4gICAgICAgIHggKz0gdztcblxuICAgICAgICBpZiAoY29sdW1uV2lkdGhzKSB3ID0gY29sdW1uV2lkdGhzW2NpKytdO1xuICAgICAgICBSZW5kZXJUZXh0KGN0eCwgbW9kZWwuX2JzLnRvU3RyaW5nKCksIHgsIHRoaXMuX2N1cnJlbnRZLCB3LCBoZWlnaHQsIEp1c3RpZmljYXRpb24uQ2VudGVyKTtcbiAgICAgICAgeCArPSB3O1xuXG4gICAgICAgIGlmIChjb2x1bW5XaWR0aHMpIHcgPSBjb2x1bW5XaWR0aHNbY2krK107XG4gICAgICAgIFJlbmRlclRleHQoY3R4LCBtb2RlbC5fZnJvbnQudG9TdHJpbmcoKSwgeCwgdGhpcy5fY3VycmVudFksIHcsIGhlaWdodCwgSnVzdGlmaWNhdGlvbi5DZW50ZXIpO1xuICAgICAgICB4ICs9IHc7XG5cbiAgICAgICAgaWYgKGNvbHVtbldpZHRocykgdyA9IGNvbHVtbldpZHRoc1tjaSsrXTtcbiAgICAgICAgUmVuZGVyVGV4dChjdHgsIG1vZGVsLl9zaWRlLnRvU3RyaW5nKCksIHgsIHRoaXMuX2N1cnJlbnRZLCB3LCBoZWlnaHQsIEp1c3RpZmljYXRpb24uQ2VudGVyKTtcbiAgICAgICAgeCArPSB3O1xuXG4gICAgICAgIGlmIChjb2x1bW5XaWR0aHMpIHcgPSBjb2x1bW5XaWR0aHNbY2krK107XG4gICAgICAgIFJlbmRlclRleHQoY3R4LCBtb2RlbC5fcmVhci50b1N0cmluZygpLCB4LCB0aGlzLl9jdXJyZW50WSwgdywgaGVpZ2h0LCBKdXN0aWZpY2F0aW9uLkNlbnRlcik7XG4gICAgICAgIHggKz0gdztcblxuICAgICAgICBpZiAoY29sdW1uV2lkdGhzKSB3ID0gY29sdW1uV2lkdGhzW2NpKytdO1xuICAgICAgICBSZW5kZXJUZXh0KGN0eCwgbW9kZWwuX2hwLnRvU3RyaW5nKCksIHgsIHRoaXMuX2N1cnJlbnRZLCB3LCBoZWlnaHQsIEp1c3RpZmljYXRpb24uQ2VudGVyKTtcbiAgICAgICAgeCArPSB3O1xuXG4gICAgICAgIGlmIChjb2x1bW5XaWR0aHMpIHcgPSBjb2x1bW5XaWR0aHNbY2krK107XG4gICAgICAgIFJlbmRlclRleHQoY3R4LCBtb2RlbC5fdHlwZS50b1N0cmluZygpLCB4LCB0aGlzLl9jdXJyZW50WSwgdywgaGVpZ2h0LCBKdXN0aWZpY2F0aW9uLkNlbnRlcik7XG4gICAgICAgIHggKz0gdztcblxuICAgICAgICB0aGlzLl9jdXJyZW50WSArPSBoZWlnaHQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW5kZXJXYWxrZXIoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIG1vZGVsOiBXYWxrZXIzMGssIGNvbHVtbldpZHRoczogbnVtYmVyW10gfCBudWxsLCBiZzogbnVtYmVyKTogdm9pZCB7XG5cbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gMjQ7XG5cbiAgICAgICAgbGV0IHcgPSA1MDtcbiAgICAgICAgbGV0IHggPSB0aGlzLl9jdXJyZW50WDtcbiAgICAgICAgbGV0IGNpID0gMDtcblxuICAgICAgICBpZiAoYmcgJSAyKSBjdHguZmlsbFN0eWxlID0gUmVuZGVyZXIzMGsuX2dyZXlMaWdodDtcbiAgICAgICAgZWxzZSBjdHguZmlsbFN0eWxlID0gJyNmZmZmZmYnO1xuICAgICAgICBjdHguZmlsbFJlY3QoeCwgdGhpcy5fY3VycmVudFksIHRoaXMuX21heFdpZHRoLCBoZWlnaHQpO1xuXG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBSZW5kZXJlcjMway5fYmxhY2tDb2xvcjtcbiAgICAgICAgY3R4LmZvbnQgPSAnMTJweCBzYW5zLXNlcmlmJztcblxuICAgICAgICBpZiAoY29sdW1uV2lkdGhzKSB3ID0gY29sdW1uV2lkdGhzW2NpKytdO1xuICAgICAgICBSZW5kZXJUZXh0KGN0eCwgbW9kZWwuX25hbWUudG9TdHJpbmcoKSwgeCwgdGhpcy5fY3VycmVudFksIHcsIGhlaWdodCwgSnVzdGlmaWNhdGlvbi5DZW50ZXIpO1xuICAgICAgICB4ICs9IHc7XG5cbiAgICAgICAgaWYgKGNvbHVtbldpZHRocykgdyA9IGNvbHVtbldpZHRoc1tjaSsrXTtcbiAgICAgICAgUmVuZGVyVGV4dChjdHgsIG1vZGVsLl93cy50b1N0cmluZygpLCB4LCB0aGlzLl9jdXJyZW50WSwgdywgaGVpZ2h0LCBKdXN0aWZpY2F0aW9uLkNlbnRlcik7XG4gICAgICAgIHggKz0gdztcblxuICAgICAgICBpZiAoY29sdW1uV2lkdGhzKSB3ID0gY29sdW1uV2lkdGhzW2NpKytdO1xuICAgICAgICBSZW5kZXJUZXh0KGN0eCwgbW9kZWwuX2JzLnRvU3RyaW5nKCksIHgsIHRoaXMuX2N1cnJlbnRZLCB3LCBoZWlnaHQsIEp1c3RpZmljYXRpb24uQ2VudGVyKTtcbiAgICAgICAgeCArPSB3O1xuXG4gICAgICAgIGlmIChjb2x1bW5XaWR0aHMpIHcgPSBjb2x1bW5XaWR0aHNbY2krK107XG4gICAgICAgIFJlbmRlclRleHQoY3R4LCBtb2RlbC5fc3RyLnRvU3RyaW5nKCksIHgsIHRoaXMuX2N1cnJlbnRZLCB3LCBoZWlnaHQsIEp1c3RpZmljYXRpb24uQ2VudGVyKTtcbiAgICAgICAgeCArPSB3O1xuXG4gICAgICAgIGlmIChjb2x1bW5XaWR0aHMpIHcgPSBjb2x1bW5XaWR0aHNbY2krK107XG4gICAgICAgIFJlbmRlclRleHQoY3R4LCBtb2RlbC5fZnJvbnQudG9TdHJpbmcoKSwgeCwgdGhpcy5fY3VycmVudFksIHcsIGhlaWdodCwgSnVzdGlmaWNhdGlvbi5DZW50ZXIpO1xuICAgICAgICB4ICs9IHc7XG5cbiAgICAgICAgaWYgKGNvbHVtbldpZHRocykgdyA9IGNvbHVtbldpZHRoc1tjaSsrXTtcbiAgICAgICAgUmVuZGVyVGV4dChjdHgsIG1vZGVsLl9zaWRlLnRvU3RyaW5nKCksIHgsIHRoaXMuX2N1cnJlbnRZLCB3LCBoZWlnaHQsIEp1c3RpZmljYXRpb24uQ2VudGVyKTtcbiAgICAgICAgeCArPSB3O1xuXG4gICAgICAgIGlmIChjb2x1bW5XaWR0aHMpIHcgPSBjb2x1bW5XaWR0aHNbY2krK107XG4gICAgICAgIFJlbmRlclRleHQoY3R4LCBtb2RlbC5fcmVhci50b1N0cmluZygpLCB4LCB0aGlzLl9jdXJyZW50WSwgdywgaGVpZ2h0LCBKdXN0aWZpY2F0aW9uLkNlbnRlcik7XG4gICAgICAgIHggKz0gdztcblxuICAgICAgICBpZiAoY29sdW1uV2lkdGhzKSB3ID0gY29sdW1uV2lkdGhzW2NpKytdO1xuICAgICAgICBSZW5kZXJUZXh0KGN0eCwgbW9kZWwuX2luaXRpYXRpdmUudG9TdHJpbmcoKSwgeCwgdGhpcy5fY3VycmVudFksIHcsIGhlaWdodCwgSnVzdGlmaWNhdGlvbi5DZW50ZXIpO1xuICAgICAgICB4ICs9IHc7XG5cbiAgICAgICAgaWYgKGNvbHVtbldpZHRocykgdyA9IGNvbHVtbldpZHRoc1tjaSsrXTtcbiAgICAgICAgUmVuZGVyVGV4dChjdHgsIG1vZGVsLl9hdHRhY2tzLnRvU3RyaW5nKCksIHgsIHRoaXMuX2N1cnJlbnRZLCB3LCBoZWlnaHQsIEp1c3RpZmljYXRpb24uQ2VudGVyKTtcbiAgICAgICAgeCArPSB3O1xuXG4gICAgICAgIGlmIChjb2x1bW5XaWR0aHMpIHcgPSBjb2x1bW5XaWR0aHNbY2krK107XG4gICAgICAgIFJlbmRlclRleHQoY3R4LCBtb2RlbC5faHAudG9TdHJpbmcoKSwgeCwgdGhpcy5fY3VycmVudFksIHcsIGhlaWdodCwgSnVzdGlmaWNhdGlvbi5DZW50ZXIpO1xuICAgICAgICB4ICs9IHc7XG5cbiAgICAgICAgaWYgKGNvbHVtbldpZHRocykgdyA9IGNvbHVtbldpZHRoc1tjaSsrXTtcbiAgICAgICAgUmVuZGVyVGV4dChjdHgsIG1vZGVsLl90eXBlLnRvU3RyaW5nKCksIHgsIHRoaXMuX2N1cnJlbnRZLCB3LCBoZWlnaHQsIEp1c3RpZmljYXRpb24uQ2VudGVyKTtcbiAgICAgICAgeCArPSB3O1xuXG4gICAgICAgIHRoaXMuX2N1cnJlbnRZICs9IGhlaWdodDtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlckZseWVyKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCBtb2RlbDogRmx5ZXIzMGssIGNvbHVtbldpZHRoczogbnVtYmVyW10gfCBudWxsLCBiZzogbnVtYmVyKTogdm9pZCB7XG5cbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gMjQ7XG5cbiAgICAgICAgbGV0IHcgPSA1MDtcbiAgICAgICAgbGV0IHggPSB0aGlzLl9jdXJyZW50WDtcbiAgICAgICAgbGV0IGNpID0gMDtcblxuICAgICAgICBpZiAoYmcgJSAyKSBjdHguZmlsbFN0eWxlID0gUmVuZGVyZXIzMGsuX2dyZXlMaWdodDtcbiAgICAgICAgZWxzZSBjdHguZmlsbFN0eWxlID0gJyNmZmZmZmYnO1xuICAgICAgICBjdHguZmlsbFJlY3QoeCwgdGhpcy5fY3VycmVudFksIHRoaXMuX21heFdpZHRoLCBoZWlnaHQpO1xuXG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBSZW5kZXJlcjMway5fYmxhY2tDb2xvcjtcbiAgICAgICAgY3R4LmZvbnQgPSAnMTJweCBzYW5zLXNlcmlmJztcblxuICAgICAgICBpZiAoY29sdW1uV2lkdGhzKSB3ID0gY29sdW1uV2lkdGhzW2NpKytdO1xuICAgICAgICBSZW5kZXJUZXh0KGN0eCwgbW9kZWwuX25hbWUudG9TdHJpbmcoKSwgeCwgdGhpcy5fY3VycmVudFksIHcsIGhlaWdodCwgSnVzdGlmaWNhdGlvbi5DZW50ZXIpO1xuICAgICAgICB4ICs9IHc7XG5cbiAgICAgICAgaWYgKGNvbHVtbldpZHRocykgdyA9IGNvbHVtbldpZHRoc1tjaSsrXTtcbiAgICAgICAgUmVuZGVyVGV4dChjdHgsIG1vZGVsLl9icy50b1N0cmluZygpLCB4LCB0aGlzLl9jdXJyZW50WSwgdywgaGVpZ2h0LCBKdXN0aWZpY2F0aW9uLkNlbnRlcik7XG4gICAgICAgIHggKz0gdztcblxuICAgICAgICBpZiAoY29sdW1uV2lkdGhzKSB3ID0gY29sdW1uV2lkdGhzW2NpKytdO1xuICAgICAgICBSZW5kZXJUZXh0KGN0eCwgbW9kZWwuX2Zyb250LnRvU3RyaW5nKCksIHgsIHRoaXMuX2N1cnJlbnRZLCB3LCBoZWlnaHQsIEp1c3RpZmljYXRpb24uQ2VudGVyKTtcbiAgICAgICAgeCArPSB3O1xuXG4gICAgICAgIGlmIChjb2x1bW5XaWR0aHMpIHcgPSBjb2x1bW5XaWR0aHNbY2krK107XG4gICAgICAgIFJlbmRlclRleHQoY3R4LCBtb2RlbC5fc2lkZS50b1N0cmluZygpLCB4LCB0aGlzLl9jdXJyZW50WSwgdywgaGVpZ2h0LCBKdXN0aWZpY2F0aW9uLkNlbnRlcik7XG4gICAgICAgIHggKz0gdztcblxuICAgICAgICBpZiAoY29sdW1uV2lkdGhzKSB3ID0gY29sdW1uV2lkdGhzW2NpKytdO1xuICAgICAgICBSZW5kZXJUZXh0KGN0eCwgbW9kZWwuX3JlYXIudG9TdHJpbmcoKSwgeCwgdGhpcy5fY3VycmVudFksIHcsIGhlaWdodCwgSnVzdGlmaWNhdGlvbi5DZW50ZXIpO1xuICAgICAgICB4ICs9IHc7XG5cbiAgICAgICAgaWYgKGNvbHVtbldpZHRocykgdyA9IGNvbHVtbldpZHRoc1tjaSsrXTtcbiAgICAgICAgUmVuZGVyVGV4dChjdHgsIG1vZGVsLl9ocC50b1N0cmluZygpLCB4LCB0aGlzLl9jdXJyZW50WSwgdywgaGVpZ2h0LCBKdXN0aWZpY2F0aW9uLkNlbnRlcik7XG4gICAgICAgIHggKz0gdztcblxuICAgICAgICBpZiAoY29sdW1uV2lkdGhzKSB3ID0gY29sdW1uV2lkdGhzW2NpKytdO1xuICAgICAgICBSZW5kZXJUZXh0KGN0eCwgbW9kZWwuX3R5cGUudG9TdHJpbmcoKSwgeCwgdGhpcy5fY3VycmVudFksIHcsIGhlaWdodCwgSnVzdGlmaWNhdGlvbi5DZW50ZXIpO1xuICAgICAgICB4ICs9IHc7XG5cbiAgICAgICAgaWYgKGNvbHVtbldpZHRocykgdyA9IGNvbHVtbldpZHRoc1tjaSsrXTtcbiAgICAgICAgUmVuZGVyVGV4dChjdHgsIG1vZGVsLl9yb2xlLnRvU3RyaW5nKCksIHgsIHRoaXMuX2N1cnJlbnRZLCB3LCBoZWlnaHQsIEp1c3RpZmljYXRpb24uQ2VudGVyKTtcbiAgICAgICAgeCArPSB3O1xuXG4gICAgICAgIGlmIChjb2x1bW5XaWR0aHMpIHcgPSBjb2x1bW5XaWR0aHNbY2krK107XG4gICAgICAgIFJlbmRlclRleHQoY3R4LCBtb2RlbC5fcHVyc3VpdC50b1N0cmluZygpLCB4LCB0aGlzLl9jdXJyZW50WSwgdywgaGVpZ2h0LCBKdXN0aWZpY2F0aW9uLkNlbnRlcik7XG4gICAgICAgIHggKz0gdztcblxuICAgICAgICBpZiAoY29sdW1uV2lkdGhzKSB3ID0gY29sdW1uV2lkdGhzW2NpKytdO1xuICAgICAgICBSZW5kZXJUZXh0KGN0eCwgbW9kZWwuX2FnaWxpdHkudG9TdHJpbmcoKSwgeCwgdGhpcy5fY3VycmVudFksIHcsIGhlaWdodCwgSnVzdGlmaWNhdGlvbi5DZW50ZXIpO1xuICAgICAgICB4ICs9IHc7XG5cbiAgICAgICAgdGhpcy5fY3VycmVudFkgKz0gaGVpZ2h0O1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVuZGVyQWJpbGl0aWVzKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCB1bml0OiBVbml0MzBrKTogdm9pZCB7XG4gICAgICAgIGN0eC5mb250ID0gJzE0cHggc2Fucy1zZXJpZic7XG4gICAgICAgIFJlbmRlclRleHQoY3R4LCBcIkFCSUxJVElFU1wiLCB0aGlzLl9jdXJyZW50WCArIDIwLCB0aGlzLl9jdXJyZW50WSwgMTAwLCAxNiwgSnVzdGlmaWNhdGlvbi5MZWZ0KTtcblxuICAgICAgICBjdHguZm9udCA9ICcxMnB4IHNlcmlmJztcbiAgICAgICAgZm9yIChsZXQgYWIgb2YgdW5pdC5fYWJpbGl0aWVzKSB7XG4gICAgICAgICAgICBjb25zdCBjb250ZW50ID0gYWJbMF0udG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgIGNvbnN0IGRlc2MgPSBhYlsxXTtcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRZICs9IDI7XG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50WSA9IFJlbmRlclBhcmFncmFwaChjdHgsIGNvbnRlbnQgKyBcIjogXCIgKyBkZXNjLCB0aGlzLl9jdXJyZW50WCArIHRoaXMuX2Rlc2NyaXB0aW9uU3RhcnRYLCB0aGlzLl9jdXJyZW50WSwgdGhpcy5fZGVzY3JpcHRpb25XaWR0aCk7XG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50WSArPSAyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW5kZXJSdWxlcyhjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgdW5pdDogVW5pdDMwayk6IHZvaWQge1xuICAgICAgICBjdHguZm9udCA9ICcxNHB4IHNhbnMtc2VyaWYnO1xuICAgICAgICBSZW5kZXJUZXh0KGN0eCwgXCJSVUxFU1wiLCB0aGlzLl9jdXJyZW50WCArIDIwLCB0aGlzLl9jdXJyZW50WSwgMTAwLCAxNiwgSnVzdGlmaWNhdGlvbi5MZWZ0KTtcblxuICAgICAgICBjdHguZm9udCA9ICcxMnB4IHNlcmlmJztcbiAgICAgICAgZm9yIChsZXQgcnVsZSBvZiB1bml0Ll9ydWxlcykge1xuICAgICAgICAgICAgY29uc3QgY29udGVudCA9IHJ1bGVbMF0udG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgIGNvbnN0IGRlc2MgPSBydWxlWzFdO1xuICAgICAgICAgICAgdGhpcy5fY3VycmVudFkgKz0gMjtcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRZID0gUmVuZGVyUGFyYWdyYXBoKGN0eCwgY29udGVudCArIFwiOiBcIiArIGRlc2MsIHRoaXMuX2N1cnJlbnRYICsgdGhpcy5fZGVzY3JpcHRpb25TdGFydFgsIHRoaXMuX2N1cnJlbnRZLCB0aGlzLl9kZXNjcmlwdGlvbldpZHRoKTtcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRZICs9IDQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlcktleXdvcmRzKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCB1bml0OiBVbml0MzBrKTogdm9pZCB7XG4gICAgICAgIGN0eC5mb250ID0gJzE0cHggc2Fucy1zZXJpZic7XG4gICAgICAgIFJlbmRlclRleHQoY3R4LCBcIktFWVdPUkRTXCIsIHRoaXMuX2N1cnJlbnRYICsgMjAsIHRoaXMuX2N1cnJlbnRZLCAxMDAsIDE2LCBKdXN0aWZpY2F0aW9uLkxlZnQpO1xuXG4gICAgICAgIGN0eC5mb250ID0gJzEycHggc2VyaWYnO1xuICAgICAgICBjb25zdCBrd2xpc3QgPSBbLi4udW5pdC5fa2V5d29yZHNdO1xuICAgICAgICBjb25zdCBrdyA9IGt3bGlzdC5qb2luKFwiLCBcIikudG9Mb2NhbGVVcHBlckNhc2UoKTtcbiAgICAgICAgdGhpcy5fY3VycmVudFkgKz0gMjtcbiAgICAgICAgdGhpcy5fY3VycmVudFkgPSBSZW5kZXJQYXJhZ3JhcGgoY3R4LCBrdywgdGhpcy5fY3VycmVudFggKyB0aGlzLl9kZXNjcmlwdGlvblN0YXJ0WCwgdGhpcy5fY3VycmVudFksIHRoaXMuX2Rlc2NyaXB0aW9uV2lkdGgpO1xuICAgICAgICB0aGlzLl9jdXJyZW50WSArPSAyO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVuZGVyRmFjdGlvbnMoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIHVuaXQ6IFVuaXQzMGspOiB2b2lkIHtcbiAgICAgICAgY3R4LmZvbnQgPSAnMTRweCBzYW5zLXNlcmlmJztcbiAgICAgICAgUmVuZGVyVGV4dChjdHgsIFwiRkFDVElPTlNcIiwgdGhpcy5fY3VycmVudFggKyAyMCwgdGhpcy5fY3VycmVudFksIDEwMCwgMTYsIEp1c3RpZmljYXRpb24uTGVmdCk7XG5cbiAgICAgICAgY3R4LmZvbnQgPSAnMTJweCBzZXJpZic7XG4gICAgICAgIGNvbnN0IGt3bGlzdCA9IFsuLi51bml0Ll9mYWN0aW9uc107XG4gICAgICAgIGNvbnN0IGt3ID0ga3dsaXN0LmpvaW4oXCIsIFwiKS50b0xvY2FsZVVwcGVyQ2FzZSgpO1xuICAgICAgICB0aGlzLl9jdXJyZW50WSArPSAyO1xuICAgICAgICB0aGlzLl9jdXJyZW50WSA9IFJlbmRlclBhcmFncmFwaChjdHgsIGt3LCB0aGlzLl9jdXJyZW50WCArIHRoaXMuX2Rlc2NyaXB0aW9uU3RhcnRYLCB0aGlzLl9jdXJyZW50WSwgdGhpcy5fZGVzY3JpcHRpb25XaWR0aCk7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRZICs9IDI7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW5kZXJNb2RlbExpc3QoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIG1vZGVsczogTW9kZWwzMGtbXSkge1xuICAgICAgICBjdHguZm9udCA9ICcxNHB4IHNhbnMtc2VyaWYnO1xuICAgICAgICBSZW5kZXJUZXh0KGN0eCwgXCJNT0RFTFNcIiwgdGhpcy5fY3VycmVudFggKyAyMCwgdGhpcy5fY3VycmVudFksIDEwMCwgMTYsIEp1c3RpZmljYXRpb24uTGVmdCk7XG5cbiAgICAgICAgY3R4LmZvbnQgPSAnMTJweCBzZXJpZic7XG4gICAgICAgIGxldCBtb2RlbExpc3QgPSBcIlwiO1xuICAgICAgICBsZXQgbWkgPSAwO1xuICAgICAgICBmb3IgKGNvbnN0IG1vZGVsIG9mIG1vZGVscykge1xuICAgICAgICAgICAgaWYgKG1vZGVsLl9jb3VudCA+IDEpIHtcbiAgICAgICAgICAgICAgICBtb2RlbExpc3QgKz0gbW9kZWwuX2NvdW50ICsgXCIgXCIgKyBtb2RlbC5fbmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG1vZGVsTGlzdCArPSBtb2RlbC5fbmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1pKys7XG4gICAgICAgICAgICBpZiAobWkgIT0gbW9kZWxzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIG1vZGVsTGlzdCArPSBcIiwgIFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9jdXJyZW50WSArPSAyO1xuICAgICAgICB0aGlzLl9jdXJyZW50WSA9IFJlbmRlclBhcmFncmFwaChjdHgsIG1vZGVsTGlzdCwgdGhpcy5fY3VycmVudFggKyB0aGlzLl9kZXNjcmlwdGlvblN0YXJ0WCwgdGhpcy5fY3VycmVudFksIHRoaXMuX2Rlc2NyaXB0aW9uV2lkdGgpO1xuICAgICAgICB0aGlzLl9jdXJyZW50WSArPSAyO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVuZGVyV291bmRCb3hlcyhjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgbW9kZWxzOiBNb2RlbDMwa1tdKSB7XG5cbiAgICAgICAgY3R4LmZvbnQgPSAnMTRweCBzYW5zLXNlcmlmJztcbiAgICAgICAgUmVuZGVyVGV4dChjdHgsIFwiV09VTkRTXCIsIHRoaXMuX2N1cnJlbnRYICsgMjAsIHRoaXMuX2N1cnJlbnRZLCAxMDAsIDE2LCBKdXN0aWZpY2F0aW9uLkxlZnQpO1xuXG4gICAgICAgIGNvbnN0IHdvdW5kQm94U2l6ZSA9IDIwO1xuICAgICAgICBjb25zdCBib3hNYXJnaW4gPSA1O1xuICAgICAgICBjb25zdCB1bml0TmFtZVN0YXJ0WCA9IHRoaXMuX2N1cnJlbnRYICsgdGhpcy5fZGVzY3JpcHRpb25TdGFydFg7XG4gICAgICAgIGNvbnN0IHVuaXROYW1lV2lkdGggPSAyMDAgLSBib3hNYXJnaW47XG4gICAgICAgIGNvbnN0IGJveFN0YXJ0WCA9IHVuaXROYW1lU3RhcnRYICsgdW5pdE5hbWVXaWR0aDtcblxuICAgICAgICBjdHguc2F2ZSgpO1xuXG4gICAgICAgIGZvciAobGV0IG1vZGVsIG9mIG1vZGVscykge1xuICAgICAgICAgICAgaWYgKG1vZGVsLl93b3VuZHMgPiAxKSB7XG5cbiAgICAgICAgICAgICAgICBsZXQgY3VycmVudFkgPSB0aGlzLl9jdXJyZW50WTtcblxuICAgICAgICAgICAgICAgIGN0eC5mb250ID0gJzEycHggc2VyaWYnO1xuICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBSZW5kZXJlcjMway5fYmxhY2tDb2xvcjtcblxuICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRZID0gUmVuZGVyUGFyYWdyYXBoKGN0eCwgbW9kZWwuX25hbWUsIHVuaXROYW1lU3RhcnRYLCB0aGlzLl9jdXJyZW50WSArICh3b3VuZEJveFNpemUgLSAxNCkgLyAyLCB1bml0TmFtZVdpZHRoKTtcblxuICAgICAgICAgICAgICAgIGxldCB4ID0gdGhpcy5fY3VycmVudFggKyBib3hTdGFydFg7XG4gICAgICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gUmVuZGVyZXIzMGsuX2JsYWNrQ29sb3I7XG4gICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9ICcjZmZmZmZmJztcbiAgICAgICAgICAgICAgICBmb3IgKGxldCB3ID0gMDsgdyA8IG1vZGVsLl93b3VuZHM7IHcrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAodyAlIDE1ID09IDAgJiYgdyAhPSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50WSArPSB3b3VuZEJveFNpemUgKyBib3hNYXJnaW47XG4gICAgICAgICAgICAgICAgICAgICAgICB4ID0gdGhpcy5fY3VycmVudFggKyBib3hTdGFydFg7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY3R4LmZpbGxSZWN0KHgsIGN1cnJlbnRZLCB3b3VuZEJveFNpemUsIHdvdW5kQm94U2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5zdHJva2VSZWN0KHgsIGN1cnJlbnRZLCB3b3VuZEJveFNpemUsIHdvdW5kQm94U2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgIHggKz0gd291bmRCb3hTaXplICsgYm94TWFyZ2luO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjdXJyZW50WSArPSB3b3VuZEJveFNpemUgKyBib3hNYXJnaW47XG4gICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudFkgPSBNYXRoLm1heCh0aGlzLl9jdXJyZW50WSwgY3VycmVudFkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgX3VuaXRMYWJlbHMgPSBbXCJNT0RFTFwiLCBcIldTXCIsIFwiQlNcIiwgXCJTXCIsIFwiVFwiLCBcIldcIiwgXCJJXCIsIFwiQVwiLCBcIkxEXCIsIFwiU0FWRVwiXTtcbiAgICBwcml2YXRlIF91bml0TGFiZWxXaWR0aHNOb3JtYWxpemVkID0gWzAuMywgMC4wNzcsIDAuMDc3LCAwLjA3NywgMC4wNzcsIDAuMDc3LCAwLjA3NywgMC4wNzcsIDAuMDc3LCAwLjA3N107XG5cbiAgICBwcml2YXRlIHN0YXRpYyBfdmVoaWNsZUxhYmVscyA9IFtcIk1PREVMXCIsIFwiQlNcIiwgXCJGUk9OVFwiLCBcIlNJREVcIiwgXCJSRUFSXCIsIFwiSFBcIiwgXCJUWVBFXCJdO1xuICAgIHByaXZhdGUgX3ZlaGljbGVMYWJlbFdpZHRoc05vcm1hbGl6ZWQgPSBbMC4zLCAwLjEsIDAuMSwgMC4xLCAwLjEsIDAuMSwgMC4yXTtcblxuICAgIHByaXZhdGUgc3RhdGljIF93YWxrZXJMYWJlbHMgPSBbXCJNT0RFTFwiLCBcIldTXCIsIFwiQlNcIiwgXCJTXCIsIFwiRlJPTlRcIiwgXCJTSURFXCIsIFwiUkVBUlwiLCBcIklcIiwgXCJBXCIsIFwiSFBcIiwgXCJUWVBFXCJdO1xuICAgIHByaXZhdGUgX3dhbGtlckxhYmVsV2lkdGhzTm9ybWFsaXplZCA9IFswLjMsIDAuMDYsIDAuMDYsIDAuMDYsIDAuMDYsIDAuMDYsIDAuMDYsIDAuMDYsIDAuMDYsIDAuMDYsIDAuMTVdO1xuXG4gICAgcHJpdmF0ZSBzdGF0aWMgX2ZseWVyTGFiZWxzID0gW1wiTU9ERUxcIiwgXCJCU1wiLCBcIkZST05UXCIsIFwiU0lERVwiLCBcIlJFQVJcIiwgXCJIUFwiLCBcIlRZUEVcIiwgXCJST0xFXCIsIFwiUFVSU1VJVFwiLCBcIkFHSUxJVFlcIl07XG4gICAgcHJpdmF0ZSBfZmx5ZXJMYWJlbFdpZHRoc05vcm1hbGl6ZWQgPSBbMC4zLCAwLjA3NywgMC4wNzcsIDAuMDc3LCAwLjA3NywgMC4wNzcsIDAuMDc3LCAwLjA3NywgMC4wNzcsIDAuMDc3XTtcblxuICAgIHByaXZhdGUgc3RhdGljIF93ZWFwb25MYWJlbHMgPSBbXCJXRUFQT05TXCIsIFwiUkFOR0VcIiwgXCJTXCIsIFwiQVBcIiwgXCJUWVBFXCJdO1xuICAgIHByaXZhdGUgX3dlYXBvbkxhYmVsV2lkdGhOb3JtYWxpemVkID0gWzAuMywgMC4xLCAwLjEsIDAuMSwgMC40XTtcblxuICAgIHByaXZhdGUgc3RhdGljIF9zcGVsbExhYmVscyA9IFtcIlBTWUNISUMgUE9XRVJcIiwgXCJXQVJQIENIQVJHRVwiLCBcIlJBTkdFXCIsIFwiREVUQUlMU1wiXTtcbiAgICBwcml2YXRlIF9zcGVsbExhYmVsV2lkdGhOb3JtYWxpemVkID0gWzAuMywgMC4xLCAwLjEsIDAuNV07XG5cbiAgICBwcm90ZWN0ZWQgcmVuZGVyVW5pdCh1bml0OiBVbml0MzBrLCBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50LCB4T2Zmc2V0OiBudW1iZXIsIHlPZmZzZXQ6IG51bWJlcik6IG51bWJlcltdIHtcblxuICAgICAgICBsZXQgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICAgIGlmICghY3R4KSB7XG4gICAgICAgICAgICByZXR1cm4gWzAsIDBdO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fY3VycmVudFggPSB4T2Zmc2V0ICsgUmVuZGVyZXIzMGsuX21hcmdpbjtcbiAgICAgICAgdGhpcy5fY3VycmVudFkgPSB5T2Zmc2V0ICsgUmVuZGVyZXIzMGsuX21hcmdpbjtcbiAgICAgICAgdGhpcy5fbWF4V2lkdGggPSBjYW52YXMud2lkdGggLSB0aGlzLl9jdXJyZW50WDtcbiAgICAgICAgdGhpcy5fbWF4SGVpZ2h0ID0gTWF0aC5tYXgoMCwgY2FudmFzLmhlaWdodCAtIHRoaXMuX2N1cnJlbnRZKTtcblxuICAgICAgICB0aGlzLnJlbmRlckhlYWRlcih1bml0LCBjdHgpO1xuXG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBSZW5kZXJlcjMway5fYmxhY2tDb2xvcjtcblxuICAgICAgICBsZXQgd2VhcG9uczogV2VhcG9uMzBrW10gPSBbXTtcbiAgICAgICAgbGV0IHBvd2VyczogUHN5Y2hpY1Bvd2VyMzBrW10gPSBbXTtcbiAgICAgICAgbGV0IHBzeWtlcnM6IFBzeWtlcjMwa1tdID0gW107XG4gICAgICAgIGxldCBtb2RlbHM6IE1vZGVsMzBrW10gPSBbXTtcbiAgICAgICAgY29uc3QgdW5pdExhYmVsV2lkdGhzOiBudW1iZXJbXSA9IFtdO1xuICAgICAgICB0aGlzLl91bml0TGFiZWxXaWR0aHNOb3JtYWxpemVkLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICB1bml0TGFiZWxXaWR0aHMucHVzaChlbGVtZW50ICogdGhpcy5fbWF4V2lkdGgpO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgdmVoaWNsZUxhYmVsV2lkdGhzOiBudW1iZXJbXSA9IFtdO1xuICAgICAgICB0aGlzLl92ZWhpY2xlTGFiZWxXaWR0aHNOb3JtYWxpemVkLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICB2ZWhpY2xlTGFiZWxXaWR0aHMucHVzaChlbGVtZW50ICogdGhpcy5fbWF4V2lkdGgpO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3Qgd2Fsa2VyTGFiZWxXaWR0aHM6IG51bWJlcltdID0gW107XG4gICAgICAgIHRoaXMuX3dhbGtlckxhYmVsV2lkdGhzTm9ybWFsaXplZC5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgICAgICAgd2Fsa2VyTGFiZWxXaWR0aHMucHVzaChlbGVtZW50ICogdGhpcy5fbWF4V2lkdGgpO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgZmx5ZXJMYWJlbFdpZHRoczogbnVtYmVyW10gPSBbXTtcbiAgICAgICAgdGhpcy5fZmx5ZXJMYWJlbFdpZHRoc05vcm1hbGl6ZWQuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgICAgICAgIGZseWVyTGFiZWxXaWR0aHMucHVzaChlbGVtZW50ICogdGhpcy5fbWF4V2lkdGgpO1xuICAgICAgICB9KTtcblxuICAgICAgICBmb3IgKHZhciBtb2RlbCBvZiB1bml0Ll9tb2RlbHMpIHtcbiAgICAgICAgICAgIG1vZGVscy5wdXNoKG1vZGVsKTtcbiAgICAgICAgICAgIGZvciAobGV0IHdlYXBvbiBvZiBtb2RlbC5fd2VhcG9ucykge1xuICAgICAgICAgICAgICAgIHdlYXBvbnMucHVzaCh3ZWFwb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChsZXQgcG93ZXIgb2YgbW9kZWwuX3BzeWNoaWNQb3dlcnMpIHtcbiAgICAgICAgICAgICAgICBwb3dlcnMucHVzaChwb3dlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobW9kZWwuX3BzeWtlcikge1xuICAgICAgICAgICAgICAgIHBzeWtlcnMucHVzaChtb2RlbC5fcHN5a2VyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVuaXF1ZSBsaXN0IG9mIG1vZGVsc1xuICAgICAgICBjb25zdCB1bmlxdWVNb2RlbHM6IE1vZGVsMzBrW10gPSBbXTtcbiAgICAgICAgY29uc3Qgc2NyYXRoTW9kZWxzOiBNYXA8c3RyaW5nLCBNb2RlbDMwaz4gPSBuZXcgTWFwKCk7XG4gICAgICAgIGZvciAoY29uc3QgbSBvZiBtb2RlbHMpIHtcbiAgICAgICAgICAgIGlmICghc2NyYXRoTW9kZWxzLmhhcyhtLl9uYW1lKSkge1xuICAgICAgICAgICAgICAgIHNjcmF0aE1vZGVscy5zZXQobS5fbmFtZSwgbSk7XG4gICAgICAgICAgICAgICAgdW5pcXVlTW9kZWxzLnB1c2gobSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodW5pcXVlTW9kZWxzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyVGFibGVIZWFkZXIoY3R4LCBSZW5kZXJlcjMway5fdW5pdExhYmVscywgdW5pdExhYmVsV2lkdGhzKTtcbiAgICAgICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgICAgIGZvciAodmFyIG1vZGVsIG9mIHVuaXF1ZU1vZGVscykge1xuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyTW9kZWwoY3R4LCBtb2RlbCwgdW5pdExhYmVsV2lkdGhzLCBpICUgMik7XG4gICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVuaXQuX3ZlaGljbGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyVGFibGVIZWFkZXIoY3R4LCBSZW5kZXJlcjMway5fdmVoaWNsZUxhYmVscywgdmVoaWNsZUxhYmVsV2lkdGhzKTtcbiAgICAgICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgICAgIGZvciAodmFyIHZlaGljbGUgb2YgdW5pdC5fdmVoaWNsZXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlclZlaGljbGUoY3R4LCB2ZWhpY2xlLCB2ZWhpY2xlTGFiZWxXaWR0aHMsIGkgJSAyKTtcbiAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHVuaXQuX3dhbGtlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJUYWJsZUhlYWRlcihjdHgsIFJlbmRlcmVyMzBrLl93YWxrZXJMYWJlbHMsIHdhbGtlckxhYmVsV2lkdGhzKTtcbiAgICAgICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgICAgIGZvciAodmFyIHdhbGtlciBvZiB1bml0Ll93YWxrZXJzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJXYWxrZXIoY3R4LCB3YWxrZXIsIHdhbGtlckxhYmVsV2lkdGhzLCBpICUgMik7XG4gICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh1bml0Ll9mbHllcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJUYWJsZUhlYWRlcihjdHgsIFJlbmRlcmVyMzBrLl9mbHllckxhYmVscywgZmx5ZXJMYWJlbFdpZHRocyk7XG4gICAgICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgICAgICBmb3IgKHZhciBmbHllciBvZiB1bml0Ll9mbHllcnMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlckZseWVyKGN0eCwgZmx5ZXIsIGZseWVyTGFiZWxXaWR0aHMsIGkgJSAyKTtcbiAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVbmlxdWUgbGlzdCBvZiB3ZWFwb25zXG4gICAgICAgIGNvbnN0IHVuaXF1ZVdlYXBvbnM6IFdlYXBvbjMwa1tdID0gW107XG4gICAgICAgIGNvbnN0IHNjcmF0Y2hNYXA6IE1hcDxzdHJpbmcsIFdlYXBvbjMwaz4gPSBuZXcgTWFwKCk7XG4gICAgICAgIGZvciAoY29uc3QgdyBvZiB3ZWFwb25zKSB7XG4gICAgICAgICAgICBpZiAoIXNjcmF0Y2hNYXAuaGFzKHcuX25hbWUpKSB7XG4gICAgICAgICAgICAgICAgc2NyYXRjaE1hcC5zZXQody5fbmFtZSwgdyk7XG4gICAgICAgICAgICAgICAgdW5pcXVlV2VhcG9ucy5wdXNoKHcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVuaXF1ZVdlYXBvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3Qgd2VhcG9uTGFiZWxXaWR0aHM6IG51bWJlcltdID0gW107XG4gICAgICAgICAgICB0aGlzLl93ZWFwb25MYWJlbFdpZHRoTm9ybWFsaXplZC5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgICAgICAgICAgIHdlYXBvbkxhYmVsV2lkdGhzLnB1c2goZWxlbWVudCAqIHRoaXMuX21heFdpZHRoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJMaW5lKGN0eCk7XG4gICAgICAgICAgICB0aGlzLnJlbmRlclRhYmxlSGVhZGVyKGN0eCwgUmVuZGVyZXIzMGsuX3dlYXBvbkxhYmVscywgd2VhcG9uTGFiZWxXaWR0aHMpO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJXZWFwb25zKGN0eCwgdW5pcXVlV2VhcG9ucywgd2VhcG9uTGFiZWxXaWR0aHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBvd2Vycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBzcGVsbExhYmVsV2lkdGhzOiBudW1iZXJbXSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fc3BlbGxMYWJlbFdpZHRoTm9ybWFsaXplZC5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgICAgICAgICAgIHNwZWxsTGFiZWxXaWR0aHMucHVzaChlbGVtZW50ICogdGhpcy5fbWF4V2lkdGgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckxpbmUoY3R4KTtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyVGFibGVIZWFkZXIoY3R4LCBSZW5kZXJlcjMway5fc3BlbGxMYWJlbHMsIHNwZWxsTGFiZWxXaWR0aHMpO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJQb3dlcnMoY3R4LCBwb3dlcnMsIHNwZWxsTGFiZWxXaWR0aHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVuaXQuX2FiaWxpdGllcy5zaXplID4gMCkge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJMaW5lKGN0eCk7XG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50WSArPSAyO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJBYmlsaXRpZXMoY3R4LCB1bml0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwc3lrZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyTGluZShjdHgpO1xuICAgICAgICAgICAgdGhpcy5fY3VycmVudFkgKz0gMjtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyUHN5a2VycyhjdHgsIHBzeWtlcnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVuaXQuX3J1bGVzLnNpemUgPiAwKSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckxpbmUoY3R4KTtcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRZICs9IDI7XG4gICAgICAgICAgICB0aGlzLnJlbmRlclJ1bGVzKGN0eCwgdW5pdCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodW5pdC5fZmFjdGlvbnMuc2l6ZSA+IDApIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyTGluZShjdHgpO1xuICAgICAgICAgICAgdGhpcy5fY3VycmVudFkgKz0gMjtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyRmFjdGlvbnMoY3R4LCB1bml0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1bml0Ll9rZXl3b3Jkcy5zaXplID4gMCkge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJMaW5lKGN0eCk7XG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50WSArPSAyO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJLZXl3b3JkcyhjdHgsIHVuaXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVuaXQuX21vZGVscy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckxpbmUoY3R4KTtcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRZICs9IDI7XG4gICAgICAgICAgICB0aGlzLnJlbmRlck1vZGVsTGlzdChjdHgsIHVuaXF1ZU1vZGVscyk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGlmICh0aGlzLl9zaG93V291bmRCb3hlcykge1xuICAgICAgICAgICAgLy8gd291bmQgdHJhY2tlciBib3hlc1xuICAgICAgICAgICAgbGV0IGhhc1RyYWNrcyA9IGZhbHNlO1xuICAgICAgICAgICAgZm9yIChsZXQgbW9kZWwgb2YgdW5pdC5fbW9kZWxzKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1vZGVsLl93b3VuZHMgPiAyKSB7IGhhc1RyYWNrcyA9IHRydWU7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChoYXNUcmFja3MpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlckxpbmUoY3R4KTtcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50WSArPSA1O1xuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyV291bmRCb3hlcyhjdHgsIHVuaXQuX21vZGVscyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY3VycmVudFkgKz0gMjtcblxuICAgICAgICBjb25zdCB0b3RhbEhlaWdodCA9IHRoaXMuX2N1cnJlbnRZIC0gKHlPZmZzZXQgKyBSZW5kZXJlcjMway5fbWFyZ2luKTtcbiAgICAgICAgY29uc3QgdG90YWxXaWR0aCA9IHRoaXMuX21heFdpZHRoO1xuXG4gICAgICAgIHRoaXMucmVuZGVyQm9yZGVyKGN0eCwgdGhpcy5fY3VycmVudFgsIHlPZmZzZXQgKyBSZW5kZXJlcjMway5fbWFyZ2luLCB0b3RhbFdpZHRoLCB0b3RhbEhlaWdodCk7XG4gICAgICAgIHRoaXMucmVuZGVyV2F0ZXJtYXJrKGN0eCk7XG5cbiAgICAgICAgcmV0dXJuIFt0aGlzLl9tYXhXaWR0aCwgdGhpcy5fY3VycmVudFldO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVuZGVySGVhZGVyKHVuaXQ6IFVuaXQzMGssIGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKTogdm9pZCB7XG5cbiAgICAgICAgY3R4Lmdsb2JhbEFscGhhID0gMTtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IFJlbmRlcmVyMzBrLl9ibGFja0NvbG9yO1xuXG4gICAgICAgIGNvbnN0IHhTdGFydCA9IHRoaXMuX2N1cnJlbnRYO1xuICAgICAgICBjb25zdCB4RW5kID0gdGhpcy5fY3VycmVudFggKyB0aGlzLl9tYXhXaWR0aDtcbiAgICAgICAgY29uc3QgeVN0YXJ0ID0gdGhpcy5fY3VycmVudFk7XG4gICAgICAgIGNvbnN0IHRpdGxlSGVpZ2h0ID0gMzY7XG4gICAgICAgIGNvbnN0IHlFbmQgPSB5U3RhcnQgKyB0aXRsZUhlaWdodDtcblxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5tb3ZlVG8oeFN0YXJ0LCB5U3RhcnQgKyBSZW5kZXJlcjMway5fYmV2ZWxTaXplKTtcbiAgICAgICAgY3R4LmxpbmVUbyh4U3RhcnQsIHlFbmQpO1xuICAgICAgICBjdHgubGluZVRvKHhFbmQsIHlFbmQpO1xuICAgICAgICBjdHgubGluZVRvKHhFbmQsIHlTdGFydCArIFJlbmRlcmVyMzBrLl9iZXZlbFNpemUpO1xuICAgICAgICBjdHgubGluZVRvKHhFbmQgLSBSZW5kZXJlcjMway5fYmV2ZWxTaXplLCB5U3RhcnQpO1xuICAgICAgICBjdHgubGluZVRvKHhTdGFydCArIFJlbmRlcmVyMzBrLl9iZXZlbFNpemUsIHlTdGFydCk7XG4gICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgY3R4LmZpbGwoKTtcblxuICAgICAgICBsZXQgaW1nWCA9IHhTdGFydCArIDY7XG5cbiAgICAgICAgaWYgKHRoaXMuX29jdGFnb24pIHtcblxuICAgICAgICAgICAgLy8gVW5pdCBiYXR0bGVmaWVsZCByb2xlIGljb25cbiAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UodGhpcy5fb2N0YWdvbiwgaW1nWCwgeVN0YXJ0ICsgMiwgMzIsIDMyKTtcbiAgICAgICAgICAgIGNvbnN0IHJvbGVJbWcgPSB0aGlzLl9yb2xlcy5nZXQodW5pdC5fcm9sZSk7XG4gICAgICAgICAgICBpZiAocm9sZUltZykge1xuICAgICAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2Uocm9sZUltZywgaW1nWCArIDQsIHlTdGFydCArIDIgKyA0LCAyNCwgMjQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gJ3doaXRlJztcbiAgICAgICAgICAgIGN0eC5mb250ID0gXCIxOHB4IHNlcmlmXCI7XG5cbiAgICAgICAgICAgIC8vIFBvaW50cyBpY29uXG4gICAgICAgICAgICBpbWdYICs9IDM0O1xuICAgICAgICAgICAgY3R4LmRyYXdJbWFnZSh0aGlzLl9vY3RhZ29uLCBpbWdYLCB5U3RhcnQgKyAyLCAzMiwgMzIpO1xuICAgICAgICAgICAgUmVuZGVyVGV4dChjdHgsIHVuaXQuX3BvaW50cy50b1N0cmluZygpLCBpbWdYLCB5U3RhcnQgKyAyLCAzMiwgMzIsIEp1c3RpZmljYXRpb24uQ2VudGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHVuaXQgbmFtZVxuICAgICAgICBsZXQgaXRlcnM6IG51bWJlciA9IDA7XG4gICAgICAgIGxldCB0aXRsZV9zaXplID0gMjg7XG4gICAgICAgIGNvbnN0IHRpdGxlX3ggPSBpbWdYICsgNjtcbiAgICAgICAgY3R4LmZvbnQgPSB0aXRsZV9zaXplICsgJ3B4ICcgKyAnYm9sZCBzZXJpZic7XG4gICAgICAgIGNvbnN0IHVuaXROYW1lID0gdW5pdC5fbmFtZS50b0xvY2FsZVVwcGVyQ2FzZSgpO1xuICAgICAgICBsZXQgY2hlY2sgPSBjdHgubWVhc3VyZVRleHQodW5pdE5hbWUpO1xuICAgICAgICBjb25zdCBtYXhXaWR0aCA9IHRoaXMuX21heFdpZHRoIC0gdGl0bGVfeDtcbiAgICAgICAgd2hpbGUgKGl0ZXJzIDwgNiAmJiBjaGVjay53aWR0aCA+IG1heFdpZHRoKSB7XG4gICAgICAgICAgICBpdGVycyArPSAxO1xuICAgICAgICAgICAgdGl0bGVfc2l6ZSAtPSAyO1xuICAgICAgICAgICAgY3R4LmZvbnQgPSB0aXRsZV9zaXplICsgJ3B4ICcgKyAnYm9sZCBzZXJpZic7XG4gICAgICAgICAgICBjaGVjayA9IGN0eC5tZWFzdXJlVGV4dCh1bml0TmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9ICd3aGl0ZSc7XG4gICAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAndG9wJzsgLy8gTWFrZSB0aGUgdGV4dCBvcmlnaW4gYXQgdGhlIHVwcGVyLWxlZnQgdG8gbWFrZSBwb3NpdGlvbmluZyBlYXNpZXJcbiAgICAgICAgUmVuZGVyVGV4dChjdHgsIHVuaXROYW1lLCB0aXRsZV94LCB5U3RhcnQsIG1heFdpZHRoLCB0aXRsZUhlaWdodCwgSnVzdGlmaWNhdGlvbi5DZW50ZXIpO1xuXG4gICAgICAgIHRoaXMuX2N1cnJlbnRZICs9IHRpdGxlSGVpZ2h0O1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVuZGVyUHN5a2VycyhjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgcHN5a2VyczogUHN5a2VyMzBrW10pOiB2b2lkIHtcbiAgICAgICAgY3R4LmZvbnQgPSAnMTRweCBzYW5zLXNlcmlmJztcbiAgICAgICAgUmVuZGVyVGV4dChjdHgsIFwiUFNZS0VSU1wiLCB0aGlzLl9jdXJyZW50WCArIDIwLCB0aGlzLl9jdXJyZW50WSwgMTAwLCAxNiwgSnVzdGlmaWNhdGlvbi5MZWZ0KTtcblxuICAgICAgICBjdHguZm9udCA9ICcxMnB4IHNlcmlmJztcbiAgICAgICAgdGhpcy5fY3VycmVudFkgKz0gMjtcbiAgICAgICAgZm9yIChsZXQgcHN5a2VyIG9mIHBzeWtlcnMpIHtcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRZID0gUmVuZGVyUGFyYWdyYXBoKGN0eCwgXCJNQVNURVJZIExFVkVMOiBcIiArIHBzeWtlci5fbWFzdGVyeUxldmVsLCB0aGlzLl9jdXJyZW50WCArIHRoaXMuX2Rlc2NyaXB0aW9uU3RhcnRYLCB0aGlzLl9jdXJyZW50WSwgdGhpcy5fZGVzY3JpcHRpb25XaWR0aCk7XG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50WSArPSAyO1xuXG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50WSA9IFJlbmRlclBhcmFncmFwaChjdHgsIFwiRElTQ0lQTElORVM6IFwiICsgcHN5a2VyLl9kaXNjaXBsaW5lcywgdGhpcy5fY3VycmVudFggKyB0aGlzLl9kZXNjcmlwdGlvblN0YXJ0WCwgdGhpcy5fY3VycmVudFksIHRoaXMuX2Rlc2NyaXB0aW9uV2lkdGgpO1xuICAgICAgICAgICAgdGhpcy5fY3VycmVudFkgKz0gMjtcbiAgICAgICAgfVxuICAgIH1cbn07XG4iLCIvKlxuICAgIENvcHlyaWdodCAyMDIwIFJpY2sgV2V5cmF1Y2gsXG5cbiAgICBQZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSBcbiAgICB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLCBwcm92aWRlZCB0aGF0IHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlXG4gICAgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2UgYXBwZWFyIGluIGFsbCBjb3BpZXMuXG5cbiAgICBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIIFxuICAgIFJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgXG4gICAgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsIFxuICAgIElORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTSBMT1NTIFxuICAgIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUiBPVEhFUiBcbiAgICBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SIFBFUkZPUk1BTkNFIFxuICAgIE9GIFRISVMgU09GVFdBUkUuXG4qL1xuXG5pbXBvcnQgeyBVbml0LCBVbml0Um9sZSwgVW5pdFJvbGVUb1N0cmluZywgTW9kZWwsIFBzeWNoaWNQb3dlciwgRXhwbG9zaW9uLCBXZWFwb24sIFJvc3RlcjQwaywgUHN5a2VyIH0gZnJvbSBcIi4vcm9zdGVyNDBrXCI7XG5pbXBvcnQgeyBSZW5kZXJlciwgSnVzdGlmaWNhdGlvbiwgUmVuZGVyVGV4dCwgUmVuZGVyUGFyYWdyYXBoIH0gZnJvbSBcIi4vcmVuZGVyZXJcIjtcblxuZXhwb3J0IGNsYXNzIFJlbmRlcmVyNDBrIGltcGxlbWVudHMgUmVuZGVyZXIge1xuXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBfcmVzOiBudW1iZXIgPSAxNDQ7XG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBfbWFyZ2luOiBudW1iZXIgPSAwO1xuXG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgX2JldmVsU2l6ZSA9IDE1O1xuICAgIHByaXZhdGUgcmVhZG9ubHkgX2Rlc2NyaXB0aW9uU3RhcnRYID0gMTkwO1xuICAgIHByaXZhdGUgX2Rlc2NyaXB0aW9uV2lkdGg6IG51bWJlciA9IDYwMDtcblxuICAgIHByaXZhdGUgX3Nob3dXb3VuZEJveGVzOiBib29sZWFuID0gdHJ1ZTtcblxuICAgIHByaXZhdGUgX3Jvc3RlcjogUm9zdGVyNDBrIHwgbnVsbCA9IG51bGw7XG5cbiAgICBwcml2YXRlIF9jdXJyZW50WDogbnVtYmVyID0gMDtcbiAgICBwcml2YXRlIF9jdXJyZW50WTogbnVtYmVyID0gMDtcbiAgICBwcml2YXRlIF9tYXhXaWR0aDogbnVtYmVyID0gMDtcbiAgICBwcml2YXRlIF9tYXhIZWlnaHQ6IG51bWJlciA9IDA7XG5cbiAgICBwcml2YXRlIF9vY3RhZ29uOiBIVE1MSW1hZ2VFbGVtZW50IHwgbnVsbCA9IG51bGw7XG5cbiAgICBwcml2YXRlIF9yb2xlczogTWFwPFVuaXRSb2xlLCBIVE1MSW1hZ2VFbGVtZW50IHwgbnVsbD4gPSBuZXcgTWFwKCk7XG5cbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBfYmxhY2tDb2xvciA9ICcjMWQyNzJhJztcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBfZ3JleTEgPSAnI2IzYmJiNSc7XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgX2dyZXlMaWdodCA9ICcjZGRlMWRmJztcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBfZmlsbENvbG9yID0gJyNmNmY2ZjYnO1xuXG4gICAgY29uc3RydWN0b3Iocm9zdGVyOiBSb3N0ZXI0MGspIHtcblxuICAgICAgICB0aGlzLl9yb3N0ZXIgPSByb3N0ZXI7XG4gICAgICAgIHRoaXMuX29jdGFnb24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb2N0YWdvbicpIGFzIEhUTUxJbWFnZUVsZW1lbnQ7XG5cbiAgICAgICAgdGhpcy5fcm9sZXMuc2V0KFVuaXRSb2xlLkhRLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9sZV9ocScpIGFzIEhUTUxJbWFnZUVsZW1lbnQpO1xuICAgICAgICB0aGlzLl9yb2xlcy5zZXQoVW5pdFJvbGUuVFIsIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb2xlX3RyJykgYXMgSFRNTEltYWdlRWxlbWVudCk7XG4gICAgICAgIHRoaXMuX3JvbGVzLnNldChVbml0Um9sZS5FTCwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JvbGVfZWwnKSBhcyBIVE1MSW1hZ2VFbGVtZW50KTtcbiAgICAgICAgdGhpcy5fcm9sZXMuc2V0KFVuaXRSb2xlLkZBLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9sZV9mYScpIGFzIEhUTUxJbWFnZUVsZW1lbnQpO1xuICAgICAgICB0aGlzLl9yb2xlcy5zZXQoVW5pdFJvbGUuSFMsIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb2xlX2hzJykgYXMgSFRNTEltYWdlRWxlbWVudCk7XG4gICAgICAgIHRoaXMuX3JvbGVzLnNldChVbml0Um9sZS5GTCwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JvbGVfZmwnKSBhcyBIVE1MSW1hZ2VFbGVtZW50KTtcbiAgICAgICAgdGhpcy5fcm9sZXMuc2V0KFVuaXRSb2xlLkRULCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9sZV9kdCcpIGFzIEhUTUxJbWFnZUVsZW1lbnQpO1xuICAgICAgICB0aGlzLl9yb2xlcy5zZXQoVW5pdFJvbGUuRlQsIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb2xlX2Z0JykgYXMgSFRNTEltYWdlRWxlbWVudCk7XG4gICAgICAgIHRoaXMuX3JvbGVzLnNldChVbml0Um9sZS5MVywgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JvbGVfbHcnKSBhcyBIVE1MSW1hZ2VFbGVtZW50KTtcbiAgICB9XG5cbiAgICByZW5kZXIodGl0bGU6IEhUTUxFbGVtZW50IHwgbnVsbCwgbGlzdDogSFRNTEVsZW1lbnQgfCBudWxsLCBmb3JjZXM6IEhUTUxFbGVtZW50IHwgbnVsbCk6IHZvaWQge1xuXG4gICAgICAgIGlmICh0aGlzLl9yb3N0ZXIgPT0gbnVsbCkgcmV0dXJuO1xuXG4gICAgICAgIGlmICh0aXRsZSkge1xuICAgICAgICAgICAgdGl0bGUuaW5uZXJIVE1MID0gJzxoMz4nICsgdGhpcy5fcm9zdGVyLl9uYW1lICsgJyAoJyArIHRoaXMuX3Jvc3Rlci5fcG9pbnRzICsgJyBwdHMsICcgKyB0aGlzLl9yb3N0ZXIuX3Bvd2VyTGV2ZWwgKyAnIFBMLCAnICsgdGhpcy5fcm9zdGVyLl9jb21tYW5kUG9pbnRzICsgJyBDUCk8L2gzPic7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBmb3JjZSBvZiB0aGlzLl9yb3N0ZXIuX2ZvcmNlcykge1xuICAgICAgICAgICAgY29uc3QgZm9yY2VUaXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgaWYgKGZvcmNlVGl0bGUpIHtcbiAgICAgICAgICAgICAgICBmb3JjZVRpdGxlLmlubmVySFRNTCA9ICc8cD4nICsgZm9yY2UuX2NhdGFsb2cgKyAnICcgKyBmb3JjZS5fbmFtZSArICc8L3A+JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChsaXN0KVxuICAgICAgICAgICAgICAgIGxpc3QuYXBwZW5kQ2hpbGQoZm9yY2VUaXRsZSk7XG5cbiAgICAgICAgICAgIGNvbnN0IHRhYmxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGFibGUnKTtcbiAgICAgICAgICAgIHRhYmxlLmNsYXNzTGlzdC5hZGQoJ3RhYmxlJyk7XG4gICAgICAgICAgICB0YWJsZS5jbGFzc0xpc3QuYWRkKCd0YWJsZS1zbScpO1xuICAgICAgICAgICAgdGFibGUuY2xhc3NMaXN0LmFkZCgndGFibGUtc3RyaXBlZCcpO1xuICAgICAgICAgICAgY29uc3QgdGhlYWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0aGVhZCcpO1xuICAgICAgICAgICAgdGFibGUuYXBwZW5kQ2hpbGQodGhlYWQpO1xuICAgICAgICAgICAgdGhlYWQuY2xhc3NMaXN0LmFkZCgndGhlYWQtbGlnaHQnKTtcbiAgICAgICAgICAgIGNvbnN0IHRyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndHInKTtcbiAgICAgICAgICAgIHRoZWFkLmFwcGVuZENoaWxkKHRyKTtcbiAgICAgICAgICAgIGNvbnN0IGhlYWRlckluZm8gPSBbeyBuYW1lOiBcIk5BTUVcIiwgdzogJzI1JScgfSwgeyBuYW1lOiBcIlJPTEVcIiwgdzogJzIwJScgfSwgeyBuYW1lOiBcIk1PREVMU1wiLCB3OiAnMjUlJyB9LCB7IG5hbWU6IFwiUE9JTlRTXCIsIHc6ICcxNSUnIH0sIHsgbmFtZTogXCJQT1dFUlwiLCB3OiAnMTUlJyB9XTtcbiAgICAgICAgICAgIGhlYWRlckluZm8uZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgdGggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0aCcpO1xuICAgICAgICAgICAgICAgIHRoLnNjb3BlID0gXCJjb2xcIjtcbiAgICAgICAgICAgICAgICB0aC5pbm5lckhUTUwgPSBlbGVtZW50Lm5hbWU7XG4gICAgICAgICAgICAgICAgdGguc3R5bGUud2lkdGggPSBlbGVtZW50Lnc7XG4gICAgICAgICAgICAgICAgdHIuYXBwZW5kQ2hpbGQodGgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBmb3JjZVRpdGxlLmFwcGVuZENoaWxkKHRhYmxlKTtcblxuICAgICAgICAgICAgbGV0IGJvZHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0Ym9keScpO1xuICAgICAgICAgICAgdGFibGUuYXBwZW5kQ2hpbGQoYm9keSk7XG4gICAgICAgICAgICBmb3IgKGxldCB1bml0IG9mIGZvcmNlLl91bml0cykge1xuICAgICAgICAgICAgICAgIGxldCB0ciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyk7XG4gICAgICAgICAgICAgICAgbGV0IHVuYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcbiAgICAgICAgICAgICAgICB1bmFtZS5pbm5lckhUTUwgPSB1bml0Ll9uYW1lO1xuICAgICAgICAgICAgICAgIGxldCByb2xlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcbiAgICAgICAgICAgICAgICByb2xlLmlubmVySFRNTCA9IFVuaXRSb2xlVG9TdHJpbmdbdW5pdC5fcm9sZV07XG4gICAgICAgICAgICAgICAgbGV0IG1vZGVscyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG4gICAgICAgICAgICAgICAgbW9kZWxzLmlubmVySFRNTCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgbGV0IG1pID0gMDtcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiB0aGUgbGlzdCBvZiBtb2RlbHMgbWF5IG5vdCBiZSB1bmlxdWUsIG1ha2UgdGhlIGxpc3QgdW5pcXVlIGFuZCB1cGRhdGUgY291bnRzIGFjY29yZGluZ2x5LlxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbW9kZWwgb2YgdW5pdC5fbW9kZWxzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtb2RlbC5fY291bnQgPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbHMuaW5uZXJIVE1MICs9IG1vZGVsLl9jb3VudCArIFwiIFwiICsgbW9kZWwuX25hbWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbHMuaW5uZXJIVE1MICs9IG1vZGVsLl9uYW1lO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1pKys7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtaSAhPSB1bml0Ll9tb2RlbHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbHMuaW5uZXJIVE1MICs9IFwiLCAgXCJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgcHRzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcbiAgICAgICAgICAgICAgICBwdHMuaW5uZXJIVE1MID0gdW5pdC5fcG9pbnRzLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgbGV0IHB3ciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG4gICAgICAgICAgICAgICAgcHdyLmlubmVySFRNTCA9IHVuaXQuX3Bvd2VyTGV2ZWwudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICB0ci5hcHBlbmRDaGlsZCh1bmFtZSk7XG4gICAgICAgICAgICAgICAgdHIuYXBwZW5kQ2hpbGQocm9sZSk7XG4gICAgICAgICAgICAgICAgdHIuYXBwZW5kQ2hpbGQobW9kZWxzKTtcbiAgICAgICAgICAgICAgICB0ci5hcHBlbmRDaGlsZChwdHMpO1xuICAgICAgICAgICAgICAgIHRyLmFwcGVuZENoaWxkKHB3cik7XG4gICAgICAgICAgICAgICAgYm9keS5hcHBlbmRDaGlsZCh0cik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChmb3JjZS5fcnVsZXMuc2l6ZSA+IDApIHtcbiAgICAgICAgICAgICAgICBsZXQgYWxsZWdpYW5jZVJ1bGVzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgbGV0IHJ1bGVzSGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDMnKTtcbiAgICAgICAgICAgICAgICBhbGxlZ2lhbmNlUnVsZXMuYXBwZW5kQ2hpbGQocnVsZXNIZWFkZXIpO1xuICAgICAgICAgICAgICAgIHJ1bGVzSGVhZGVyLnRleHRDb250ZW50ID0gZm9yY2UuX2NhdGFsb2cgKyBcIiBBbGxlZ2lhbmNlIFJ1bGVzXCI7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgcnVsZSBvZiBmb3JjZS5fcnVsZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgbmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2g0Jyk7XG4gICAgICAgICAgICAgICAgICAgIG5hbWUudGV4dENvbnRlbnQgPSBydWxlWzBdO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZGVzYyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICAgICAgICAgICAgICAgICAgZGVzYy50ZXh0Q29udGVudCA9IHJ1bGVbMV07XG4gICAgICAgICAgICAgICAgICAgIHJvdy5hcHBlbmRDaGlsZChuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgcm93LmFwcGVuZENoaWxkKGRlc2MpO1xuICAgICAgICAgICAgICAgICAgICBhbGxlZ2lhbmNlUnVsZXMuYXBwZW5kQ2hpbGQocm93KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoZm9yY2VzKVxuICAgICAgICAgICAgICAgICAgICBmb3JjZXMuYXBwZW5kQ2hpbGQoYWxsZWdpYW5jZVJ1bGVzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yIChsZXQgdW5pdCBvZiBmb3JjZS5fdW5pdHMpIHtcbiAgICAgICAgICAgICAgICBsZXQgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJykgYXMgSFRNTENhbnZhc0VsZW1lbnQ7XG4gICAgICAgICAgICAgICAgY2FudmFzLndpZHRoID0gUmVuZGVyZXI0MGsuX3JlcyAqIDUuNTtcbiAgICAgICAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gUmVuZGVyZXI0MGsuX3JlcyAqIDEyO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Rlc2NyaXB0aW9uV2lkdGggPSBjYW52YXMud2lkdGggLSB0aGlzLl9kZXNjcmlwdGlvblN0YXJ0WCAtIDEwO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgZGltcyA9IHRoaXMucmVuZGVyVW5pdCh1bml0LCBjYW52YXMsIDAsIDApO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgYm9yZGVyID0gMjU7XG4gICAgICAgICAgICAgICAgbGV0IGZpbmFsQ2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJykgYXMgSFRNTENhbnZhc0VsZW1lbnQ7XG4gICAgICAgICAgICAgICAgZmluYWxDYW52YXMud2lkdGggPSBkaW1zWzBdICsgYm9yZGVyICogMjtcbiAgICAgICAgICAgICAgICBmaW5hbENhbnZhcy5oZWlnaHQgPSBkaW1zWzFdICsgYm9yZGVyICogMjtcbiAgICAgICAgICAgICAgICBsZXQgZmluYWxDdHggPSBmaW5hbENhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgICAgICAgICAgIGZpbmFsQ3R4Py5kcmF3SW1hZ2UoY2FudmFzLCBib3JkZXIsIGJvcmRlcik7XG4gICAgICAgICAgICAgICAgaWYgKGZvcmNlcykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgY2FudmFzRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgICAgIGNhbnZhc0Rpdi5hcHBlbmRDaGlsZChmaW5hbENhbnZhcyk7XG4gICAgICAgICAgICAgICAgICAgIGZvcmNlcy5hcHBlbmRDaGlsZChjYW52YXNEaXYpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW5kZXJCb3JkZXIoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIHg6IG51bWJlciwgeTogbnVtYmVyLCB3OiBudW1iZXIsIGg6IG51bWJlcikge1xuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBSZW5kZXJlcjQway5fYmxhY2tDb2xvcjtcblxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5tb3ZlVG8oeCwgeSArIFJlbmRlcmVyNDBrLl9iZXZlbFNpemUpO1xuICAgICAgICBjdHgubGluZVRvKHgsIHkgKyBoIC0gUmVuZGVyZXI0MGsuX2JldmVsU2l6ZSk7XG4gICAgICAgIGN0eC5saW5lVG8oeCArIFJlbmRlcmVyNDBrLl9iZXZlbFNpemUsIHkgKyBoKTtcbiAgICAgICAgY3R4LmxpbmVUbyh4ICsgdyAtIFJlbmRlcmVyNDBrLl9iZXZlbFNpemUsIHkgKyBoKTtcbiAgICAgICAgY3R4LmxpbmVUbyh4ICsgdywgeSArIGggLSBSZW5kZXJlcjQway5fYmV2ZWxTaXplKTtcbiAgICAgICAgY3R4LmxpbmVUbyh4ICsgdywgeSArIFJlbmRlcmVyNDBrLl9iZXZlbFNpemUpO1xuICAgICAgICBjdHgubGluZVRvKHggKyB3IC0gUmVuZGVyZXI0MGsuX2JldmVsU2l6ZSwgeSk7XG4gICAgICAgIGN0eC5saW5lVG8oeCArIFJlbmRlcmVyNDBrLl9iZXZlbFNpemUsIHkpO1xuICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgIGN0eC5zdHJva2UoKTtcblxuICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gUmVuZGVyZXI0MGsuX2ZpbGxDb2xvcjtcbiAgICAgICAgY3R4Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9IFwiZGVzdGluYXRpb24tb3ZlclwiO1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5tb3ZlVG8oeCwgeSArIFJlbmRlcmVyNDBrLl9iZXZlbFNpemUpO1xuICAgICAgICBjdHgubGluZVRvKHgsIHkgKyBoIC0gUmVuZGVyZXI0MGsuX2JldmVsU2l6ZSk7XG4gICAgICAgIGN0eC5saW5lVG8oeCArIFJlbmRlcmVyNDBrLl9iZXZlbFNpemUsIHkgKyBoKTtcbiAgICAgICAgY3R4LmxpbmVUbyh4ICsgdyAtIFJlbmRlcmVyNDBrLl9iZXZlbFNpemUsIHkgKyBoKTtcbiAgICAgICAgY3R4LmxpbmVUbyh4ICsgdywgeSArIGggLSBSZW5kZXJlcjQway5fYmV2ZWxTaXplKTtcbiAgICAgICAgY3R4LmxpbmVUbyh4ICsgdywgeSArIFJlbmRlcmVyNDBrLl9iZXZlbFNpemUpO1xuICAgICAgICBjdHgubGluZVRvKHggKyB3IC0gUmVuZGVyZXI0MGsuX2JldmVsU2l6ZSwgeSk7XG4gICAgICAgIGN0eC5saW5lVG8oeCArIFJlbmRlcmVyNDBrLl9iZXZlbFNpemUsIHkpO1xuICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgIGN0eC5maWxsKCk7XG5cbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlcldhdGVybWFyayhjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCkge1xuXG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW5kZXJMaW5lKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKTogdm9pZCB7XG4gICAgICAgIGN0eC5saW5lV2lkdGggPSAyO1xuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBSZW5kZXJlcjQway5fYmxhY2tDb2xvcjtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBjdHgubW92ZVRvKHRoaXMuX2N1cnJlbnRYLCB0aGlzLl9jdXJyZW50WSk7XG4gICAgICAgIGN0eC5saW5lVG8odGhpcy5fY3VycmVudFggKyB0aGlzLl9tYXhXaWR0aCwgdGhpcy5fY3VycmVudFkpO1xuICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRZICs9IDE7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW5kZXJUYWJsZUhlYWRlcihjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgbGFiZWxzOiBzdHJpbmdbXSwgY29sdW1uV2lkdGhzOiBudW1iZXJbXSB8IG51bGwpIHtcbiAgICAgICAgbGV0IHggPSB0aGlzLl9jdXJyZW50WDtcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gMjI7XG4gICAgICAgIGNvbnN0IHdpZHRoID0gdGhpcy5fbWF4V2lkdGg7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBSZW5kZXJlcjQway5fZ3JleTE7XG4gICAgICAgIGN0eC5maWxsUmVjdCh0aGlzLl9jdXJyZW50WCwgdGhpcy5fY3VycmVudFksIHdpZHRoLCBoZWlnaHQpO1xuXG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBSZW5kZXJlcjQway5fYmxhY2tDb2xvcjtcbiAgICAgICAgY3R4LmZvbnQgPSAnMTRweCBzYW5zLXNlcmlmJztcbiAgICAgICAgdmFyIHcgPSA1MDtcbiAgICAgICAgaWYgKGxhYmVscykge1xuICAgICAgICAgICAgY3R4LmZvbnQgPSAnMTJweCBzYW5zLXNlcmlmJztcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGFiZWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbHVtbldpZHRocykgdyA9IGNvbHVtbldpZHRoc1tpXTtcbiAgICAgICAgICAgICAgICBSZW5kZXJUZXh0KGN0eCwgbGFiZWxzW2ldLCB4LCB0aGlzLl9jdXJyZW50WSwgdywgaGVpZ2h0LCBKdXN0aWZpY2F0aW9uLkNlbnRlcik7XG4gICAgICAgICAgICAgICAgeCArPSB3O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fY3VycmVudFkgKz0gaGVpZ2h0O1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVuZGVyU3BlbGxzKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCBzcGVsbHM6IFBzeWNoaWNQb3dlcltdLCBjb2x1bW5XaWR0aHM6IG51bWJlcltdIHwgbnVsbCk6IHZvaWQge1xuICAgICAgICBjdHguZm9udCA9ICcxMnB4IHNhbnMtc2VyaWYnO1xuXG4gICAgICAgIGNvbnN0IGhlaWdodCA9IDIyO1xuXG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgbGV0IHcgPSA1MDtcblxuICAgICAgICBjdHguc2F2ZSgpO1xuXG4gICAgICAgIGZvciAoY29uc3Qgc3BlbGwgb2Ygc3BlbGxzKSB7XG4gICAgICAgICAgICBsZXQgY2kgPSAwO1xuICAgICAgICAgICAgbGV0IHggPSB0aGlzLl9jdXJyZW50WDtcblxuICAgICAgICAgICAgbGV0IHhTdGFydCA9IHRoaXMuX2N1cnJlbnRYO1xuICAgICAgICAgICAgbGV0IHlTdGFydCA9IHRoaXMuX2N1cnJlbnRZO1xuXG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gUmVuZGVyZXI0MGsuX2JsYWNrQ29sb3I7XG4gICAgICAgICAgICBpZiAoY29sdW1uV2lkdGhzKSB3ID0gY29sdW1uV2lkdGhzW2NpKytdO1xuICAgICAgICAgICAgUmVuZGVyVGV4dChjdHgsIHNwZWxsLl9uYW1lLnRvU3RyaW5nKCksIHgsIHRoaXMuX2N1cnJlbnRZLCB3LCBoZWlnaHQsIEp1c3RpZmljYXRpb24uQ2VudGVyKTtcbiAgICAgICAgICAgIHggKz0gdztcblxuICAgICAgICAgICAgaWYgKGNvbHVtbldpZHRocykgdyA9IGNvbHVtbldpZHRoc1tjaSsrXTtcbiAgICAgICAgICAgIFJlbmRlclRleHQoY3R4LCBzcGVsbC5fbWFuaWZlc3QudG9TdHJpbmcoKSwgeCwgdGhpcy5fY3VycmVudFksIHcsIGhlaWdodCwgSnVzdGlmaWNhdGlvbi5DZW50ZXIpO1xuICAgICAgICAgICAgeCArPSB3O1xuXG4gICAgICAgICAgICBpZiAoY29sdW1uV2lkdGhzKSB3ID0gY29sdW1uV2lkdGhzW2NpKytdO1xuICAgICAgICAgICAgUmVuZGVyVGV4dChjdHgsIHNwZWxsLl9yYW5nZS50b1N0cmluZygpLCB4LCB0aGlzLl9jdXJyZW50WSwgdywgaGVpZ2h0LCBKdXN0aWZpY2F0aW9uLkNlbnRlcik7XG4gICAgICAgICAgICB4ICs9IHc7XG5cbiAgICAgICAgICAgIGlmIChjb2x1bW5XaWR0aHMpIHcgPSBjb2x1bW5XaWR0aHNbY2krK107XG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50WSArPSA0O1xuICAgICAgICAgICAgdGhpcy5fY3VycmVudFkgPSBSZW5kZXJQYXJhZ3JhcGgoY3R4LCBzcGVsbC5fZGV0YWlscywgeCwgdGhpcy5fY3VycmVudFksIHcpO1xuICAgICAgICAgICAgdGhpcy5fY3VycmVudFkgKz0gMjtcbiAgICAgICAgICAgIHggKz0gdztcblxuXG4gICAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgICAgaWYgKGkgJSAyKSBjdHguZmlsbFN0eWxlID0gUmVuZGVyZXI0MGsuX2dyZXlMaWdodDtcbiAgICAgICAgICAgIGVsc2UgY3R4LmZpbGxTdHlsZSA9ICcjZmZmZmZmJztcbiAgICAgICAgICAgIGN0eC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSBcImRlc3RpbmF0aW9uLW92ZXJcIjtcbiAgICAgICAgICAgIGNvbnN0IGFjdHVhbEhlaWdodCA9IHRoaXMuX2N1cnJlbnRZIC0geVN0YXJ0O1xuICAgICAgICAgICAgY3R4LmZpbGxSZWN0KHhTdGFydCwgeVN0YXJ0LCB0aGlzLl9tYXhXaWR0aCwgYWN0dWFsSGVpZ2h0KTtcbiAgICAgICAgICAgIGkrKztcblxuICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgfVxuICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVuZGVyRXhwbG9zaW9uKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCBleHBsb3Npb25zOiBFeHBsb3Npb25bXSwgY29sdW1uV2lkdGhzOiBudW1iZXJbXSB8IG51bGwpOiB2b2lkIHtcbiAgICAgICAgY3R4LmZvbnQgPSAnMTJweCBzYW5zLXNlcmlmJztcblxuICAgICAgICBjb25zdCBoZWlnaHQgPSAyMjtcblxuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIGxldCB3ID0gNTA7XG5cbiAgICAgICAgZm9yIChjb25zdCBleHBsIG9mIGV4cGxvc2lvbnMpIHtcbiAgICAgICAgICAgIGxldCBjaSA9IDA7XG4gICAgICAgICAgICBsZXQgeCA9IHRoaXMuX2N1cnJlbnRYO1xuXG4gICAgICAgICAgICBpZiAoaSAlIDIpIGN0eC5maWxsU3R5bGUgPSBSZW5kZXJlcjQway5fZ3JleUxpZ2h0O1xuICAgICAgICAgICAgZWxzZSBjdHguZmlsbFN0eWxlID0gJyNmZmZmZmYnO1xuICAgICAgICAgICAgY3R4LmZpbGxSZWN0KHgsIHRoaXMuX2N1cnJlbnRZLCB0aGlzLl9tYXhXaWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgICAgIGkrKztcblxuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IFJlbmRlcmVyNDBrLl9ibGFja0NvbG9yO1xuXG4gICAgICAgICAgICBpZiAoY29sdW1uV2lkdGhzKSB3ID0gY29sdW1uV2lkdGhzW2NpKytdO1xuICAgICAgICAgICAgUmVuZGVyVGV4dChjdHgsIGV4cGwuX25hbWUsIHgsIHRoaXMuX2N1cnJlbnRZLCB3LCBoZWlnaHQsIEp1c3RpZmljYXRpb24uQ2VudGVyKTtcbiAgICAgICAgICAgIHggKz0gdztcblxuICAgICAgICAgICAgaWYgKGNvbHVtbldpZHRocykgdyA9IGNvbHVtbldpZHRoc1tjaSsrXTtcbiAgICAgICAgICAgIFJlbmRlclRleHQoY3R4LCBleHBsLl9kaWNlUm9sbCwgeCwgdGhpcy5fY3VycmVudFksIHcsIGhlaWdodCwgSnVzdGlmaWNhdGlvbi5DZW50ZXIpO1xuICAgICAgICAgICAgeCArPSB3O1xuXG4gICAgICAgICAgICBpZiAoY29sdW1uV2lkdGhzKSB3ID0gY29sdW1uV2lkdGhzW2NpKytdO1xuICAgICAgICAgICAgUmVuZGVyVGV4dChjdHgsIGV4cGwuX2Rpc3RhbmNlLCB4LCB0aGlzLl9jdXJyZW50WSwgdywgaGVpZ2h0LCBKdXN0aWZpY2F0aW9uLkNlbnRlcik7XG4gICAgICAgICAgICB4ICs9IHc7XG5cbiAgICAgICAgICAgIGlmIChjb2x1bW5XaWR0aHMpIHcgPSBjb2x1bW5XaWR0aHNbY2krK107XG4gICAgICAgICAgICBSZW5kZXJUZXh0KGN0eCwgZXhwbC5fbW9ydGFsV291bmRzLCB4LCB0aGlzLl9jdXJyZW50WSwgdywgaGVpZ2h0LCBKdXN0aWZpY2F0aW9uLkNlbnRlcik7XG4gICAgICAgICAgICB4ICs9IHc7XG5cbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRZICs9IGhlaWdodDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgcmVuZGVyV2VhcG9ucyhjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgd2VhcG9uczogV2VhcG9uW10sIGNvbHVtbldpZHRoczogbnVtYmVyW10gfCBudWxsKTogdm9pZCB7XG4gICAgICAgIGN0eC5mb250ID0gJzEycHggc2Fucy1zZXJpZic7XG5cbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gMjI7XG5cbiAgICAgICAgY3R4LnNhdmUoKTtcblxuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIGxldCB3ID0gNTA7XG4gICAgICAgIGZvciAoY29uc3Qgd2VhcG9uIG9mIHdlYXBvbnMpIHtcblxuICAgICAgICAgICAgbGV0IGNpID0gMDtcbiAgICAgICAgICAgIGxldCB4ID0gdGhpcy5fY3VycmVudFg7XG5cbiAgICAgICAgICAgIGxldCB4U3RhcnQgPSB0aGlzLl9jdXJyZW50WDtcbiAgICAgICAgICAgIGxldCB5U3RhcnQgPSB0aGlzLl9jdXJyZW50WTtcblxuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IFJlbmRlcmVyNDBrLl9ibGFja0NvbG9yO1xuICAgICAgICAgICAgaWYgKGNvbHVtbldpZHRocykgdyA9IGNvbHVtbldpZHRoc1tjaSsrXTtcbiAgICAgICAgICAgIFJlbmRlclRleHQoY3R4LCB3ZWFwb24uX25hbWUudG9TdHJpbmcoKSwgeCwgdGhpcy5fY3VycmVudFksIHcsIGhlaWdodCwgSnVzdGlmaWNhdGlvbi5DZW50ZXIpO1xuICAgICAgICAgICAgeCArPSB3O1xuXG4gICAgICAgICAgICBpZiAoY29sdW1uV2lkdGhzKSB3ID0gY29sdW1uV2lkdGhzW2NpKytdO1xuICAgICAgICAgICAgUmVuZGVyVGV4dChjdHgsIHdlYXBvbi5fcmFuZ2UudG9TdHJpbmcoKSwgeCwgdGhpcy5fY3VycmVudFksIHcsIGhlaWdodCwgSnVzdGlmaWNhdGlvbi5DZW50ZXIpO1xuICAgICAgICAgICAgeCArPSB3O1xuXG4gICAgICAgICAgICBpZiAoY29sdW1uV2lkdGhzKSB3ID0gY29sdW1uV2lkdGhzW2NpKytdO1xuICAgICAgICAgICAgUmVuZGVyVGV4dChjdHgsIHdlYXBvbi5fdHlwZS50b1N0cmluZygpLCB4LCB0aGlzLl9jdXJyZW50WSwgdywgaGVpZ2h0LCBKdXN0aWZpY2F0aW9uLkNlbnRlcik7XG4gICAgICAgICAgICB4ICs9IHc7XG5cbiAgICAgICAgICAgIGlmIChjb2x1bW5XaWR0aHMpIHcgPSBjb2x1bW5XaWR0aHNbY2krK107XG4gICAgICAgICAgICBSZW5kZXJUZXh0KGN0eCwgd2VhcG9uLl9zdHIudG9TdHJpbmcoKSwgeCwgdGhpcy5fY3VycmVudFksIHcsIGhlaWdodCwgSnVzdGlmaWNhdGlvbi5DZW50ZXIpO1xuICAgICAgICAgICAgeCArPSB3O1xuXG4gICAgICAgICAgICBpZiAoY29sdW1uV2lkdGhzKSB3ID0gY29sdW1uV2lkdGhzW2NpKytdO1xuICAgICAgICAgICAgUmVuZGVyVGV4dChjdHgsIHdlYXBvbi5fYXAudG9TdHJpbmcoKSwgeCwgdGhpcy5fY3VycmVudFksIHcsIGhlaWdodCwgSnVzdGlmaWNhdGlvbi5DZW50ZXIpO1xuICAgICAgICAgICAgeCArPSB3O1xuXG4gICAgICAgICAgICBpZiAoY29sdW1uV2lkdGhzKSB3ID0gY29sdW1uV2lkdGhzW2NpKytdO1xuICAgICAgICAgICAgUmVuZGVyVGV4dChjdHgsIHdlYXBvbi5fZGFtYWdlLnRvU3RyaW5nKCksIHgsIHRoaXMuX2N1cnJlbnRZLCB3LCBoZWlnaHQsIEp1c3RpZmljYXRpb24uQ2VudGVyKTtcbiAgICAgICAgICAgIHggKz0gdztcblxuICAgICAgICAgICAgaWYgKGNvbHVtbldpZHRocykgdyA9IGNvbHVtbldpZHRoc1tjaSsrXTtcbiAgICAgICAgICAgIGlmICh3ZWFwb24uX2FiaWxpdGllcykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRZICs9IDQ7XG4gICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudFkgPSBSZW5kZXJQYXJhZ3JhcGgoY3R4LCB3ZWFwb24uX2FiaWxpdGllcywgeCwgdGhpcy5fY3VycmVudFksIHcpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRZICs9IDI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50WSArPSBoZWlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB4ICs9IHc7XG5cbiAgICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgICBjdHguZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gXCJkZXN0aW5hdGlvbi1vdmVyXCI7XG4gICAgICAgICAgICBjb25zdCBhY3R1YWxIZWlnaHQgPSB0aGlzLl9jdXJyZW50WSAtIHlTdGFydDtcbiAgICAgICAgICAgIGlmIChpICUgMikgY3R4LmZpbGxTdHlsZSA9IFJlbmRlcmVyNDBrLl9ncmV5TGlnaHQ7XG4gICAgICAgICAgICBlbHNlIGN0eC5maWxsU3R5bGUgPSAnI2ZmZmZmZic7XG4gICAgICAgICAgICBjdHguZmlsbFJlY3QoeFN0YXJ0LCB5U3RhcnQsIHRoaXMuX21heFdpZHRoLCBhY3R1YWxIZWlnaHQpO1xuICAgICAgICAgICAgaSsrO1xuXG4gICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW5kZXJNb2RlbChjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgbW9kZWw6IE1vZGVsLCBjb2x1bW5XaWR0aHM6IG51bWJlcltdIHwgbnVsbCwgYmc6IG51bWJlcik6IHZvaWQge1xuXG4gICAgICAgIGNvbnN0IGhlaWdodCA9IDI0O1xuXG4gICAgICAgIGxldCB3ID0gNTA7XG4gICAgICAgIGxldCB4ID0gdGhpcy5fY3VycmVudFg7XG4gICAgICAgIGxldCBjaSA9IDA7XG5cbiAgICAgICAgaWYgKGJnICUgMikgY3R4LmZpbGxTdHlsZSA9IFJlbmRlcmVyNDBrLl9ncmV5TGlnaHQ7XG4gICAgICAgIGVsc2UgY3R4LmZpbGxTdHlsZSA9ICcjZmZmZmZmJztcbiAgICAgICAgY3R4LmZpbGxSZWN0KHgsIHRoaXMuX2N1cnJlbnRZLCB0aGlzLl9tYXhXaWR0aCwgaGVpZ2h0KTtcblxuICAgICAgICBjdHguZmlsbFN0eWxlID0gUmVuZGVyZXI0MGsuX2JsYWNrQ29sb3I7XG4gICAgICAgIGN0eC5mb250ID0gJzEycHggc2Fucy1zZXJpZic7XG5cbiAgICAgICAgaWYgKGNvbHVtbldpZHRocykgdyA9IGNvbHVtbldpZHRoc1tjaSsrXTtcbiAgICAgICAgUmVuZGVyVGV4dChjdHgsIG1vZGVsLl9uYW1lLnRvU3RyaW5nKCksIHgsIHRoaXMuX2N1cnJlbnRZLCB3LCBoZWlnaHQsIEp1c3RpZmljYXRpb24uQ2VudGVyKTtcbiAgICAgICAgeCArPSB3O1xuXG4gICAgICAgIGlmIChjb2x1bW5XaWR0aHMpIHcgPSBjb2x1bW5XaWR0aHNbY2krK107XG4gICAgICAgIFJlbmRlclRleHQoY3R4LCBtb2RlbC5fbW92ZS50b1N0cmluZygpLCB4LCB0aGlzLl9jdXJyZW50WSwgdywgaGVpZ2h0LCBKdXN0aWZpY2F0aW9uLkNlbnRlcik7XG4gICAgICAgIHggKz0gdztcblxuICAgICAgICBpZiAoY29sdW1uV2lkdGhzKSB3ID0gY29sdW1uV2lkdGhzW2NpKytdO1xuICAgICAgICBSZW5kZXJUZXh0KGN0eCwgbW9kZWwuX3dzLnRvU3RyaW5nKCksIHgsIHRoaXMuX2N1cnJlbnRZLCB3LCBoZWlnaHQsIEp1c3RpZmljYXRpb24uQ2VudGVyKTtcbiAgICAgICAgeCArPSB3O1xuXG4gICAgICAgIGlmIChjb2x1bW5XaWR0aHMpIHcgPSBjb2x1bW5XaWR0aHNbY2krK107XG4gICAgICAgIFJlbmRlclRleHQoY3R4LCBtb2RlbC5fYnMudG9TdHJpbmcoKSwgeCwgdGhpcy5fY3VycmVudFksIHcsIGhlaWdodCwgSnVzdGlmaWNhdGlvbi5DZW50ZXIpO1xuICAgICAgICB4ICs9IHc7XG5cbiAgICAgICAgaWYgKGNvbHVtbldpZHRocykgdyA9IGNvbHVtbldpZHRoc1tjaSsrXTtcbiAgICAgICAgUmVuZGVyVGV4dChjdHgsIG1vZGVsLl9zdHIudG9TdHJpbmcoKSwgeCwgdGhpcy5fY3VycmVudFksIHcsIGhlaWdodCwgSnVzdGlmaWNhdGlvbi5DZW50ZXIpO1xuICAgICAgICB4ICs9IHc7XG5cbiAgICAgICAgaWYgKGNvbHVtbldpZHRocykgdyA9IGNvbHVtbldpZHRoc1tjaSsrXTtcbiAgICAgICAgUmVuZGVyVGV4dChjdHgsIG1vZGVsLl90b3VnaG5lc3MudG9TdHJpbmcoKSwgeCwgdGhpcy5fY3VycmVudFksIHcsIGhlaWdodCwgSnVzdGlmaWNhdGlvbi5DZW50ZXIpO1xuICAgICAgICB4ICs9IHc7XG5cbiAgICAgICAgaWYgKGNvbHVtbldpZHRocykgdyA9IGNvbHVtbldpZHRoc1tjaSsrXTtcbiAgICAgICAgUmVuZGVyVGV4dChjdHgsIG1vZGVsLl93b3VuZHMudG9TdHJpbmcoKSwgeCwgdGhpcy5fY3VycmVudFksIHcsIGhlaWdodCwgSnVzdGlmaWNhdGlvbi5DZW50ZXIpO1xuICAgICAgICB4ICs9IHc7XG5cbiAgICAgICAgaWYgKGNvbHVtbldpZHRocykgdyA9IGNvbHVtbldpZHRoc1tjaSsrXTtcbiAgICAgICAgUmVuZGVyVGV4dChjdHgsIG1vZGVsLl9hdHRhY2tzLnRvU3RyaW5nKCksIHgsIHRoaXMuX2N1cnJlbnRZLCB3LCBoZWlnaHQsIEp1c3RpZmljYXRpb24uQ2VudGVyKTtcbiAgICAgICAgeCArPSB3O1xuXG4gICAgICAgIGlmIChjb2x1bW5XaWR0aHMpIHcgPSBjb2x1bW5XaWR0aHNbY2krK107XG4gICAgICAgIFJlbmRlclRleHQoY3R4LCBtb2RlbC5fbGVhZGVyc2hpcC50b1N0cmluZygpLCB4LCB0aGlzLl9jdXJyZW50WSwgdywgaGVpZ2h0LCBKdXN0aWZpY2F0aW9uLkNlbnRlcik7XG4gICAgICAgIHggKz0gdztcblxuICAgICAgICBpZiAoY29sdW1uV2lkdGhzKSB3ID0gY29sdW1uV2lkdGhzW2NpKytdO1xuICAgICAgICBSZW5kZXJUZXh0KGN0eCwgbW9kZWwuX3NhdmUudG9TdHJpbmcoKSwgeCwgdGhpcy5fY3VycmVudFksIHcsIGhlaWdodCwgSnVzdGlmaWNhdGlvbi5DZW50ZXIpO1xuICAgICAgICB4ICs9IHc7XG5cbiAgICAgICAgdGhpcy5fY3VycmVudFkgKz0gaGVpZ2h0O1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVuZGVyQWJpbGl0aWVzKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCB1bml0OiBVbml0KTogdm9pZCB7XG4gICAgICAgIGN0eC5mb250ID0gJzE0cHggc2Fucy1zZXJpZic7XG4gICAgICAgIFJlbmRlclRleHQoY3R4LCBcIkFCSUxJVElFU1wiLCB0aGlzLl9jdXJyZW50WCArIDIwLCB0aGlzLl9jdXJyZW50WSwgMTAwLCAxNiwgSnVzdGlmaWNhdGlvbi5MZWZ0KTtcblxuICAgICAgICBjdHguZm9udCA9ICcxMnB4IHNlcmlmJztcbiAgICAgICAgZm9yIChsZXQgYWIgb2YgdW5pdC5fYWJpbGl0aWVzKSB7XG4gICAgICAgICAgICBjb25zdCBjb250ZW50ID0gYWJbMF0udG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgIGNvbnN0IGRlc2MgPSBhYlsxXTtcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRZICs9IDI7XG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50WSA9IFJlbmRlclBhcmFncmFwaChjdHgsIGNvbnRlbnQgKyBcIjogXCIgKyBkZXNjLCB0aGlzLl9jdXJyZW50WCArIHRoaXMuX2Rlc2NyaXB0aW9uU3RhcnRYLCB0aGlzLl9jdXJyZW50WSwgdGhpcy5fZGVzY3JpcHRpb25XaWR0aCk7XG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50WSArPSAyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW5kZXJSdWxlcyhjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgdW5pdDogVW5pdCk6IHZvaWQge1xuICAgICAgICBjdHguZm9udCA9ICcxNHB4IHNhbnMtc2VyaWYnO1xuICAgICAgICBSZW5kZXJUZXh0KGN0eCwgXCJSVUxFU1wiLCB0aGlzLl9jdXJyZW50WCArIDIwLCB0aGlzLl9jdXJyZW50WSwgMTAwLCAxNiwgSnVzdGlmaWNhdGlvbi5MZWZ0KTtcblxuICAgICAgICBjdHguZm9udCA9ICcxMnB4IHNlcmlmJztcbiAgICAgICAgZm9yIChsZXQgcnVsZSBvZiB1bml0Ll9ydWxlcykge1xuICAgICAgICAgICAgY29uc3QgY29udGVudCA9IHJ1bGVbMF0udG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgIGNvbnN0IGRlc2MgPSBydWxlWzFdO1xuICAgICAgICAgICAgdGhpcy5fY3VycmVudFkgKz0gMjtcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRZID0gUmVuZGVyUGFyYWdyYXBoKGN0eCwgY29udGVudCArIFwiOiBcIiArIGRlc2MsIHRoaXMuX2N1cnJlbnRYICsgdGhpcy5fZGVzY3JpcHRpb25TdGFydFgsIHRoaXMuX2N1cnJlbnRZLCB0aGlzLl9kZXNjcmlwdGlvbldpZHRoKTtcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRZICs9IDQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlcktleXdvcmRzKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCB1bml0OiBVbml0KTogdm9pZCB7XG4gICAgICAgIGN0eC5mb250ID0gJzE0cHggc2Fucy1zZXJpZic7XG4gICAgICAgIFJlbmRlclRleHQoY3R4LCBcIktFWVdPUkRTXCIsIHRoaXMuX2N1cnJlbnRYICsgMjAsIHRoaXMuX2N1cnJlbnRZLCAxMDAsIDE2LCBKdXN0aWZpY2F0aW9uLkxlZnQpO1xuXG4gICAgICAgIGN0eC5mb250ID0gJzEycHggc2VyaWYnO1xuICAgICAgICBjb25zdCBrd2xpc3QgPSBbLi4udW5pdC5fa2V5d29yZHNdO1xuICAgICAgICBjb25zdCBrdyA9IGt3bGlzdC5qb2luKFwiLCBcIikudG9Mb2NhbGVVcHBlckNhc2UoKTtcbiAgICAgICAgdGhpcy5fY3VycmVudFkgKz0gMjtcbiAgICAgICAgdGhpcy5fY3VycmVudFkgPSBSZW5kZXJQYXJhZ3JhcGgoY3R4LCBrdywgdGhpcy5fY3VycmVudFggKyB0aGlzLl9kZXNjcmlwdGlvblN0YXJ0WCwgdGhpcy5fY3VycmVudFksIHRoaXMuX2Rlc2NyaXB0aW9uV2lkdGgpO1xuICAgICAgICB0aGlzLl9jdXJyZW50WSArPSAyO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVuZGVyRmFjdGlvbnMoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIHVuaXQ6IFVuaXQpOiB2b2lkIHtcbiAgICAgICAgY3R4LmZvbnQgPSAnMTRweCBzYW5zLXNlcmlmJztcbiAgICAgICAgUmVuZGVyVGV4dChjdHgsIFwiRkFDVElPTlNcIiwgdGhpcy5fY3VycmVudFggKyAyMCwgdGhpcy5fY3VycmVudFksIDEwMCwgMTYsIEp1c3RpZmljYXRpb24uTGVmdCk7XG5cbiAgICAgICAgY3R4LmZvbnQgPSAnMTJweCBzZXJpZic7XG4gICAgICAgIGNvbnN0IGt3bGlzdCA9IFsuLi51bml0Ll9mYWN0aW9uc107XG4gICAgICAgIGNvbnN0IGt3ID0ga3dsaXN0LmpvaW4oXCIsIFwiKS50b0xvY2FsZVVwcGVyQ2FzZSgpO1xuICAgICAgICB0aGlzLl9jdXJyZW50WSArPSAyO1xuICAgICAgICB0aGlzLl9jdXJyZW50WSA9IFJlbmRlclBhcmFncmFwaChjdHgsIGt3LCB0aGlzLl9jdXJyZW50WCArIHRoaXMuX2Rlc2NyaXB0aW9uU3RhcnRYLCB0aGlzLl9jdXJyZW50WSwgdGhpcy5fZGVzY3JpcHRpb25XaWR0aCk7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRZICs9IDI7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW5kZXJXb3VuZFRhYmxlKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCB1bml0OiBVbml0LCBjb2x1bW5XaWR0aHM6IG51bWJlcltdIHwgbnVsbCk6IHZvaWQge1xuICAgICAgICBjb25zdCBoZWlnaHQgPSAyMjtcblxuICAgICAgICBsZXQgdyA9IDUwO1xuXG4gICAgICAgIGxldCBmaXJzdFJvdyA9IHRydWU7XG4gICAgICAgIGZvciAobGV0IHRyYWNrZXIgb2YgdW5pdC5fd291bmRUcmFja2VyKSB7XG5cbiAgICAgICAgICAgIGlmIChmaXJzdFJvdyAmJiAodW5pdC5fd291bmRUcmFja2VyLmxlbmd0aCA9PSA0KSkge1xuICAgICAgICAgICAgICAgIC8vIFNraXAgY29sdW1uIGxhYmVsc1xuICAgICAgICAgICAgICAgIGZpcnN0Um93ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCB4ID0gdGhpcy5fY3VycmVudFg7XG4gICAgICAgICAgICBsZXQgY2kgPSAwO1xuXG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gUmVuZGVyZXI0MGsuX2dyZXlMaWdodDtcbiAgICAgICAgICAgIGN0eC5maWxsUmVjdCh4LCB0aGlzLl9jdXJyZW50WSwgdGhpcy5fbWF4V2lkdGgsIGhlaWdodCk7XG5cbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBSZW5kZXJlcjQway5fYmxhY2tDb2xvcjtcbiAgICAgICAgICAgIGN0eC5mb250ID0gJzEycHggc2Fucy1zZXJpZic7XG4gICAgICAgICAgICBpZiAoY29sdW1uV2lkdGhzKSB3ID0gY29sdW1uV2lkdGhzW2NpKytdO1xuXG4gICAgICAgICAgICAvL1JlbmRlclRleHQoY3R4LCB0cmFja2VyLl9uYW1lLCB4LCB0aGlzLl9jdXJyZW50WSwgdywgaGVpZ2h0LCBKdXN0aWZpY2F0aW9uLkNlbnRlcik7XG4gICAgICAgICAgICB4ICs9IHc7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGF0dHIgb2YgdHJhY2tlci5fdGFibGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoY29sdW1uV2lkdGhzKSB3ID0gY29sdW1uV2lkdGhzW2NpKytdO1xuICAgICAgICAgICAgICAgIFJlbmRlclRleHQoY3R4LCBhdHRyWzFdLCB4LCB0aGlzLl9jdXJyZW50WSwgdywgaGVpZ2h0LCBKdXN0aWZpY2F0aW9uLkNlbnRlcik7XG4gICAgICAgICAgICAgICAgeCArPSB3O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50WSArPSBoZWlnaHQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlck1vZGVsTGlzdChjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgbW9kZWxzOiBNb2RlbFtdKSB7XG4gICAgICAgIGN0eC5mb250ID0gJzE0cHggc2Fucy1zZXJpZic7XG4gICAgICAgIFJlbmRlclRleHQoY3R4LCBcIk1PREVMU1wiLCB0aGlzLl9jdXJyZW50WCArIDIwLCB0aGlzLl9jdXJyZW50WSwgMTAwLCAxNiwgSnVzdGlmaWNhdGlvbi5MZWZ0KTtcblxuICAgICAgICBjdHguZm9udCA9ICcxMnB4IHNlcmlmJztcbiAgICAgICAgbGV0IG1vZGVsTGlzdCA9IFwiXCI7XG4gICAgICAgIGxldCBtaSA9IDA7XG4gICAgICAgIGZvciAoY29uc3QgbW9kZWwgb2YgbW9kZWxzKSB7XG4gICAgICAgICAgICBpZiAobW9kZWwuX2NvdW50ID4gMSkge1xuICAgICAgICAgICAgICAgIG1vZGVsTGlzdCArPSBtb2RlbC5fY291bnQgKyBcIiBcIiArIG1vZGVsLl9uYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbW9kZWxMaXN0ICs9IG1vZGVsLl9uYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWkrKztcbiAgICAgICAgICAgIGlmIChtaSAhPSBtb2RlbHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgbW9kZWxMaXN0ICs9IFwiLCAgXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2N1cnJlbnRZICs9IDI7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRZID0gUmVuZGVyUGFyYWdyYXBoKGN0eCwgbW9kZWxMaXN0LCB0aGlzLl9jdXJyZW50WCArIHRoaXMuX2Rlc2NyaXB0aW9uU3RhcnRYLCB0aGlzLl9jdXJyZW50WSwgdGhpcy5fZGVzY3JpcHRpb25XaWR0aCk7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRZICs9IDI7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW5kZXJXb3VuZEJveGVzKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCBtb2RlbHM6IE1vZGVsW10pIHtcblxuICAgICAgICBjdHguZm9udCA9ICcxNHB4IHNhbnMtc2VyaWYnO1xuICAgICAgICBSZW5kZXJUZXh0KGN0eCwgXCJXT1VORFNcIiwgdGhpcy5fY3VycmVudFggKyAyMCwgdGhpcy5fY3VycmVudFksIDEwMCwgMTYsIEp1c3RpZmljYXRpb24uTGVmdCk7XG5cbiAgICAgICAgY29uc3Qgd291bmRCb3hTaXplID0gMjA7XG4gICAgICAgIGNvbnN0IGJveE1hcmdpbiA9IDU7XG4gICAgICAgIGNvbnN0IHVuaXROYW1lU3RhcnRYID0gdGhpcy5fY3VycmVudFggKyB0aGlzLl9kZXNjcmlwdGlvblN0YXJ0WDtcbiAgICAgICAgY29uc3QgdW5pdE5hbWVXaWR0aCA9IDIwMCAtIGJveE1hcmdpbjtcbiAgICAgICAgY29uc3QgYm94U3RhcnRYID0gdW5pdE5hbWVTdGFydFggKyB1bml0TmFtZVdpZHRoO1xuXG4gICAgICAgIGN0eC5zYXZlKCk7XG5cbiAgICAgICAgZm9yIChsZXQgbW9kZWwgb2YgbW9kZWxzKSB7XG4gICAgICAgICAgICBpZiAobW9kZWwuX3dvdW5kcyA+IDEpIHtcblxuICAgICAgICAgICAgICAgIGxldCBjdXJyZW50WSA9IHRoaXMuX2N1cnJlbnRZO1xuXG4gICAgICAgICAgICAgICAgY3R4LmZvbnQgPSAnMTJweCBzZXJpZic7XG4gICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IFJlbmRlcmVyNDBrLl9ibGFja0NvbG9yO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudFkgPSBSZW5kZXJQYXJhZ3JhcGgoY3R4LCBtb2RlbC5fbmFtZSwgdW5pdE5hbWVTdGFydFgsIHRoaXMuX2N1cnJlbnRZICsgKHdvdW5kQm94U2l6ZSAtIDE0KSAvIDIsIHVuaXROYW1lV2lkdGgpO1xuXG4gICAgICAgICAgICAgICAgbGV0IHggPSB0aGlzLl9jdXJyZW50WCArIGJveFN0YXJ0WDtcbiAgICAgICAgICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBSZW5kZXJlcjQway5fYmxhY2tDb2xvcjtcbiAgICAgICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gJyNmZmZmZmYnO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IHcgPSAwOyB3IDwgbW9kZWwuX3dvdW5kczsgdysrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh3ICUgMTUgPT0gMCAmJiB3ICE9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRZICs9IHdvdW5kQm94U2l6ZSArIGJveE1hcmdpbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHggPSB0aGlzLl9jdXJyZW50WCArIGJveFN0YXJ0WDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjdHguZmlsbFJlY3QoeCwgY3VycmVudFksIHdvdW5kQm94U2l6ZSwgd291bmRCb3hTaXplKTtcbiAgICAgICAgICAgICAgICAgICAgY3R4LnN0cm9rZVJlY3QoeCwgY3VycmVudFksIHdvdW5kQm94U2l6ZSwgd291bmRCb3hTaXplKTtcbiAgICAgICAgICAgICAgICAgICAgeCArPSB3b3VuZEJveFNpemUgKyBib3hNYXJnaW47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGN1cnJlbnRZICs9IHdvdW5kQm94U2l6ZSArIGJveE1hcmdpbjtcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50WSA9IE1hdGgubWF4KHRoaXMuX2N1cnJlbnRZLCBjdXJyZW50WSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBfdW5pdExhYmVscyA9IFtcIk1PREVMXCIsIFwiTVwiLCBcIldTXCIsIFwiQlNcIiwgXCJTXCIsIFwiVFwiLCBcIldcIiwgXCJBXCIsIFwiTERcIiwgXCJTQVZFXCJdO1xuICAgIHByaXZhdGUgX3VuaXRMYWJlbFdpZHRoc05vcm1hbGl6ZWQgPSBbMC4zLCAwLjA3NywgMC4wNzcsIDAuMDc3LCAwLjA3NywgMC4wNzcsIDAuMDc3LCAwLjA3NywgMC4wNzcsIDAuMDc3XTtcbiAgICBwcml2YXRlIHN0YXRpYyBfd2VhcG9uTGFiZWxzID0gW1wiV0VBUE9OU1wiLCBcIlJBTkdFXCIsIFwiVFlQRVwiLCBcIlNcIiwgXCJBUFwiLCBcIkRcIiwgXCJBQklMSVRJRVNcIl07XG4gICAgcHJpdmF0ZSBfd2VhcG9uTGFiZWxXaWR0aE5vcm1hbGl6ZWQgPSBbMC4zLCAwLjA3NywgMC4wNzcsIDAuMDc3LCAwLjA3NywgMC4wNzcsIDAuM107XG5cbiAgICBwcml2YXRlIHN0YXRpYyBfc3BlbGxMYWJlbHMgPSBbXCJQU1lDSElDIFBPV0VSXCIsIFwiTUFOSUZFU1RcIiwgXCJSQU5HRVwiLCBcIkRFVEFJTFNcIl07XG4gICAgcHJpdmF0ZSBfc3BlbGxMYWJlbFdpZHRoTm9ybWFsaXplZCA9IFswLjMsIDAuMSwgMC4xLCAwLjVdO1xuXG4gICAgcHJpdmF0ZSBzdGF0aWMgX2V4cGxvc2lvbkxhYmVscyA9IFtcIkVYUExPU0lPTlwiLCBcIkRJQ0UgUk9MTFwiLCBcIkRJU1RBTkNFXCIsIFwiTU9SVEFMIFdPVU5EU1wiXTtcbiAgICBwcml2YXRlIF9leHBsb3Npb25MYWJlbFdpZHRoTm9ybWFsaXplZCA9IFswLjMsIDAuMTUsIDAuMTUsIDAuMTVdO1xuXG4gICAgcHJpdmF0ZSBzdGF0aWMgX3RyYWNrZXJMYWJlbHMgPSBbXCJXT1VORCBUUkFDS1wiLCBcIlJFTUFJTklORyBXXCIsIFwiQVRUUklCVVRFXCIsIFwiQVRUUklCVVRFXCIsIFwiQVRUUklCVVRFXCJdO1xuICAgIHByaXZhdGUgX3RyYWNrZXJMYWJlbFdpZHRoID0gWzAuMywgMC4yLCAwLjE1LCAwLjE1LCAwLjE1XTtcblxuICAgIHByb3RlY3RlZCByZW5kZXJVbml0KHVuaXQ6IFVuaXQsIGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQsIHhPZmZzZXQ6IG51bWJlciwgeU9mZnNldDogbnVtYmVyKTogbnVtYmVyW10ge1xuXG4gICAgICAgIGxldCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgaWYgKCFjdHgpIHtcbiAgICAgICAgICAgIHJldHVybiBbMCwgMF07XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9jdXJyZW50WCA9IHhPZmZzZXQgKyBSZW5kZXJlcjQway5fbWFyZ2luO1xuICAgICAgICB0aGlzLl9jdXJyZW50WSA9IHlPZmZzZXQgKyBSZW5kZXJlcjQway5fbWFyZ2luO1xuICAgICAgICB0aGlzLl9tYXhXaWR0aCA9IGNhbnZhcy53aWR0aCAtIHRoaXMuX2N1cnJlbnRYO1xuICAgICAgICB0aGlzLl9tYXhIZWlnaHQgPSBNYXRoLm1heCgwLCBjYW52YXMuaGVpZ2h0IC0gdGhpcy5fY3VycmVudFkpO1xuXG4gICAgICAgIHRoaXMucmVuZGVySGVhZGVyKHVuaXQsIGN0eCk7XG5cbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IFJlbmRlcmVyNDBrLl9ibGFja0NvbG9yO1xuXG4gICAgICAgIGxldCB3ZWFwb25zOiBXZWFwb25bXSA9IFtdO1xuICAgICAgICBsZXQgc3BlbGxzOiBQc3ljaGljUG93ZXJbXSA9IFtdO1xuICAgICAgICBsZXQgZXhwbG9zaW9uczogRXhwbG9zaW9uW10gPSBbXTtcbiAgICAgICAgbGV0IHBzeWtlcnM6IFBzeWtlcltdID0gW107XG4gICAgICAgIGxldCBtb2RlbHM6IE1vZGVsW10gPSBbXTtcbiAgICAgICAgY29uc3QgdW5pdExhYmVsV2lkdGhzOiBudW1iZXJbXSA9IFtdO1xuICAgICAgICB0aGlzLl91bml0TGFiZWxXaWR0aHNOb3JtYWxpemVkLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICB1bml0TGFiZWxXaWR0aHMucHVzaChlbGVtZW50ICogdGhpcy5fbWF4V2lkdGgpO1xuICAgICAgICB9KTtcblxuICAgICAgICBmb3IgKHZhciBtb2RlbCBvZiB1bml0Ll9tb2RlbHMpIHtcbiAgICAgICAgICAgIG1vZGVscy5wdXNoKG1vZGVsKTtcbiAgICAgICAgICAgIGZvciAobGV0IHdlYXBvbiBvZiBtb2RlbC5fd2VhcG9ucykge1xuICAgICAgICAgICAgICAgIHdlYXBvbnMucHVzaCh3ZWFwb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChsZXQgc3BlbGwgb2YgbW9kZWwuX3BzeWNoaWNQb3dlcnMpIHtcbiAgICAgICAgICAgICAgICBzcGVsbHMucHVzaChzcGVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGxldCBleHBsIG9mIG1vZGVsLl9leHBsb3Npb25zKSB7XG4gICAgICAgICAgICAgICAgZXhwbG9zaW9ucy5wdXNoKGV4cGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1vZGVsLl9wc3lrZXIpIHtcbiAgICAgICAgICAgICAgICBwc3lrZXJzLnB1c2gobW9kZWwuX3BzeWtlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVbmlxdWUgbGlzdCBvZiBtb2RlbHNcbiAgICAgICAgY29uc3QgdW5pcXVlTW9kZWxzOiBNb2RlbFtdID0gW107XG4gICAgICAgIGNvbnN0IHNjcmF0aE1vZGVsczogTWFwPHN0cmluZywgTW9kZWw+ID0gbmV3IE1hcCgpO1xuICAgICAgICBmb3IgKGNvbnN0IG0gb2YgbW9kZWxzKSB7XG4gICAgICAgICAgICBpZiAoIXNjcmF0aE1vZGVscy5oYXMobS5fbmFtZSkpIHtcbiAgICAgICAgICAgICAgICBzY3JhdGhNb2RlbHMuc2V0KG0uX25hbWUsIG0pO1xuICAgICAgICAgICAgICAgIHVuaXF1ZU1vZGVscy5wdXNoKG0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5yZW5kZXJUYWJsZUhlYWRlcihjdHgsIFJlbmRlcmVyNDBrLl91bml0TGFiZWxzLCB1bml0TGFiZWxXaWR0aHMpO1xuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIGZvciAodmFyIG1vZGVsIG9mIHVuaXF1ZU1vZGVscykge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJNb2RlbChjdHgsIG1vZGVsLCB1bml0TGFiZWxXaWR0aHMsIGkgJSAyKTtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVuaXF1ZSBsaXN0IG9mIHdlYXBvbnNcbiAgICAgICAgY29uc3QgdW5pcXVlV2VhcG9uczogV2VhcG9uW10gPSBbXTtcbiAgICAgICAgY29uc3Qgc2NyYXRjaE1hcDogTWFwPHN0cmluZywgV2VhcG9uPiA9IG5ldyBNYXAoKTtcbiAgICAgICAgZm9yIChjb25zdCB3IG9mIHdlYXBvbnMpIHtcbiAgICAgICAgICAgIGlmICghc2NyYXRjaE1hcC5oYXMody5fbmFtZSkpIHtcbiAgICAgICAgICAgICAgICBzY3JhdGNoTWFwLnNldCh3Ll9uYW1lLCB3KTtcbiAgICAgICAgICAgICAgICB1bmlxdWVXZWFwb25zLnB1c2godyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodW5pcXVlV2VhcG9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCB3ZWFwb25MYWJlbFdpZHRoczogbnVtYmVyW10gPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX3dlYXBvbkxhYmVsV2lkdGhOb3JtYWxpemVkLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICAgICAgd2VhcG9uTGFiZWxXaWR0aHMucHVzaChlbGVtZW50ICogdGhpcy5fbWF4V2lkdGgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckxpbmUoY3R4KTtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyVGFibGVIZWFkZXIoY3R4LCBSZW5kZXJlcjQway5fd2VhcG9uTGFiZWxzLCB3ZWFwb25MYWJlbFdpZHRocyk7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcldlYXBvbnMoY3R4LCB1bmlxdWVXZWFwb25zLCB3ZWFwb25MYWJlbFdpZHRocyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3BlbGxzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHNwZWxsTGFiZWxXaWR0aHM6IG51bWJlcltdID0gW107XG4gICAgICAgICAgICB0aGlzLl9zcGVsbExhYmVsV2lkdGhOb3JtYWxpemVkLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICAgICAgc3BlbGxMYWJlbFdpZHRocy5wdXNoKGVsZW1lbnQgKiB0aGlzLl9tYXhXaWR0aCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyTGluZShjdHgpO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJUYWJsZUhlYWRlcihjdHgsIFJlbmRlcmVyNDBrLl9zcGVsbExhYmVscywgc3BlbGxMYWJlbFdpZHRocyk7XG4gICAgICAgICAgICB0aGlzLnJlbmRlclNwZWxscyhjdHgsIHNwZWxscywgc3BlbGxMYWJlbFdpZHRocyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodW5pdC5fYWJpbGl0aWVzLnNpemUgPiAwKSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckxpbmUoY3R4KTtcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRZICs9IDI7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckFiaWxpdGllcyhjdHgsIHVuaXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBzeWtlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJMaW5lKGN0eCk7XG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50WSArPSAyO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJQc3lrZXJzKGN0eCwgcHN5a2Vycyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodW5pdC5fcnVsZXMuc2l6ZSA+IDApIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyTGluZShjdHgpO1xuICAgICAgICAgICAgdGhpcy5fY3VycmVudFkgKz0gMjtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyUnVsZXMoY3R4LCB1bml0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1bml0Ll9mYWN0aW9ucy5zaXplID4gMCkge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJMaW5lKGN0eCk7XG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50WSArPSAyO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJGYWN0aW9ucyhjdHgsIHVuaXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVuaXQuX2tleXdvcmRzLnNpemUgPiAwKSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckxpbmUoY3R4KTtcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRZICs9IDI7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcktleXdvcmRzKGN0eCwgdW5pdCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodW5pdC5fbW9kZWxzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyTGluZShjdHgpO1xuICAgICAgICAgICAgdGhpcy5fY3VycmVudFkgKz0gMjtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyTW9kZWxMaXN0KGN0eCwgdW5pcXVlTW9kZWxzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1bml0Ll93b3VuZFRyYWNrZXIubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5fY3VycmVudFkgKz0gMjtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyTGluZShjdHgpO1xuICAgICAgICAgICAgY29uc3QgdHJhY2tlckxhYmVsV2lkdGhzOiBudW1iZXJbXSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fdHJhY2tlckxhYmVsV2lkdGguZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgICAgICAgICAgICB0cmFja2VyTGFiZWxXaWR0aHMucHVzaChlbGVtZW50ICogdGhpcy5fbWF4V2lkdGgpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGxldCBsYWJlbHMgPSBSZW5kZXJlcjQway5fdHJhY2tlckxhYmVscztcblxuICAgICAgICAgICAgLy8gRGV0ZXJtaW5lIHdvdW5kIHRhYmxlIGhlYWRlcnMuXG4gICAgICAgICAgICBpZiAodW5pdC5fd291bmRUcmFja2VyLmxlbmd0aCA9PSA0KSB7XG4gICAgICAgICAgICAgICAgLy8gVXNlIGZpcnN0IGVudHJ5IGluIHRhYmxlIGFzIGxhYmVscy5cbiAgICAgICAgICAgICAgICBsZXQgaSA9IDE7XG4gICAgICAgICAgICAgICAgLy8gVE9ETzogR3Jycmggc29tZSB0YWJsZXMgcHV0IHRoZSBjb2x1bW4gbGFiZWxzIGF0IHRoZSBlbmQuICBEZWFsIHdpdGggdGhpcy5cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBrZXkgb2YgdW5pdC5fd291bmRUcmFja2VyWzBdLl90YWJsZS52YWx1ZXMoKSkge1xuICAgICAgICAgICAgICAgICAgICBsYWJlbHNbaSsrXSA9IGtleTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh1bml0Ll93b3VuZFRyYWNrZXIubGVuZ3RoID09IDMpIHtcbiAgICAgICAgICAgICAgICAvLyBVc2Uga2V5cyBhcyBsYWJlbHMuXG4gICAgICAgICAgICAgICAgbGV0IGkgPSAxO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGtleSBvZiB1bml0Ll93b3VuZFRyYWNrZXJbMF0uX3RhYmxlLmtleXMoKSkge1xuICAgICAgICAgICAgICAgICAgICBsYWJlbHNbaSsrXSA9IGtleTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnJlbmRlclRhYmxlSGVhZGVyKGN0eCwgbGFiZWxzLCB0cmFja2VyTGFiZWxXaWR0aHMpO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJXb3VuZFRhYmxlKGN0eCwgdW5pdCwgdHJhY2tlckxhYmVsV2lkdGhzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChleHBsb3Npb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRZICs9IDI7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckxpbmUoY3R4KTtcbiAgICAgICAgICAgIGNvbnN0IGV4cGxMYWJlbFdpZHRoczogbnVtYmVyW10gPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX2V4cGxvc2lvbkxhYmVsV2lkdGhOb3JtYWxpemVkLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICAgICAgZXhwbExhYmVsV2lkdGhzLnB1c2goZWxlbWVudCAqIHRoaXMuX21heFdpZHRoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJUYWJsZUhlYWRlcihjdHgsIFJlbmRlcmVyNDBrLl9leHBsb3Npb25MYWJlbHMsIGV4cGxMYWJlbFdpZHRocyk7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckV4cGxvc2lvbihjdHgsIGV4cGxvc2lvbnMsIGV4cGxMYWJlbFdpZHRocyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fc2hvd1dvdW5kQm94ZXMpIHtcbiAgICAgICAgICAgIC8vIHdvdW5kIHRyYWNrZXIgYm94ZXNcbiAgICAgICAgICAgIGxldCBoYXNUcmFja3MgPSBmYWxzZTtcbiAgICAgICAgICAgIGZvciAobGV0IG1vZGVsIG9mIHVuaXQuX21vZGVscykge1xuICAgICAgICAgICAgICAgIGlmIChtb2RlbC5fd291bmRzID4gMikgeyBoYXNUcmFja3MgPSB0cnVlOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaGFzVHJhY2tzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJMaW5lKGN0eCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudFkgKz0gNTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcldvdW5kQm94ZXMoY3R4LCB1bml0Ll9tb2RlbHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2N1cnJlbnRZICs9IDI7XG5cbiAgICAgICAgY29uc3QgdG90YWxIZWlnaHQgPSB0aGlzLl9jdXJyZW50WSAtICh5T2Zmc2V0ICsgUmVuZGVyZXI0MGsuX21hcmdpbik7XG4gICAgICAgIGNvbnN0IHRvdGFsV2lkdGggPSB0aGlzLl9tYXhXaWR0aDtcblxuICAgICAgICB0aGlzLnJlbmRlckJvcmRlcihjdHgsIHRoaXMuX2N1cnJlbnRYLCB5T2Zmc2V0ICsgUmVuZGVyZXI0MGsuX21hcmdpbiwgdG90YWxXaWR0aCwgdG90YWxIZWlnaHQpO1xuICAgICAgICB0aGlzLnJlbmRlcldhdGVybWFyayhjdHgpO1xuXG4gICAgICAgIHJldHVybiBbdGhpcy5fbWF4V2lkdGgsIHRoaXMuX2N1cnJlbnRZXTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlckhlYWRlcih1bml0OiBVbml0LCBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCk6IHZvaWQge1xuXG4gICAgICAgIGN0eC5nbG9iYWxBbHBoYSA9IDE7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBSZW5kZXJlcjQway5fYmxhY2tDb2xvcjtcblxuICAgICAgICBjb25zdCB4U3RhcnQgPSB0aGlzLl9jdXJyZW50WDtcbiAgICAgICAgY29uc3QgeEVuZCA9IHRoaXMuX2N1cnJlbnRYICsgdGhpcy5fbWF4V2lkdGg7XG4gICAgICAgIGNvbnN0IHlTdGFydCA9IHRoaXMuX2N1cnJlbnRZO1xuICAgICAgICBjb25zdCB0aXRsZUhlaWdodCA9IDM2O1xuICAgICAgICBjb25zdCB5RW5kID0geVN0YXJ0ICsgdGl0bGVIZWlnaHQ7XG5cbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBjdHgubW92ZVRvKHhTdGFydCwgeVN0YXJ0ICsgUmVuZGVyZXI0MGsuX2JldmVsU2l6ZSk7XG4gICAgICAgIGN0eC5saW5lVG8oeFN0YXJ0LCB5RW5kKTtcbiAgICAgICAgY3R4LmxpbmVUbyh4RW5kLCB5RW5kKTtcbiAgICAgICAgY3R4LmxpbmVUbyh4RW5kLCB5U3RhcnQgKyBSZW5kZXJlcjQway5fYmV2ZWxTaXplKTtcbiAgICAgICAgY3R4LmxpbmVUbyh4RW5kIC0gUmVuZGVyZXI0MGsuX2JldmVsU2l6ZSwgeVN0YXJ0KTtcbiAgICAgICAgY3R4LmxpbmVUbyh4U3RhcnQgKyBSZW5kZXJlcjQway5fYmV2ZWxTaXplLCB5U3RhcnQpO1xuICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgIGN0eC5maWxsKCk7XG5cbiAgICAgICAgbGV0IGltZ1ggPSB4U3RhcnQgKyA2O1xuXG4gICAgICAgIGlmICh0aGlzLl9vY3RhZ29uKSB7XG5cbiAgICAgICAgICAgIC8vIFVuaXQgYmF0dGxlZmllbGQgcm9sZSBpY29uXG4gICAgICAgICAgICBjdHguZHJhd0ltYWdlKHRoaXMuX29jdGFnb24sIGltZ1gsIHlTdGFydCArIDIsIDMyLCAzMik7XG4gICAgICAgICAgICBjb25zdCByb2xlSW1nID0gdGhpcy5fcm9sZXMuZ2V0KHVuaXQuX3JvbGUpO1xuICAgICAgICAgICAgaWYgKHJvbGVJbWcpIHtcbiAgICAgICAgICAgICAgICBjdHguZHJhd0ltYWdlKHJvbGVJbWcsIGltZ1ggKyA0LCB5U3RhcnQgKyAyICsgNCwgMjQsIDI0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9ICd3aGl0ZSc7XG4gICAgICAgICAgICBjdHguZm9udCA9IFwiMThweCBzZXJpZlwiO1xuICAgICAgICAgICAgLy8gUG93ZXIgbGV2ZWwgaWNvblxuICAgICAgICAgICAgaW1nWCArPSAzNDtcbiAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UodGhpcy5fb2N0YWdvbiwgaW1nWCwgeVN0YXJ0ICsgMiwgMzIsIDMyKTtcbiAgICAgICAgICAgIFJlbmRlclRleHQoY3R4LCB1bml0Ll9wb3dlckxldmVsLnRvU3RyaW5nKCksIGltZ1gsIHlTdGFydCArIDIsIDMyLCAzMiwgSnVzdGlmaWNhdGlvbi5DZW50ZXIpO1xuXG4gICAgICAgICAgICAvLyBQb2ludHMgaWNvblxuICAgICAgICAgICAgaW1nWCArPSAzNDtcbiAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UodGhpcy5fb2N0YWdvbiwgaW1nWCwgeVN0YXJ0ICsgMiwgMzIsIDMyKTtcbiAgICAgICAgICAgIFJlbmRlclRleHQoY3R4LCB1bml0Ll9wb2ludHMudG9TdHJpbmcoKSwgaW1nWCwgeVN0YXJ0ICsgMiwgMzIsIDMyLCBKdXN0aWZpY2F0aW9uLkNlbnRlcik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB1bml0IG5hbWVcbiAgICAgICAgbGV0IGl0ZXJzOiBudW1iZXIgPSAwO1xuICAgICAgICBsZXQgdGl0bGVfc2l6ZSA9IDI4O1xuICAgICAgICBjb25zdCB0aXRsZV94ID0gaW1nWCArIDY7XG4gICAgICAgIGN0eC5mb250ID0gdGl0bGVfc2l6ZSArICdweCAnICsgJ2JvbGQgc2VyaWYnO1xuICAgICAgICBjb25zdCB1bml0TmFtZSA9IHVuaXQuX25hbWUudG9Mb2NhbGVVcHBlckNhc2UoKTtcbiAgICAgICAgbGV0IGNoZWNrID0gY3R4Lm1lYXN1cmVUZXh0KHVuaXROYW1lKTtcbiAgICAgICAgY29uc3QgbWF4V2lkdGggPSB0aGlzLl9tYXhXaWR0aCAtIHRpdGxlX3g7XG4gICAgICAgIHdoaWxlIChpdGVycyA8IDYgJiYgY2hlY2sud2lkdGggPiBtYXhXaWR0aCkge1xuICAgICAgICAgICAgaXRlcnMgKz0gMTtcbiAgICAgICAgICAgIHRpdGxlX3NpemUgLT0gMjtcbiAgICAgICAgICAgIGN0eC5mb250ID0gdGl0bGVfc2l6ZSArICdweCAnICsgJ2JvbGQgc2VyaWYnO1xuICAgICAgICAgICAgY2hlY2sgPSBjdHgubWVhc3VyZVRleHQodW5pdE5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSAnd2hpdGUnO1xuICAgICAgICBjdHgudGV4dEJhc2VsaW5lID0gJ3RvcCc7IC8vIE1ha2UgdGhlIHRleHQgb3JpZ2luIGF0IHRoZSB1cHBlci1sZWZ0IHRvIG1ha2UgcG9zaXRpb25pbmcgZWFzaWVyXG4gICAgICAgIFJlbmRlclRleHQoY3R4LCB1bml0TmFtZSwgdGl0bGVfeCwgeVN0YXJ0LCBtYXhXaWR0aCwgdGl0bGVIZWlnaHQsIEp1c3RpZmljYXRpb24uQ2VudGVyKTtcblxuICAgICAgICB0aGlzLl9jdXJyZW50WSArPSB0aXRsZUhlaWdodDtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlclBzeWtlcnMoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIHBzeWtlcnM6IFBzeWtlcltdKTogdm9pZCB7XG4gICAgICAgIGN0eC5mb250ID0gJzE0cHggc2Fucy1zZXJpZic7XG4gICAgICAgIFJlbmRlclRleHQoY3R4LCBcIlBTWUtFUlNcIiwgdGhpcy5fY3VycmVudFggKyAyMCwgdGhpcy5fY3VycmVudFksIDEwMCwgMTYsIEp1c3RpZmljYXRpb24uTGVmdCk7XG5cbiAgICAgICAgY3R4LmZvbnQgPSAnMTJweCBzZXJpZic7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRZICs9IDI7XG4gICAgICAgIGZvciAobGV0IHBzeWtlciBvZiBwc3lrZXJzKSB7XG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50WSA9IFJlbmRlclBhcmFncmFwaChjdHgsIFwiQ0FTVDogXCIgKyBwc3lrZXIuX2Nhc3QsIHRoaXMuX2N1cnJlbnRYICsgdGhpcy5fZGVzY3JpcHRpb25TdGFydFgsIHRoaXMuX2N1cnJlbnRZLCB0aGlzLl9kZXNjcmlwdGlvbldpZHRoKTtcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRZICs9IDI7XG5cbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRZID0gUmVuZGVyUGFyYWdyYXBoKGN0eCwgXCJERU5ZOiBcIiArIHBzeWtlci5fZGVueSwgdGhpcy5fY3VycmVudFggKyB0aGlzLl9kZXNjcmlwdGlvblN0YXJ0WCwgdGhpcy5fY3VycmVudFksIHRoaXMuX2Rlc2NyaXB0aW9uV2lkdGgpO1xuICAgICAgICAgICAgdGhpcy5fY3VycmVudFkgKz0gMjtcblxuICAgICAgICAgICAgdGhpcy5fY3VycmVudFkgPSBSZW5kZXJQYXJhZ3JhcGgoY3R4LCBcIlBPV0VSUyBLTk9XTjogXCIgKyBwc3lrZXIuX3Bvd2VycywgdGhpcy5fY3VycmVudFggKyB0aGlzLl9kZXNjcmlwdGlvblN0YXJ0WCwgdGhpcy5fY3VycmVudFksIHRoaXMuX2Rlc2NyaXB0aW9uV2lkdGgpO1xuICAgICAgICAgICAgdGhpcy5fY3VycmVudFkgKz0gMjtcblxuICAgICAgICAgICAgaWYgKHBzeWtlci5fb3RoZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50WSA9IFJlbmRlclBhcmFncmFwaChjdHgsIFwiT1RIRVI6IFwiICsgcHN5a2VyLl9vdGhlciwgdGhpcy5fY3VycmVudFggKyB0aGlzLl9kZXNjcmlwdGlvblN0YXJ0WCwgdGhpcy5fY3VycmVudFksIHRoaXMuX2Rlc2NyaXB0aW9uV2lkdGgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRZICs9IDI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuIiwiLypcbiAgICBDb3B5cmlnaHQgMjAyMCBSaWNrIFdleXJhdWNoLFxuXG4gICAgUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UgXG4gICAgd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZCwgcHJvdmlkZWQgdGhhdCB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZVxuICAgIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIGFwcGVhciBpbiBhbGwgY29waWVzLlxuXG4gICAgVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSCBcbiAgICBSRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIFxuICAgIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULCBcbiAgICBJTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST00gTE9TUyBcbiAgICBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1IgT1RIRVIgXG4gICAgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUiBQRVJGT1JNQU5DRSBcbiAgICBPRiBUSElTIFNPRlRXQVJFLlxuKi9cblxuaW1wb3J0IHsgQW9TVW5pdCwgQW9TVW5pdFJvbGUsIEFvU1VuaXRSb2xlVG9TdHJpbmcsIEFvU1dlYXBvbiwgUm9zdGVyQW9TLCBBb1NTcGVsbCwgQW9TUHJheWVyIH0gZnJvbSBcIi4vcm9zdGVyQW9TXCI7XG5pbXBvcnQgeyBSZW5kZXJlciwgSnVzdGlmaWNhdGlvbiwgUmVuZGVyVGV4dCwgUmVuZGVyUGFyYWdyYXBofSBmcm9tIFwiLi9yZW5kZXJlclwiO1xuXG5leHBvcnQgY2xhc3MgUmVuZGVyZXJBb1MgaW1wbGVtZW50cyBSZW5kZXJlciB7XG5cbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IF9yZXM6IG51bWJlciA9IDE0NDtcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IF9tYXJnaW46IG51bWJlciA9IDA7XG5cbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBfYmV2ZWxTaXplID0gMTU7XG5cbiAgICBwcml2YXRlIF9zdGF0c1doZWVsOiBIVE1MSW1hZ2VFbGVtZW50IHwgbnVsbCA9IG51bGw7XG5cbiAgICBwcml2YXRlIF9yb3N0ZXI6IFJvc3RlckFvU3xudWxsID0gbnVsbDtcblxuICAgIHByaXZhdGUgX2N1cnJlbnRYOiBudW1iZXIgPSAwO1xuICAgIHByaXZhdGUgX2N1cnJlbnRZOiBudW1iZXIgPSAwO1xuICAgIHByaXZhdGUgX21heFdpZHRoOiBudW1iZXIgPSAwO1xuICAgIHByaXZhdGUgX21heEhlaWdodDogbnVtYmVyID0gMDtcblxuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IF9ibGFja0NvbG9yID0gJyMxZDI3MmEnO1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IF9ncmV5MSA9ICcjYjNiYmI1JztcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBfZ3JleUxpZ2h0ID0gJyNkZGUxZGYnO1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IF9maWxsQ29sb3IgPSAnI2Y2ZjZmNic7XG5cbiAgICBjb25zdHJ1Y3Rvcihyb3N0ZXI6IFJvc3RlckFvUykge1xuICAgICAgICB0aGlzLl9yb3N0ZXIgPSByb3N0ZXI7XG5cbiAgICAgICAgdGhpcy5fc3RhdHNXaGVlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhb3Nfc3RhdHMnKSBhcyBIVE1MSW1hZ2VFbGVtZW50O1xuICAgIH1cblxuICAgIHJlbmRlcih0aXRsZTogSFRNTEVsZW1lbnR8bnVsbCwgbGlzdDogSFRNTEVsZW1lbnR8bnVsbCwgZm9yY2VzOiBIVE1MRWxlbWVudHxudWxsKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLl9yb3N0ZXIgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRpdGxlKSB7XG4gICAgICAgICAgICB0aXRsZS5pbm5lckhUTUwgPSAnPGgzPicgKyB0aGlzLl9yb3N0ZXIuX25hbWUgKyAnICgnICsgdGhpcy5fcm9zdGVyLl9wb2ludHMgKyAnIHB0cywgJyArIHRoaXMuX3Jvc3Rlci5fY29tbWFuZFBvaW50cyArICcgQ1ApPC9oMz4nO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgZm9yY2Ugb2YgdGhpcy5fcm9zdGVyLl9mb3JjZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGZvcmNlVGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIGlmIChmb3JjZVRpdGxlKSB7XG4gICAgICAgICAgICAgIGZvcmNlVGl0bGUuaW5uZXJIVE1MID0gJzxwPicgKyBmb3JjZS5fY2F0YWxvZyArICcgJyArIGZvcmNlLl9uYW1lICsgJzwvcD4nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxpc3QpXG4gICAgICAgICAgICAgICAgbGlzdC5hcHBlbmRDaGlsZChmb3JjZVRpdGxlKTtcblxuICAgICAgICAgICAgY29uc3QgdGFibGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0YWJsZScpO1xuICAgICAgICAgICAgdGFibGUuY2xhc3NMaXN0LmFkZCgndGFibGUnKTtcbiAgICAgICAgICAgIHRhYmxlLmNsYXNzTGlzdC5hZGQoJ3RhYmxlLXNtJyk7XG4gICAgICAgICAgICB0YWJsZS5jbGFzc0xpc3QuYWRkKCd0YWJsZS1zdHJpcGVkJyk7XG4gICAgICAgICAgICBjb25zdCB0aGVhZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RoZWFkJyk7XG4gICAgICAgICAgICB0YWJsZS5hcHBlbmRDaGlsZCh0aGVhZCk7XG4gICAgICAgICAgICB0aGVhZC5jbGFzc0xpc3QuYWRkKCd0aGVhZC1saWdodCcpO1xuICAgICAgICAgICAgY29uc3QgdHIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpO1xuICAgICAgICAgICAgdGhlYWQuYXBwZW5kQ2hpbGQodHIpO1xuICAgICAgICAgICAgY29uc3QgaGVhZGVySW5mbyA9IFt7IG5hbWU6IFwiTkFNRVwiLCB3OiAnMzUlJ30sIHtuYW1lOlwiUk9MRVwiLCB3OicyNSUnfSwge25hbWU6XCJNT0RFTFNcIiwgdzonMjUlJ30sIHtuYW1lOlwiUE9JTlRTXCIsIHc6JzE1JSd9XTtcbiAgICAgICAgICAgIGhlYWRlckluZm8uZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgICAgICAgICAgbGV0IHRoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGgnKTtcbiAgICAgICAgICAgICAgdGguc2NvcGUgPSBcImNvbFwiO1xuICAgICAgICAgICAgICB0aC5pbm5lckhUTUwgPSBlbGVtZW50Lm5hbWU7XG4gICAgICAgICAgICAgIHRoLnN0eWxlLndpZHRoID0gZWxlbWVudC53O1xuICAgICAgICAgICAgICB0ci5hcHBlbmRDaGlsZCh0aCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGZvcmNlVGl0bGUuYXBwZW5kQ2hpbGQodGFibGUpO1xuXG4gICAgICAgICAgICBsZXQgYm9keSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3Rib2R5Jyk7XG4gICAgICAgICAgICB0YWJsZS5hcHBlbmRDaGlsZChib2R5KTtcbiAgICAgICAgICAgIGZvciAobGV0IHVuaXQgb2YgZm9yY2UuX3VuaXRzKSB7XG4gICAgICAgICAgICAgIGxldCB0ciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyk7XG4gICAgICAgICAgICAgIGxldCB1bmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG4gICAgICAgICAgICAgIHVuYW1lLmlubmVySFRNTCA9IHVuaXQuX25hbWU7XG4gICAgICAgICAgICAgIGxldCByb2xlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcbiAgICAgICAgICAgICAgcm9sZS5pbm5lckhUTUwgPSBBb1NVbml0Um9sZVRvU3RyaW5nW3VuaXQuX3JvbGVdO1xuICAgICAgICAgICAgICBsZXQgbW9kZWxzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcbiAgICAgICAgICAgICAgbW9kZWxzLmlubmVySFRNTCA9IFwiXCI7XG4gICAgICAgICAgICAgIGxldCBwdHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xuICAgICAgICAgICAgICBwdHMuaW5uZXJIVE1MID0gdW5pdC5fcG9pbnRzLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgIHRyLmFwcGVuZENoaWxkKHVuYW1lKTtcbiAgICAgICAgICAgICAgdHIuYXBwZW5kQ2hpbGQocm9sZSk7XG4gICAgICAgICAgICAgIHRyLmFwcGVuZENoaWxkKG1vZGVscyk7XG4gICAgICAgICAgICAgIHRyLmFwcGVuZENoaWxkKHB0cyk7XG4gICAgICAgICAgICAgIGJvZHkuYXBwZW5kQ2hpbGQodHIpOyAgICBcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IGFsbGVnaWFuY2VBYmlsaXRpZXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIGlmIChmb3JjZS5fYWxsZWdpYW5jZS5fY29tbWFuZEFiaWxpdGllcy5zaXplID4gMCkge1xuICAgICAgICAgICAgICAgIGxldCBhbGxlZ2lhbmNlSGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDMnKTtcbiAgICAgICAgICAgICAgICBhbGxlZ2lhbmNlQWJpbGl0aWVzLmFwcGVuZENoaWxkKGFsbGVnaWFuY2VIZWFkZXIpO1xuICAgICAgICAgICAgICAgIGFsbGVnaWFuY2VIZWFkZXIudGV4dENvbnRlbnQgPSBmb3JjZS5fYWxsZWdpYW5jZS5fbmFtZSArIFwiIEFsbGVnaWFuY2UgQWJpbGl0aWVzXCI7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgY29tbWFuZCBvZiBmb3JjZS5fYWxsZWdpYW5jZS5fY29tbWFuZEFiaWxpdGllcykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBuYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDQnKTtcbiAgICAgICAgICAgICAgICAgICAgbmFtZS50ZXh0Q29udGVudCA9IGNvbW1hbmRbMF07XG4gICAgICAgICAgICAgICAgICAgIGxldCBkZXNjID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgICAgICAgICAgICAgICBkZXNjLnRleHRDb250ZW50ID0gY29tbWFuZFsxXTtcbiAgICAgICAgICAgICAgICAgICAgcm93LmFwcGVuZENoaWxkKG5hbWUpO1xuICAgICAgICAgICAgICAgICAgICByb3cuYXBwZW5kQ2hpbGQoZGVzYyk7XG4gICAgICAgICAgICAgICAgICAgIGFsbGVnaWFuY2VBYmlsaXRpZXMuYXBwZW5kQ2hpbGQocm93KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChmb3JjZS5fYWxsZWdpYW5jZS5fYmF0dGxlVHJhaXRzLnNpemUgPiAwKSB7XG4gICAgICAgICAgICAgICAgbGV0IHRyYWl0SGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDMnKTtcbiAgICAgICAgICAgICAgICBhbGxlZ2lhbmNlQWJpbGl0aWVzLmFwcGVuZENoaWxkKHRyYWl0SGVhZGVyKTtcbiAgICAgICAgICAgICAgICB0cmFpdEhlYWRlci50ZXh0Q29udGVudCA9IGZvcmNlLl9hbGxlZ2lhbmNlLl9uYW1lICsgXCIgQWxsZWdpYW5jZSBCYXR0bGUgVHJhaXRzXCI7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgdHJhaXQgb2YgZm9yY2UuX2FsbGVnaWFuY2UuX2JhdHRsZVRyYWl0cykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBuYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDQnKTtcbiAgICAgICAgICAgICAgICAgICAgbmFtZS50ZXh0Q29udGVudCA9IHRyYWl0WzBdO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZGVzYyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICAgICAgICAgICAgICAgICAgZGVzYy50ZXh0Q29udGVudCA9IHRyYWl0WzFdO1xuICAgICAgICAgICAgICAgICAgICByb3cuYXBwZW5kQ2hpbGQobmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIHJvdy5hcHBlbmRDaGlsZChkZXNjKTtcbiAgICAgICAgICAgICAgICAgICAgYWxsZWdpYW5jZUFiaWxpdGllcy5hcHBlbmRDaGlsZChyb3cpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGZvcmNlcylcbiAgICAgICAgICAgICAgICBmb3JjZXMuYXBwZW5kQ2hpbGQoYWxsZWdpYW5jZUFiaWxpdGllcyk7XG5cbiAgICAgICAgICAgIGZvciAobGV0IHVuaXQgb2YgZm9yY2UuX3VuaXRzKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpIGFzIEhUTUxDYW52YXNFbGVtZW50O1xuICAgICAgICAgICAgICAgIGNhbnZhcy53aWR0aCA9IFJlbmRlcmVyQW9TLl9yZXMgKiA1LjU7XG4gICAgICAgICAgICAgICAgY2FudmFzLmhlaWdodCA9IFJlbmRlcmVyQW9TLl9yZXMgKiA4LjU7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY29uc3QgZGltcyA9IHRoaXMucmVuZGVyVW5pdCh1bml0LCBjYW52YXMsIDAsIDApO1xuICAgIFxuICAgICAgICAgICAgICAgIGNvbnN0IGJvcmRlciA9IDI1O1xuICAgICAgICAgICAgICAgIGxldCBmaW5hbENhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpIGFzIEhUTUxDYW52YXNFbGVtZW50O1xuICAgICAgICAgICAgICAgIGZpbmFsQ2FudmFzLndpZHRoID0gZGltc1swXSArIGJvcmRlciAqIDI7XG4gICAgICAgICAgICAgICAgZmluYWxDYW52YXMuaGVpZ2h0ID0gZGltc1sxXSArIGJvcmRlciAqIDI7XG4gICAgICAgICAgICAgICAgbGV0IGZpbmFsQ3R4ID0gZmluYWxDYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgICAgICAgICBmaW5hbEN0eD8uZHJhd0ltYWdlKGNhbnZhcywgYm9yZGVyLCBib3JkZXIpO1xuICAgICAgICAgICAgICAgIGlmIChmb3JjZXMpIFxuICAgICAgICAgICAgICAgICAgZm9yY2VzLmFwcGVuZENoaWxkKGZpbmFsQ2FudmFzKTtcbiAgICAgICAgICAgIH0gICAgXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgcmVuZGVyVW5pdCh1bml0OiBBb1NVbml0LCBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50LCB4T2Zmc2V0OiBudW1iZXIsIHlPZmZzZXQ6IG51bWJlcik6IG51bWJlcltdIHtcblxuICAgICAgICBsZXQgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICAgIGlmICghY3R4KSB7XG4gICAgICAgICAgICByZXR1cm4gWzAsIDBdO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fY3VycmVudFggPSB4T2Zmc2V0ICsgUmVuZGVyZXJBb1MuX21hcmdpbjtcbiAgICAgICAgdGhpcy5fY3VycmVudFkgPSB5T2Zmc2V0ICsgUmVuZGVyZXJBb1MuX21hcmdpbjtcbiAgICAgICAgdGhpcy5fbWF4V2lkdGggPSBjYW52YXMud2lkdGggLSB0aGlzLl9jdXJyZW50WDtcbiAgICAgICAgdGhpcy5fbWF4SGVpZ2h0ID0gTWF0aC5tYXgoMCwgY2FudmFzLmhlaWdodCAtIHRoaXMuX2N1cnJlbnRZKTtcblxuICAgICAgICB0aGlzLnJlbmRlckhlYWRlcih1bml0LCBjdHgpO1xuXG4gICAgICAgIGNvbnN0IHVuaXRMYWJlbFdpZHRoczogbnVtYmVyW10gPSBbXTtcbiAgICAgICAgdGhpcy5fdW5pdExhYmVsV2lkdGhzTm9ybWFsaXplZC5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgICAgICAgdW5pdExhYmVsV2lkdGhzLnB1c2goZWxlbWVudCAqIHRoaXMuX21heFdpZHRoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucmVuZGVyVGFibGVIZWFkZXIoY3R4LCBSZW5kZXJlckFvUy5fdW5pdExhYmVscywgdW5pdExhYmVsV2lkdGhzKTtcbiAgICAgICAgdGhpcy5yZW5kZXJVbml0U3RhdHMoY3R4LCB1bml0LCB1bml0TGFiZWxXaWR0aHMsIDApO1xuXG4gICAgICAgIGNvbnN0IHVuaXF1ZVdlYXBvbnM6IEFvU1dlYXBvbltdID0gW107XG4gICAgICAgIGNvbnN0IHNjcmF0Y2hNYXA6IE1hcDxzdHJpbmcsIEFvU1dlYXBvbj4gPSBuZXcgTWFwKCk7XG4gICAgICAgIGZvciAoY29uc3QgdyBvZiB1bml0Ll93ZWFwb25zKSB7XG4gICAgICAgICAgICBpZiAoIXNjcmF0Y2hNYXAuaGFzKHcuX25hbWUpKSB7XG4gICAgICAgICAgICAgICAgc2NyYXRjaE1hcC5zZXQody5fbmFtZSwgdyk7XG4gICAgICAgICAgICAgICAgdW5pcXVlV2VhcG9ucy5wdXNoKHcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IG1pc3NpbGVXZWFwb25zOiBBb1NXZWFwb25bXSA9IFtdO1xuICAgICAgICBsZXQgbWVsZWVXZWFwb25zOiBBb1NXZWFwb25bXSA9IFtdO1xuICAgICAgICBmb3IgKGxldCB3ZWFwb24gb2YgdW5pcXVlV2VhcG9ucykge1xuICAgICAgICAgICAgaWYgKHdlYXBvbi5fdHlwZSA9PSBcIk1lbGVlXCIpIHtcbiAgICAgICAgICAgICAgICBtZWxlZVdlYXBvbnMucHVzaCh3ZWFwb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbWlzc2lsZVdlYXBvbnMucHVzaCh3ZWFwb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChtaXNzaWxlV2VhcG9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IHdlYXBvbkxhYmVsV2lkdGhzOiBudW1iZXJbXSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fd2VhcG9uTGFiZWxXaWR0aE5vcm1hbGl6ZWQuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgICAgICAgICAgICB3ZWFwb25MYWJlbFdpZHRocy5wdXNoKGVsZW1lbnQgKiB0aGlzLl9tYXhXaWR0aCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyTGluZShjdHgpO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJUYWJsZUhlYWRlcihjdHgsIFJlbmRlcmVyQW9TLl93ZWFwb25MYWJlbHMsIHdlYXBvbkxhYmVsV2lkdGhzKTtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyV2VhcG9ucyhjdHgsIG1pc3NpbGVXZWFwb25zLCB3ZWFwb25MYWJlbFdpZHRocyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWVsZWVXZWFwb25zLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgbWVsZWVMYWJlbFdpZHRoczogbnVtYmVyW10gPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX3dlYXBvbkxhYmVsV2lkdGhOb3JtYWxpemVkLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICAgICAgbWVsZWVMYWJlbFdpZHRocy5wdXNoKGVsZW1lbnQgKiB0aGlzLl9tYXhXaWR0aCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyTGluZShjdHgpO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJUYWJsZUhlYWRlcihjdHgsIFJlbmRlcmVyQW9TLl9tZWxlZUxhYmVscywgbWVsZWVMYWJlbFdpZHRocyk7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcldlYXBvbnMoY3R4LCBtZWxlZVdlYXBvbnMsIG1lbGVlTGFiZWxXaWR0aHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVuaXQuX3NwZWxscy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBzcGVsbExhYmVsV2lkdGhzOiBudW1iZXJbXSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fc3BlbGxMYWJlbFdpZHRoTm9ybWFsaXplZC5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgICAgICAgICAgIHNwZWxsTGFiZWxXaWR0aHMucHVzaChlbGVtZW50ICogdGhpcy5fbWF4V2lkdGgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckxpbmUoY3R4KTtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyVGFibGVIZWFkZXIoY3R4LCBSZW5kZXJlckFvUy5fc3BlbGxMYWJlbHMsIHNwZWxsTGFiZWxXaWR0aHMpO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJTcGVsbHMoY3R4LCB1bml0Ll9zcGVsbHMsIHNwZWxsTGFiZWxXaWR0aHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVuaXQuX3ByYXllcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgcHJheWVyTGFiZWxXaWR0aHM6IG51bWJlcltdID0gW107XG4gICAgICAgICAgICB0aGlzLl9wcmF5ZXJMYWJlbFdpZHRoTm9ybWFsaXplZC5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgICAgICAgICAgIHByYXllckxhYmVsV2lkdGhzLnB1c2goZWxlbWVudCAqIHRoaXMuX21heFdpZHRoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJMaW5lKGN0eCk7XG4gICAgICAgICAgICB0aGlzLnJlbmRlclRhYmxlSGVhZGVyKGN0eCwgUmVuZGVyZXJBb1MuX3ByYXllckxhYmVscywgcHJheWVyTGFiZWxXaWR0aHMpO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJQcmF5ZXJzKGN0eCwgdW5pdC5fcHJheWVycywgcHJheWVyTGFiZWxXaWR0aHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVuaXQuX2FiaWxpdGllcy5zaXplID4gMCkge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJMaW5lKGN0eCk7XG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50WSArPSAyO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJNYXAoY3R4LCBcIkFCSUxJVElFU1wiLCB1bml0Ll9hYmlsaXRpZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVuaXQuX2NvbW1hbmRBYmlsaXRpZXMuc2l6ZSA+IDApIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyTGluZShjdHgpO1xuICAgICAgICAgICAgdGhpcy5fY3VycmVudFkgKz0gMjtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyTWFwKGN0eCwgXCJDT01NQU5EIEFCSUxJVElFU1wiLCB1bml0Ll9jb21tYW5kQWJpbGl0aWVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1bml0Ll9jb21tYW5kVHJhaXRzLnNpemUgPiAwKSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckxpbmUoY3R4KTtcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRZICs9IDI7XG4gICAgICAgICAgICB0aGlzLnJlbmRlck1hcChjdHgsIFwiQ09NTUFORCBUUkFJVFNcIiwgdW5pdC5fY29tbWFuZFRyYWl0cyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodW5pdC5fYXJ0ZWZhY3RzLnNpemUgPiAwKSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckxpbmUoY3R4KTtcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRZICs9IDI7XG4gICAgICAgICAgICB0aGlzLnJlbmRlck1hcChjdHgsIFwiQVJURUZBQ1RTXCIsIHVuaXQuX2FydGVmYWN0cyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodW5pdC5fbWFnaWMuc2l6ZSA+IDApIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyTGluZShjdHgpO1xuICAgICAgICAgICAgdGhpcy5fY3VycmVudFkgKz0gMjtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyTWFwKGN0eCwgXCJNQUdJQ1wiLCB1bml0Ll9tYWdpYyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodW5pdC5fd291bmRUcmFja2VyKSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckxpbmUoY3R4KTtcbiAgICAgICAgICAgIGNvbnN0IHRyYWNrZXJMYWJlbFdpZHRoczogbnVtYmVyW10gPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX3RyYWNrZXJMYWJlbFdpZHRoLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICAgICAgdHJhY2tlckxhYmVsV2lkdGhzLnB1c2goZWxlbWVudCAqIHRoaXMuX21heFdpZHRoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJUYWJsZUhlYWRlcihjdHgsIHVuaXQuX3dvdW5kVHJhY2tlci5fd291bmRUcmFja2VyTGFiZWxzLCB0cmFja2VyTGFiZWxXaWR0aHMpO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJXb3VuZFRhYmxlKGN0eCwgdW5pdCwgdHJhY2tlckxhYmVsV2lkdGhzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1bml0Ll9rZXl3b3Jkcy5zaXplID4gMCkge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJMaW5lKGN0eCk7XG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50WSArPSAyO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJLZXl3b3JkcyhjdHgsIHVuaXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdG90YWxIZWlnaHQgPSB0aGlzLl9jdXJyZW50WSAtICh5T2Zmc2V0ICsgUmVuZGVyZXJBb1MuX21hcmdpbik7XG4gICAgICAgIGNvbnN0IHRvdGFsV2lkdGggPSB0aGlzLl9tYXhXaWR0aDtcblxuICAgICAgICB0aGlzLnJlbmRlckJvcmRlcihjdHgsIHRoaXMuX2N1cnJlbnRYLCB5T2Zmc2V0ICsgUmVuZGVyZXJBb1MuX21hcmdpbiwgdG90YWxXaWR0aCwgdG90YWxIZWlnaHQpO1xuXG4gICAgICAgIHJldHVybiBbdGhpcy5fbWF4V2lkdGgsIHRoaXMuX2N1cnJlbnRZXTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlckhlYWRlcih1bml0OiBBb1NVbml0LCBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCk6IHZvaWQge1xuXG4gICAgICAgIGN0eC5nbG9iYWxBbHBoYSA9IDE7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBSZW5kZXJlckFvUy5fYmxhY2tDb2xvcjtcblxuICAgICAgICBjb25zdCB4U3RhcnQgPSB0aGlzLl9jdXJyZW50WDtcbiAgICAgICAgY29uc3QgeEVuZCA9IHRoaXMuX2N1cnJlbnRYICsgdGhpcy5fbWF4V2lkdGg7XG4gICAgICAgIGNvbnN0IHlTdGFydCA9IHRoaXMuX2N1cnJlbnRZO1xuICAgICAgICBjb25zdCB0aXRsZUhlaWdodCA9IDM2O1xuICAgICAgICBjb25zdCB5RW5kID0geVN0YXJ0ICsgdGl0bGVIZWlnaHQ7XG5cbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBjdHgubW92ZVRvKHhTdGFydCwgeVN0YXJ0ICsgUmVuZGVyZXJBb1MuX2JldmVsU2l6ZSk7XG4gICAgICAgIGN0eC5saW5lVG8oeFN0YXJ0LCB5RW5kKTtcbiAgICAgICAgY3R4LmxpbmVUbyh4RW5kLCB5RW5kKTtcbiAgICAgICAgY3R4LmxpbmVUbyh4RW5kLCB5U3RhcnQgKyBSZW5kZXJlckFvUy5fYmV2ZWxTaXplKTtcbiAgICAgICAgY3R4LmxpbmVUbyh4RW5kIC0gUmVuZGVyZXJBb1MuX2JldmVsU2l6ZSwgeVN0YXJ0KTtcbiAgICAgICAgY3R4LmxpbmVUbyh4U3RhcnQgKyBSZW5kZXJlckFvUy5fYmV2ZWxTaXplLCB5U3RhcnQpO1xuICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgIGN0eC5maWxsKCk7XG5cbiAgICAgICAgbGV0IGltZ1ggPSB4U3RhcnQgKyA2O1xuIFxuICAgICAgICAvL2lmICh0aGlzLl9zdGF0c1doZWVsKVxuICAgICAgICAvLyAgICBjdHguZHJhd0ltYWdlKHRoaXMuX3N0YXRzV2hlZWwsIGltZ1gsIHlTdGFydCArIDIsIDMyLCAzMik7XG5cbiAgICAgICAgLy8gdW5pdCBuYW1lXG4gICAgICAgIGxldCBpdGVyczogbnVtYmVyID0gMDtcbiAgICAgICAgbGV0IHRpdGxlX3NpemUgPSAyODtcbiAgICAgICAgY29uc3QgdGl0bGVfeCA9IGltZ1ggKyA2O1xuICAgICAgICBjdHguZm9udCA9IHRpdGxlX3NpemUgKyAncHggJyArICdib2xkIHNlcmlmJztcbiAgICAgICAgY29uc3QgdW5pdE5hbWUgPSB1bml0Ll9uYW1lLnRvTG9jYWxlVXBwZXJDYXNlKCk7XG4gICAgICAgIGxldCBjaGVjayA9IGN0eC5tZWFzdXJlVGV4dCh1bml0TmFtZSk7XG4gICAgICAgIGNvbnN0IG1heFdpZHRoID0gdGhpcy5fbWF4V2lkdGggLSB0aXRsZV94O1xuICAgICAgICB3aGlsZSAoaXRlcnMgPCA2ICYmIGNoZWNrLndpZHRoID4gbWF4V2lkdGgpIHtcbiAgICAgICAgICAgIGl0ZXJzICs9IDE7XG4gICAgICAgICAgICB0aXRsZV9zaXplIC09IDI7XG4gICAgICAgICAgICBjdHguZm9udCA9IHRpdGxlX3NpemUgKyAncHggJyArICdib2xkIHNlcmlmJztcbiAgICAgICAgICAgIGNoZWNrID0gY3R4Lm1lYXN1cmVUZXh0KHVuaXROYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBjdHguZmlsbFN0eWxlID0gJ3doaXRlJztcbiAgICAgICAgY3R4LnRleHRCYXNlbGluZSA9ICd0b3AnOyAvLyBNYWtlIHRoZSB0ZXh0IG9yaWdpbiBhdCB0aGUgdXBwZXItbGVmdCB0byBtYWtlIHBvc2l0aW9uaW5nIGVhc2llclxuICAgICAgICBSZW5kZXJUZXh0KGN0eCwgdW5pdE5hbWUsIHRpdGxlX3gsIHlTdGFydCwgbWF4V2lkdGgsIHRpdGxlSGVpZ2h0LCBKdXN0aWZpY2F0aW9uLkNlbnRlcik7XG5cbiAgICAgICAgdGhpcy5fY3VycmVudFkgKz0gdGl0bGVIZWlnaHQ7XG5cbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlclRhYmxlSGVhZGVyKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCBsYWJlbHM6IHN0cmluZ1tdLCBjb2x1bW5XaWR0aHM6IG51bWJlcltdIHwgbnVsbCkge1xuICAgICAgICBsZXQgeCA9IHRoaXMuX2N1cnJlbnRYO1xuICAgICAgICBjb25zdCBoZWlnaHQgPSAyMjtcbiAgICAgICAgY29uc3Qgd2lkdGggPSB0aGlzLl9tYXhXaWR0aDtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IFJlbmRlcmVyQW9TLl9ncmV5MTtcbiAgICAgICAgY3R4LmZpbGxSZWN0KHRoaXMuX2N1cnJlbnRYLCB0aGlzLl9jdXJyZW50WSwgd2lkdGgsIGhlaWdodCk7XG5cbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IFJlbmRlcmVyQW9TLl9ibGFja0NvbG9yO1xuICAgICAgICBjdHguZm9udCA9ICcxNHB4IHNhbnMtc2VyaWYnO1xuICAgICAgICB2YXIgdyA9IDUwO1xuICAgICAgICBpZiAobGFiZWxzKSB7XG4gICAgICAgICAgICBjdHguZm9udCA9ICcxMnB4IHNhbnMtc2VyaWYnO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsYWJlbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoY29sdW1uV2lkdGhzKSB3ID0gY29sdW1uV2lkdGhzW2ldO1xuICAgICAgICAgICAgICAgIFJlbmRlclRleHQoY3R4LCBsYWJlbHNbaV0sIHgsIHRoaXMuX2N1cnJlbnRZLCB3LCBoZWlnaHQsIEp1c3RpZmljYXRpb24uQ2VudGVyKTtcbiAgICAgICAgICAgICAgICB4ICs9IHc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9jdXJyZW50WSArPSBoZWlnaHQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW5kZXJLZXl3b3JkcyhjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgdW5pdDogQW9TVW5pdCk6IHZvaWQge1xuICAgICAgICBjdHguZm9udCA9ICcxNHB4IHNhbnMtc2VyaWYnO1xuICAgICAgICBSZW5kZXJUZXh0KGN0eCwgXCJLRVlXT1JEU1wiLCB0aGlzLl9jdXJyZW50WCArIDIwLCB0aGlzLl9jdXJyZW50WSwgMTAwLCAxNiwgSnVzdGlmaWNhdGlvbi5MZWZ0KTtcblxuICAgICAgICBjdHguZm9udCA9ICcxMnB4IHNlcmlmJztcbiAgICAgICAgY29uc3Qga3dsaXN0ID0gWy4uLnVuaXQuX2tleXdvcmRzXTsgXG4gICAgICAgIGNvbnN0IGt3ID0ga3dsaXN0LmpvaW4oXCIsIFwiKS50b0xvY2FsZVVwcGVyQ2FzZSgpO1xuICAgICAgICB0aGlzLl9jdXJyZW50WSA9IFJlbmRlclBhcmFncmFwaChjdHgsIGt3LCB0aGlzLl9jdXJyZW50WCArIDE5MCwgdGhpcy5fY3VycmVudFksIDUwMCk7XG5cbiAgICAgICAgdGhpcy5fY3VycmVudFkgKz0gNDtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBfdW5pdExhYmVscyA9IFtcIlVOSVRcIiwgXCJNT1ZFXCIsIFwiV09VTkRTXCIsIFwiQlJBVkVSWVwiLCBcIlNBVkVcIl07XG4gICAgcHJpdmF0ZSBfdW5pdExhYmVsV2lkdGhzTm9ybWFsaXplZCA9IFswLjQsIDAuMTUsIDAuMTUsIDAuMTUsIDAuMTVdO1xuICAgIHByaXZhdGUgc3RhdGljIF93ZWFwb25MYWJlbHMgPSBbXCJNSVNTSUxFIFdFQVBPTlNcIiwgXCJSQU5HRVwiLCBcIkFUVEFDS1NcIiwgXCJUTyBISVRcIiwgXCJUTyBXT1VORFwiLCBcIlJFTkRcIiwgXCJEQU1BR0VcIl07XG4gICAgcHJpdmF0ZSBfd2VhcG9uTGFiZWxXaWR0aE5vcm1hbGl6ZWQgPSBbMC40LCAwLjEsIDAuMSwgMC4xLCAwLjEsIDAuMSwgMC4xXTtcbiAgICBwcml2YXRlIHN0YXRpYyBfbWVsZWVMYWJlbHMgPSBbXCJNRUxFRSBXRUFQT05TXCIsIFwiUkFOR0VcIiwgXCJBVFRBQ0tTXCIsIFwiVE8gSElUXCIsIFwiVE8gV09VTkRcIiwgXCJSRU5EXCIsIFwiREFNQUdFXCJdO1xuXG4gICAgcHJpdmF0ZSBzdGF0aWMgX3NwZWxsTGFiZWxzID0gW1wiU1BFTExcIiwgXCJDQVNUSU5HIFZBTFVFXCIsIFwiREVTQ1JJUFRJT05cIl07XG4gICAgcHJpdmF0ZSBfc3BlbGxMYWJlbFdpZHRoTm9ybWFsaXplZCA9IFswLjMsIDAuMiwgMC41XTtcblxuICAgIHByaXZhdGUgc3RhdGljIF9wcmF5ZXJMYWJlbHMgPSBbXCJQUkFZRVJcIiwgXCJERVNDUklQVElPTlwiXTtcbiAgICBwcml2YXRlIF9wcmF5ZXJMYWJlbFdpZHRoTm9ybWFsaXplZCA9IFswLjQsIDAuNl07XG5cbiAgICBwcml2YXRlIF90cmFja2VyTGFiZWxXaWR0aCA9IFswLjMsIDAuMiwgMC4xNSwgMC4xNSwgMC4xNV07XG5cbiAgICBwcml2YXRlIHJlbmRlckxpbmUoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpOiB2b2lkIHtcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IDI7XG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IFJlbmRlcmVyQW9TLl9ibGFja0NvbG9yO1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5tb3ZlVG8odGhpcy5fY3VycmVudFgsIHRoaXMuX2N1cnJlbnRZKTtcbiAgICAgICAgY3R4LmxpbmVUbyh0aGlzLl9jdXJyZW50WCArIHRoaXMuX21heFdpZHRoLCB0aGlzLl9jdXJyZW50WSk7XG4gICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgdGhpcy5fY3VycmVudFkgKz0gMTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlcldlYXBvbnMoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIHdlYXBvbnM6IEFvU1dlYXBvbltdLCBjb2x1bW5XaWR0aHM6IG51bWJlcltdIHwgbnVsbCk6IHZvaWQge1xuICAgICAgICBjdHguZm9udCA9ICcxMnB4IHNhbnMtc2VyaWYnO1xuXG4gICAgICAgIGNvbnN0IGhlaWdodCA9IDIyO1xuXG4gICAgICAgIGN0eC5zYXZlKCk7XG5cbiAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICBsZXQgdyA9IDUwO1xuICAgICAgICBmb3IgKGNvbnN0IHdlYXBvbiBvZiB3ZWFwb25zKSB7XG5cbiAgICAgICAgICAgIGxldCBjaSA9IDA7XG4gICAgICAgICAgICBsZXQgeCA9IHRoaXMuX2N1cnJlbnRYO1xuXG4gICAgICAgICAgICBsZXQgeFN0YXJ0ID0gdGhpcy5fY3VycmVudFg7XG4gICAgICAgICAgICBsZXQgeVN0YXJ0ID0gdGhpcy5fY3VycmVudFk7XG5cbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBSZW5kZXJlckFvUy5fYmxhY2tDb2xvcjtcbiAgICAgICAgICAgIGlmIChjb2x1bW5XaWR0aHMpIHcgPSBjb2x1bW5XaWR0aHNbY2krK107XG4gICAgICAgICAgICBSZW5kZXJUZXh0KGN0eCwgd2VhcG9uLl9uYW1lLnRvU3RyaW5nKCksIHgsIHRoaXMuX2N1cnJlbnRZLCB3LCBoZWlnaHQsIEp1c3RpZmljYXRpb24uQ2VudGVyKTtcbiAgICAgICAgICAgIHggKz0gdztcblxuICAgICAgICAgICAgaWYgKGNvbHVtbldpZHRocykgdyA9IGNvbHVtbldpZHRoc1tjaSsrXTtcbiAgICAgICAgICAgIFJlbmRlclRleHQoY3R4LCB3ZWFwb24uX3JhbmdlLnRvU3RyaW5nKCksIHgsIHRoaXMuX2N1cnJlbnRZLCB3LCBoZWlnaHQsIEp1c3RpZmljYXRpb24uQ2VudGVyKTtcbiAgICAgICAgICAgIHggKz0gdztcblxuICAgICAgICAgICAgaWYgKGNvbHVtbldpZHRocykgdyA9IGNvbHVtbldpZHRoc1tjaSsrXTtcbiAgICAgICAgICAgIFJlbmRlclRleHQoY3R4LCB3ZWFwb24uX2F0dGFja3MudG9TdHJpbmcoKSwgeCwgdGhpcy5fY3VycmVudFksIHcsIGhlaWdodCwgSnVzdGlmaWNhdGlvbi5DZW50ZXIpO1xuICAgICAgICAgICAgeCArPSB3O1xuXG4gICAgICAgICAgICBpZiAoY29sdW1uV2lkdGhzKSB3ID0gY29sdW1uV2lkdGhzW2NpKytdO1xuICAgICAgICAgICAgUmVuZGVyVGV4dChjdHgsIHdlYXBvbi5fdG9IaXQudG9TdHJpbmcoKSwgeCwgdGhpcy5fY3VycmVudFksIHcsIGhlaWdodCwgSnVzdGlmaWNhdGlvbi5DZW50ZXIpO1xuICAgICAgICAgICAgeCArPSB3O1xuXG4gICAgICAgICAgICBpZiAoY29sdW1uV2lkdGhzKSB3ID0gY29sdW1uV2lkdGhzW2NpKytdO1xuICAgICAgICAgICAgUmVuZGVyVGV4dChjdHgsIHdlYXBvbi5fdG9Xb3VuZC50b1N0cmluZygpLCB4LCB0aGlzLl9jdXJyZW50WSwgdywgaGVpZ2h0LCBKdXN0aWZpY2F0aW9uLkNlbnRlcik7XG4gICAgICAgICAgICB4ICs9IHc7XG5cbiAgICAgICAgICAgIGlmIChjb2x1bW5XaWR0aHMpIHcgPSBjb2x1bW5XaWR0aHNbY2krK107XG4gICAgICAgICAgICBSZW5kZXJUZXh0KGN0eCwgd2VhcG9uLl9yZW5kLnRvU3RyaW5nKCksIHgsIHRoaXMuX2N1cnJlbnRZLCB3LCBoZWlnaHQsIEp1c3RpZmljYXRpb24uQ2VudGVyKTtcbiAgICAgICAgICAgIHggKz0gdztcblxuICAgICAgICAgICAgaWYgKGNvbHVtbldpZHRocykgdyA9IGNvbHVtbldpZHRoc1tjaSsrXTtcbiAgICAgICAgICAgIFJlbmRlclRleHQoY3R4LCB3ZWFwb24uX2RhbWFnZS50b1N0cmluZygpLCB4LCB0aGlzLl9jdXJyZW50WSwgdywgaGVpZ2h0LCBKdXN0aWZpY2F0aW9uLkNlbnRlcik7XG4gICAgICAgICAgICB4ICs9IHc7XG5cbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRZICs9IGhlaWdodDtcblxuICAgICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICAgIGN0eC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSBcImRlc3RpbmF0aW9uLW92ZXJcIjtcbiAgICAgICAgICAgIGNvbnN0IGFjdHVhbEhlaWdodCA9IHRoaXMuX2N1cnJlbnRZIC0geVN0YXJ0O1xuICAgICAgICAgICAgaWYgKGkgJSAyKSBjdHguZmlsbFN0eWxlID0gUmVuZGVyZXJBb1MuX2dyZXlMaWdodDtcbiAgICAgICAgICAgIGVsc2UgY3R4LmZpbGxTdHlsZSA9ICAnI2ZmZmZmZic7XG4gICAgICAgICAgICBjdHguZmlsbFJlY3QoeFN0YXJ0LCB5U3RhcnQsIHRoaXMuX21heFdpZHRoLCBhY3R1YWxIZWlnaHQpO1xuICAgICAgICAgICAgaSsrO1xuXG4gICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW5kZXJNYXAoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIHRpdGxlOiBzdHJpbmcsIGRhdGE6IE1hcDxzdHJpbmcsIHN0cmluZz4pOiB2b2lkIHtcbiAgICAgICAgY3R4LmZvbnQgPSAnMTRweCBzYW5zLXNlcmlmJztcbiAgICAgICAgUmVuZGVyVGV4dChjdHgsIHRpdGxlLCB0aGlzLl9jdXJyZW50WCArIDIwLCB0aGlzLl9jdXJyZW50WSwgMTAwLCAxNiwgSnVzdGlmaWNhdGlvbi5MZWZ0KTtcblxuICAgICAgICBjdHguZm9udCA9ICcxMnB4IHNlcmlmJztcbiAgICAgICAgZm9yIChsZXQgYWIgb2YgZGF0YSkge1xuICAgICAgICAgICAgY29uc3QgY29udGVudCA9IGFiWzBdLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICBjb25zdCBkZXNjID0gYWJbMV07XG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50WSArPSAyO1xuICAgICAgICAgICAgdGhpcy5fY3VycmVudFkgPSBSZW5kZXJQYXJhZ3JhcGgoY3R4LCBjb250ZW50ICsgXCI6IFwiICsgZGVzYywgdGhpcy5fY3VycmVudFggKyAxOTAsIHRoaXMuX2N1cnJlbnRZLCA1MDApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2N1cnJlbnRZICs9IDQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW5kZXJTcGVsbHMoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIHNwZWxsczogQW9TU3BlbGxbXSwgY29sdW1uV2lkdGhzOiBudW1iZXJbXSB8IG51bGwpOiB2b2lkIHtcbiAgICAgICAgY3R4LmZvbnQgPSAnMTJweCBzYW5zLXNlcmlmJztcblxuICAgICAgICBjb25zdCBoZWlnaHQgPSAyMjtcblxuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIGxldCB3ID0gNTA7XG5cbiAgICAgICAgY3R4LnNhdmUoKTtcblxuICAgICAgICBmb3IgKGNvbnN0IHNwZWxsIG9mIHNwZWxscykge1xuICAgICAgICAgICAgbGV0IGNpID0gMDtcbiAgICAgICAgICAgIGxldCB4ID0gdGhpcy5fY3VycmVudFg7XG5cbiAgICAgICAgICAgIGxldCB4U3RhcnQgPSB0aGlzLl9jdXJyZW50WDtcbiAgICAgICAgICAgIGxldCB5U3RhcnQgPSB0aGlzLl9jdXJyZW50WTtcblxuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IFJlbmRlcmVyQW9TLl9ibGFja0NvbG9yO1xuICAgICAgICAgICAgaWYgKGNvbHVtbldpZHRocykgdyA9IGNvbHVtbldpZHRoc1tjaSsrXTtcbiAgICAgICAgICAgIFJlbmRlclRleHQoY3R4LCBzcGVsbC5fbmFtZS50b1N0cmluZygpLCB4LCB0aGlzLl9jdXJyZW50WSwgdywgaGVpZ2h0LCBKdXN0aWZpY2F0aW9uLkNlbnRlcik7XG4gICAgICAgICAgICB4ICs9IHc7XG5cbiAgICAgICAgICAgIGlmIChjb2x1bW5XaWR0aHMpIHcgPSBjb2x1bW5XaWR0aHNbY2krK107XG4gICAgICAgICAgICBSZW5kZXJUZXh0KGN0eCwgc3BlbGwuX2Nhc3RpbmdWYWx1ZS50b1N0cmluZygpLCB4LCB0aGlzLl9jdXJyZW50WSwgdywgaGVpZ2h0LCBKdXN0aWZpY2F0aW9uLkNlbnRlcik7XG4gICAgICAgICAgICB4ICs9IHc7XG5cbiAgICAgICAgICAgIGlmIChjb2x1bW5XaWR0aHMpIHcgPSBjb2x1bW5XaWR0aHNbY2krK107XG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50WSArPSAyO1xuICAgICAgICAgICAgdGhpcy5fY3VycmVudFkgPSBSZW5kZXJQYXJhZ3JhcGgoY3R4LCBzcGVsbC5fZGVzY3JpcHRpb24sIHgsIHRoaXMuX2N1cnJlbnRZLCB3KTtcbiAgICAgICAgICAgIHggKz0gdztcblxuICAgICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICAgIGlmIChpICUgMikgY3R4LmZpbGxTdHlsZSA9IFJlbmRlcmVyQW9TLl9ncmV5TGlnaHQ7XG4gICAgICAgICAgICBlbHNlIGN0eC5maWxsU3R5bGUgPSAnI2ZmZmZmZic7XG4gICAgICAgICAgICBjdHguZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gXCJkZXN0aW5hdGlvbi1vdmVyXCI7XG4gICAgICAgICAgICBjb25zdCBhY3R1YWxIZWlnaHQgPSB0aGlzLl9jdXJyZW50WSAtIHlTdGFydDtcbiAgICAgICAgICAgIGN0eC5maWxsUmVjdCh4U3RhcnQsIHlTdGFydCwgdGhpcy5fbWF4V2lkdGgsIGFjdHVhbEhlaWdodCk7XG4gICAgICAgICAgICBpKys7XG5cbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgIH1cbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlclByYXllcnMoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIHByYXllcnM6IEFvU1ByYXllcltdLCBjb2x1bW5XaWR0aHM6IG51bWJlcltdIHwgbnVsbCk6IHZvaWQge1xuICAgICAgICBjdHguZm9udCA9ICcxMnB4IHNhbnMtc2VyaWYnO1xuXG4gICAgICAgIGNvbnN0IGhlaWdodCA9IDIyO1xuXG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgbGV0IHcgPSA1MDtcblxuICAgICAgICBjdHguc2F2ZSgpO1xuXG4gICAgICAgIGZvciAoY29uc3QgcHJheWVyIG9mIHByYXllcnMpIHtcbiAgICAgICAgICAgIGxldCBjaSA9IDA7XG4gICAgICAgICAgICBsZXQgeCA9IHRoaXMuX2N1cnJlbnRYO1xuXG4gICAgICAgICAgICBsZXQgeFN0YXJ0ID0gdGhpcy5fY3VycmVudFg7XG4gICAgICAgICAgICBsZXQgeVN0YXJ0ID0gdGhpcy5fY3VycmVudFk7XG5cbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBSZW5kZXJlckFvUy5fYmxhY2tDb2xvcjtcbiAgICAgICAgICAgIGlmIChjb2x1bW5XaWR0aHMpIHcgPSBjb2x1bW5XaWR0aHNbY2krK107XG4gICAgICAgICAgICBSZW5kZXJUZXh0KGN0eCwgcHJheWVyLl9uYW1lLnRvU3RyaW5nKCksIHgsIHRoaXMuX2N1cnJlbnRZLCB3LCBoZWlnaHQsIEp1c3RpZmljYXRpb24uQ2VudGVyKTtcbiAgICAgICAgICAgIHggKz0gdztcblxuICAgICAgICAgICAgaWYgKGNvbHVtbldpZHRocykgdyA9IGNvbHVtbldpZHRoc1tjaSsrXTtcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRZICs9IDI7XG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50WSA9IFJlbmRlclBhcmFncmFwaChjdHgsIHByYXllci5fZGVzY3JpcHRpb24sIHgsIHRoaXMuX2N1cnJlbnRZLCB3KTtcbiAgICAgICAgICAgIHggKz0gdztcblxuICAgICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICAgIGlmIChpICUgMikgY3R4LmZpbGxTdHlsZSA9IFJlbmRlcmVyQW9TLl9ncmV5TGlnaHQ7XG4gICAgICAgICAgICBlbHNlIGN0eC5maWxsU3R5bGUgPSAnI2ZmZmZmZic7XG4gICAgICAgICAgICBjdHguZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gXCJkZXN0aW5hdGlvbi1vdmVyXCI7XG4gICAgICAgICAgICBjb25zdCBhY3R1YWxIZWlnaHQgPSB0aGlzLl9jdXJyZW50WSAtIHlTdGFydDtcbiAgICAgICAgICAgIGN0eC5maWxsUmVjdCh4U3RhcnQsIHlTdGFydCwgdGhpcy5fbWF4V2lkdGgsIGFjdHVhbEhlaWdodCk7XG4gICAgICAgICAgICBpKys7XG5cbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgIH1cbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlclVuaXRTdGF0cyhjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgdW5pdDogQW9TVW5pdCwgY29sdW1uV2lkdGhzOiBudW1iZXJbXSB8IG51bGwsIGJnOiBudW1iZXIpOiB2b2lkIHtcblxuICAgICAgICBjb25zdCBoZWlnaHQgPSAyMjtcblxuICAgICAgICBsZXQgdyA9IDUwO1xuICAgICAgICBsZXQgeCA9IHRoaXMuX2N1cnJlbnRYO1xuICAgICAgICBsZXQgY2kgPSAwO1xuXG4gICAgICAgIGlmIChiZyAlIDIpIGN0eC5maWxsU3R5bGUgPSBSZW5kZXJlckFvUy5fZ3JleUxpZ2h0O1xuICAgICAgICBlbHNlIGN0eC5maWxsU3R5bGUgPSAnI2ZmZmZmZic7XG4gICAgICAgIGN0eC5maWxsUmVjdCh4LCB0aGlzLl9jdXJyZW50WSwgdGhpcy5fbWF4V2lkdGgsIGhlaWdodCk7XG5cbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IFJlbmRlcmVyQW9TLl9ibGFja0NvbG9yO1xuICAgICAgICBjdHguZm9udCA9ICcxMnB4IHNhbnMtc2VyaWYnO1xuXG4gICAgICAgIGlmIChjb2x1bW5XaWR0aHMpIHcgPSBjb2x1bW5XaWR0aHNbY2krK107XG4gICAgICAgIFJlbmRlclRleHQoY3R4LCB1bml0Ll9uYW1lLnRvU3RyaW5nKCksIHgsIHRoaXMuX2N1cnJlbnRZLCB3LCBoZWlnaHQsIEp1c3RpZmljYXRpb24uQ2VudGVyKTtcbiAgICAgICAgeCArPSB3O1xuXG4gICAgICAgIGlmIChjb2x1bW5XaWR0aHMpIHcgPSBjb2x1bW5XaWR0aHNbY2krK107XG4gICAgICAgIFJlbmRlclRleHQoY3R4LCB1bml0Ll9tb3ZlLnRvU3RyaW5nKCksIHgsIHRoaXMuX2N1cnJlbnRZLCB3LCBoZWlnaHQsIEp1c3RpZmljYXRpb24uQ2VudGVyKTtcbiAgICAgICAgeCArPSB3O1xuXG4gICAgICAgIGlmIChjb2x1bW5XaWR0aHMpIHcgPSBjb2x1bW5XaWR0aHNbY2krK107XG4gICAgICAgIFJlbmRlclRleHQoY3R4LCB1bml0Ll93b3VuZHMudG9TdHJpbmcoKSwgeCwgdGhpcy5fY3VycmVudFksIHcsIGhlaWdodCwgSnVzdGlmaWNhdGlvbi5DZW50ZXIpO1xuICAgICAgICB4ICs9IHc7XG5cbiAgICAgICAgaWYgKGNvbHVtbldpZHRocykgdyA9IGNvbHVtbldpZHRoc1tjaSsrXTtcbiAgICAgICAgUmVuZGVyVGV4dChjdHgsIHVuaXQuX2JyYXZlcnkudG9TdHJpbmcoKSwgeCwgdGhpcy5fY3VycmVudFksIHcsIGhlaWdodCwgSnVzdGlmaWNhdGlvbi5DZW50ZXIpO1xuICAgICAgICB4ICs9IHc7XG5cbiAgICAgICAgaWYgKGNvbHVtbldpZHRocykgdyA9IGNvbHVtbldpZHRoc1tjaSsrXTtcbiAgICAgICAgUmVuZGVyVGV4dChjdHgsIHVuaXQuX3NhdmUudG9TdHJpbmcoKSwgeCwgdGhpcy5fY3VycmVudFksIHcsIGhlaWdodCwgSnVzdGlmaWNhdGlvbi5DZW50ZXIpO1xuICAgICAgICB4ICs9IHc7XG5cbiAgICAgICAgdGhpcy5fY3VycmVudFkgKz0gaGVpZ2h0O1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVuZGVyV291bmRUYWJsZShjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgdW5pdDogQW9TVW5pdCwgY29sdW1uV2lkdGhzOiBudW1iZXJbXSB8IG51bGwpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gMjI7XG5cbiAgICAgICAgaWYgKHVuaXQuX3dvdW5kVHJhY2tlciA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgdyA9IDUwO1xuXG4gICAgICAgIGxldCB4ID0gdGhpcy5fY3VycmVudFg7XG4gICAgICAgIGxldCBjaSA9IDA7XG5cbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IFJlbmRlcmVyQW9TLl9ncmV5TGlnaHQ7XG4gICAgICAgIGN0eC5maWxsUmVjdCh4LCB0aGlzLl9jdXJyZW50WSwgdGhpcy5fbWF4V2lkdGgsIGhlaWdodCk7XG5cbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IFJlbmRlcmVyQW9TLl9ibGFja0NvbG9yO1xuICAgICAgICBjdHguZm9udCA9ICcxMnB4IHNhbnMtc2VyaWYnO1xuICAgICAgICBpZiAoY29sdW1uV2lkdGhzKSB3ID0gY29sdW1uV2lkdGhzW2NpKytdO1xuXG4gICAgICAgIFJlbmRlclRleHQoY3R4LCB1bml0Ll93b3VuZFRyYWNrZXIuX25hbWUsIHgsIHRoaXMuX2N1cnJlbnRZLCB3LCBoZWlnaHQsIEp1c3RpZmljYXRpb24uQ2VudGVyKTtcbiAgICAgICAgeCArPSB3O1xuXG4gICAgICAgIGZvciAobGV0IGF0dHIgb2YgIHVuaXQuX3dvdW5kVHJhY2tlci5fdGFibGUpIHtcbiAgICAgICAgICAgIGlmIChjb2x1bW5XaWR0aHMpIHcgPSBjb2x1bW5XaWR0aHNbY2krK107XG4gICAgICAgICAgICBSZW5kZXJUZXh0KGN0eCwgYXR0clsxXSwgeCwgdGhpcy5fY3VycmVudFksIHcsIGhlaWdodCwgSnVzdGlmaWNhdGlvbi5DZW50ZXIpO1xuICAgICAgICAgICAgeCArPSB3O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fY3VycmVudFkgKz0gaGVpZ2h0O1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVuZGVyQm9yZGVyKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCB4OiBudW1iZXIsIHk6IG51bWJlciwgdzogbnVtYmVyLCBoOiBudW1iZXIpIHtcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gUmVuZGVyZXJBb1MuX2JsYWNrQ29sb3I7XG5cbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBjdHgubW92ZVRvKHgsIHkgKyBSZW5kZXJlckFvUy5fYmV2ZWxTaXplKTtcbiAgICAgICAgY3R4LmxpbmVUbyh4LCB5ICsgaCAtIFJlbmRlcmVyQW9TLl9iZXZlbFNpemUpO1xuICAgICAgICBjdHgubGluZVRvKHggKyBSZW5kZXJlckFvUy5fYmV2ZWxTaXplLCB5ICsgaCk7XG4gICAgICAgIGN0eC5saW5lVG8oeCArIHcgLSBSZW5kZXJlckFvUy5fYmV2ZWxTaXplLCB5ICsgaCk7XG4gICAgICAgIGN0eC5saW5lVG8oeCArIHcsIHkgKyBoIC0gUmVuZGVyZXJBb1MuX2JldmVsU2l6ZSk7XG4gICAgICAgIGN0eC5saW5lVG8oeCArIHcsIHkgKyBSZW5kZXJlckFvUy5fYmV2ZWxTaXplKTtcbiAgICAgICAgY3R4LmxpbmVUbyh4ICsgdyAtIFJlbmRlcmVyQW9TLl9iZXZlbFNpemUsIHkpO1xuICAgICAgICBjdHgubGluZVRvKHggKyBSZW5kZXJlckFvUy5fYmV2ZWxTaXplLCB5KTtcbiAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgICBjdHguc3Ryb2tlKCk7XG5cbiAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IFJlbmRlcmVyQW9TLl9maWxsQ29sb3I7XG4gICAgICAgIGN0eC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSBcImRlc3RpbmF0aW9uLW92ZXJcIjtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBjdHgubW92ZVRvKHgsIHkgKyBSZW5kZXJlckFvUy5fYmV2ZWxTaXplKTtcbiAgICAgICAgY3R4LmxpbmVUbyh4LCB5ICsgaCAtIFJlbmRlcmVyQW9TLl9iZXZlbFNpemUpO1xuICAgICAgICBjdHgubGluZVRvKHggKyBSZW5kZXJlckFvUy5fYmV2ZWxTaXplLCB5ICsgaCk7XG4gICAgICAgIGN0eC5saW5lVG8oeCArIHcgLSBSZW5kZXJlckFvUy5fYmV2ZWxTaXplLCB5ICsgaCk7XG4gICAgICAgIGN0eC5saW5lVG8oeCArIHcsIHkgKyBoIC0gUmVuZGVyZXJBb1MuX2JldmVsU2l6ZSk7XG4gICAgICAgIGN0eC5saW5lVG8oeCArIHcsIHkgKyBSZW5kZXJlckFvUy5fYmV2ZWxTaXplKTtcbiAgICAgICAgY3R4LmxpbmVUbyh4ICsgdyAtIFJlbmRlcmVyQW9TLl9iZXZlbFNpemUsIHkpO1xuICAgICAgICBjdHgubGluZVRvKHggKyBSZW5kZXJlckFvUy5fYmV2ZWxTaXplLCB5KTtcbiAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgICBjdHguZmlsbCgpO1xuXG4gICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfVxuXG59XG4iLCIvKlxuICAgIENvcHlyaWdodCAyMDIwIFJpY2sgV2V5cmF1Y2gsXG5cbiAgICBQZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSBcbiAgICB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLCBwcm92aWRlZCB0aGF0IHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlXG4gICAgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2UgYXBwZWFyIGluIGFsbCBjb3BpZXMuXG5cbiAgICBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIIFxuICAgIFJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgXG4gICAgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsIFxuICAgIElORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTSBMT1NTIFxuICAgIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUiBPVEhFUiBcbiAgICBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SIFBFUkZPUk1BTkNFIFxuICAgIE9GIFRISVMgU09GVFdBUkUuXG4qL1xuXG5pbXBvcnQgeyBXYXJjcnlVbml0LCBXYXJjcnlGb3JjZSwgV2FyY3J5V2VhcG9uLCBXYXJjcnlVbml0Um9sZVRvU3RyaW5nLCBSb3N0ZXJXYXJjcnkgfSBmcm9tIFwiLi9yb3N0ZXJXYXJjcnlcIjtcbmltcG9ydCB7IFJlbmRlcmVyLCBKdXN0aWZpY2F0aW9uLCBSZW5kZXJUZXh0LCBSZW5kZXJQYXJhZ3JhcGh9IGZyb20gXCIuL3JlbmRlcmVyXCI7XG5cbmV4cG9ydCBjbGFzcyBSZW5kZXJlcldhcmNyeSBpbXBsZW1lbnRzIFJlbmRlcmVyIHtcblxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgX3JlczogbnVtYmVyID0gMTQ0O1xuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgX21hcmdpbjogbnVtYmVyID0gMDtcblxuICAgIHByaXZhdGUgX3Jvc3RlcjogUm9zdGVyV2FyY3J5fG51bGwgPSBudWxsO1xuXG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgX2JldmVsU2l6ZSA9IDE1O1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IF9ibGFja0NvbG9yID0gJyMxZDI3MmEnO1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IF9ncmV5MSA9ICcjYjNiYmI1JztcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBfZ3JleUxpZ2h0ID0gJyNkZGUxZGYnO1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IF9maWxsQ29sb3IgPSAnI2Y2ZjZmNic7XG5cbiAgICBwcml2YXRlIF9jdXJyZW50WDogbnVtYmVyID0gMDtcbiAgICBwcml2YXRlIF9jdXJyZW50WTogbnVtYmVyID0gMDtcbiAgICBwcml2YXRlIF9tYXhXaWR0aDogbnVtYmVyID0gMDtcbiAgICBwcml2YXRlIF9tYXhIZWlnaHQ6IG51bWJlciA9IDA7XG5cbiAgICBwcml2YXRlIHN0YXRpYyBfdW5pdExhYmVscyA9IFtcIlVOSVRcIiwgXCJNT1ZFXCIsIFwiV09VTkRTXCIsIFwiVE9VR0hORVNTXCJdO1xuICAgIHByaXZhdGUgX3VuaXRMYWJlbFdpZHRoc05vcm1hbGl6ZWQgPSBbMC40LCAwLjIwLCAwLjIwLCAwLjIwXTtcbiAgICBwcml2YXRlIHN0YXRpYyBfd2VhcG9uTGFiZWxzID0gW1wiV0VBUE9OXCIsIFwiUkFOR0VcIiwgXCJBVFRBQ0tTXCIsIFwiU1RSRU5HVEhcIiwgXCJEQU1BR0VcIl07XG4gICAgcHJpdmF0ZSBfd2VhcG9uTGFiZWxXaWR0aE5vcm1hbGl6ZWQgPSBbMC40LCAwLjE1LCAwLjE1LCAwLjE1LCAwLjE1XTtcblxuICAgIGNvbnN0cnVjdG9yKHJvc3RlcjogUm9zdGVyV2FyY3J5KSB7XG4gICAgICAgIHRoaXMuX3Jvc3RlciA9IHJvc3RlcjtcbiAgICB9XG5cbiAgICByZW5kZXIodGl0bGU6IEhUTUxFbGVtZW50fG51bGwsIGxpc3Q6IEhUTUxFbGVtZW50fG51bGwsIGZvcmNlczogSFRNTEVsZW1lbnR8bnVsbCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5fcm9zdGVyID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aXRsZSkge1xuICAgICAgICAgICAgdGl0bGUuaW5uZXJIVE1MID0gJzxoMz4nICsgdGhpcy5fcm9zdGVyLl9uYW1lICsgJyAoJyArIHRoaXMuX3Jvc3Rlci5fcG9pbnRzICsgJyBwdHM8L2gzPic7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBmb3JjZSBvZiB0aGlzLl9yb3N0ZXIuX2ZvcmNlcykge1xuICAgICAgICAgICAgY29uc3QgZm9yY2VUaXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgaWYgKGZvcmNlVGl0bGUpIHtcbiAgICAgICAgICAgICAgZm9yY2VUaXRsZS5pbm5lckhUTUwgPSAnPHA+JyArIGZvcmNlLl9jYXRhbG9nICsgJyAnICsgZm9yY2UuX25hbWUgKyAnPC9wPic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobGlzdClcbiAgICAgICAgICAgICAgICBsaXN0LmFwcGVuZENoaWxkKGZvcmNlVGl0bGUpO1xuXG4gICAgICAgICAgICBjb25zdCB0YWJsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RhYmxlJyk7XG4gICAgICAgICAgICB0YWJsZS5jbGFzc0xpc3QuYWRkKCd0YWJsZScpO1xuICAgICAgICAgICAgdGFibGUuY2xhc3NMaXN0LmFkZCgndGFibGUtc20nKTtcbiAgICAgICAgICAgIHRhYmxlLmNsYXNzTGlzdC5hZGQoJ3RhYmxlLXN0cmlwZWQnKTtcbiAgICAgICAgICAgIGNvbnN0IHRoZWFkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGhlYWQnKTtcbiAgICAgICAgICAgIHRhYmxlLmFwcGVuZENoaWxkKHRoZWFkKTtcbiAgICAgICAgICAgIHRoZWFkLmNsYXNzTGlzdC5hZGQoJ3RoZWFkLWxpZ2h0Jyk7XG4gICAgICAgICAgICBjb25zdCB0ciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyk7XG4gICAgICAgICAgICB0aGVhZC5hcHBlbmRDaGlsZCh0cik7XG4gICAgICAgICAgICBjb25zdCBoZWFkZXJJbmZvID0gW3sgbmFtZTogXCJOQU1FXCIsIHc6ICczNSUnfSwge25hbWU6XCJST0xFXCIsIHc6JzI1JSd9LCB7bmFtZTpcIlBPSU5UU1wiLCB3OicxNSUnfV07XG4gICAgICAgICAgICBoZWFkZXJJbmZvLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICAgIGxldCB0aCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RoJyk7XG4gICAgICAgICAgICAgIHRoLnNjb3BlID0gXCJjb2xcIjtcbiAgICAgICAgICAgICAgdGguaW5uZXJIVE1MID0gZWxlbWVudC5uYW1lO1xuICAgICAgICAgICAgICB0aC5zdHlsZS53aWR0aCA9IGVsZW1lbnQudztcbiAgICAgICAgICAgICAgdHIuYXBwZW5kQ2hpbGQodGgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBmb3JjZVRpdGxlLmFwcGVuZENoaWxkKHRhYmxlKTtcblxuICAgICAgICAgICAgbGV0IGJvZHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0Ym9keScpO1xuICAgICAgICAgICAgdGFibGUuYXBwZW5kQ2hpbGQoYm9keSk7XG4gICAgICAgICAgICBmb3IgKGxldCB1bml0IG9mIGZvcmNlLl91bml0cykge1xuICAgICAgICAgICAgICBsZXQgdHIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpO1xuICAgICAgICAgICAgICBsZXQgdW5hbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xuICAgICAgICAgICAgICB1bmFtZS5pbm5lckhUTUwgPSB1bml0Ll9uYW1lO1xuICAgICAgICAgICAgICBsZXQgcm9sZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG4gICAgICAgICAgICAgIHJvbGUuaW5uZXJIVE1MID0gV2FyY3J5VW5pdFJvbGVUb1N0cmluZ1t1bml0Ll9yb2xlXTtcbiAgICAgICAgICAgICAgbGV0IHB0cyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG4gICAgICAgICAgICAgIHB0cy5pbm5lckhUTUwgPSB1bml0Ll9wb2ludHMudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgdHIuYXBwZW5kQ2hpbGQodW5hbWUpO1xuICAgICAgICAgICAgICB0ci5hcHBlbmRDaGlsZChyb2xlKTtcbiAgICAgICAgICAgICAgdHIuYXBwZW5kQ2hpbGQocHRzKTtcbiAgICAgICAgICAgICAgYm9keS5hcHBlbmRDaGlsZCh0cik7ICAgIFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgYWxsZWdpYW5jZUFiaWxpdGllcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgaWYgKGZvcmNlLl9hbGxlZ2lhbmNlLl9ydWxlcy5zaXplID4gMCkge1xuICAgICAgICAgICAgICAgIGxldCBhYmlsaXR5SGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDMnKTtcbiAgICAgICAgICAgICAgICBhbGxlZ2lhbmNlQWJpbGl0aWVzLmFwcGVuZENoaWxkKGFiaWxpdHlIZWFkZXIpO1xuICAgICAgICAgICAgICAgIGFiaWxpdHlIZWFkZXIudGV4dENvbnRlbnQgPSBmb3JjZS5fYWxsZWdpYW5jZS5fbmFtZSArIFwiIEFiaWxpdGllc1wiO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IHRyYWl0IG9mIGZvcmNlLl9hbGxlZ2lhbmNlLl9ydWxlcykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBuYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDQnKTtcbiAgICAgICAgICAgICAgICAgICAgbmFtZS50ZXh0Q29udGVudCA9IHRyYWl0WzBdO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZGVzYyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICAgICAgICAgICAgICAgICAgZGVzYy50ZXh0Q29udGVudCA9IHRyYWl0WzFdO1xuICAgICAgICAgICAgICAgICAgICByb3cuYXBwZW5kQ2hpbGQobmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIHJvdy5hcHBlbmRDaGlsZChkZXNjKTtcbiAgICAgICAgICAgICAgICAgICAgYWxsZWdpYW5jZUFiaWxpdGllcy5hcHBlbmRDaGlsZChyb3cpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGZvcmNlcylcbiAgICAgICAgICAgICAgICBmb3JjZXMuYXBwZW5kQ2hpbGQoYWxsZWdpYW5jZUFiaWxpdGllcyk7XG5cbiAgICAgICAgICAgIGZvciAobGV0IHVuaXQgb2YgZm9yY2UuX3VuaXRzKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpIGFzIEhUTUxDYW52YXNFbGVtZW50O1xuICAgICAgICAgICAgICAgIGNhbnZhcy53aWR0aCA9IFJlbmRlcmVyV2FyY3J5Ll9yZXMgKiA1LjU7XG4gICAgICAgICAgICAgICAgY2FudmFzLmhlaWdodCA9IFJlbmRlcmVyV2FyY3J5Ll9yZXMgKiA4LjU7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY29uc3QgZGltcyA9IHRoaXMucmVuZGVyVW5pdCh1bml0LCBjYW52YXMsIDAsIDApO1xuICAgIFxuICAgICAgICAgICAgICAgIGNvbnN0IGJvcmRlciA9IDI1O1xuICAgICAgICAgICAgICAgIGxldCBmaW5hbENhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpIGFzIEhUTUxDYW52YXNFbGVtZW50O1xuICAgICAgICAgICAgICAgIGZpbmFsQ2FudmFzLndpZHRoID0gZGltc1swXSArIGJvcmRlciAqIDI7XG4gICAgICAgICAgICAgICAgZmluYWxDYW52YXMuaGVpZ2h0ID0gZGltc1sxXSArIGJvcmRlciAqIDI7XG4gICAgICAgICAgICAgICAgbGV0IGZpbmFsQ3R4ID0gZmluYWxDYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgICAgICAgICBmaW5hbEN0eD8uZHJhd0ltYWdlKGNhbnZhcywgYm9yZGVyLCBib3JkZXIpO1xuICAgICAgICAgICAgICAgIGlmIChmb3JjZXMpIFxuICAgICAgICAgICAgICAgICAgICBmb3JjZXMuYXBwZW5kQ2hpbGQoZmluYWxDYW52YXMpO1xuICAgICAgICAgICAgfSAgICAgICAgICAgICAgICBcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCByZW5kZXJVbml0KHVuaXQ6IFdhcmNyeVVuaXQsIGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQsIHhPZmZzZXQ6IG51bWJlciwgeU9mZnNldDogbnVtYmVyKTogbnVtYmVyW10ge1xuXG4gICAgICAgIGxldCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgaWYgKCFjdHgpIHtcbiAgICAgICAgICAgIHJldHVybiBbMCwgMF07XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9jdXJyZW50WCA9IHhPZmZzZXQgKyBSZW5kZXJlcldhcmNyeS5fbWFyZ2luO1xuICAgICAgICB0aGlzLl9jdXJyZW50WSA9IHlPZmZzZXQgKyBSZW5kZXJlcldhcmNyeS5fbWFyZ2luO1xuICAgICAgICB0aGlzLl9tYXhXaWR0aCA9IGNhbnZhcy53aWR0aCAtIHRoaXMuX2N1cnJlbnRYO1xuICAgICAgICB0aGlzLl9tYXhIZWlnaHQgPSBNYXRoLm1heCgwLCBjYW52YXMuaGVpZ2h0IC0gdGhpcy5fY3VycmVudFkpO1xuXG4gICAgICAgIHRoaXMucmVuZGVySGVhZGVyKHVuaXQsIGN0eCk7XG5cbiAgICAgICAgY29uc3QgdW5pdExhYmVsV2lkdGhzOiBudW1iZXJbXSA9IFtdO1xuICAgICAgICB0aGlzLl91bml0TGFiZWxXaWR0aHNOb3JtYWxpemVkLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICB1bml0TGFiZWxXaWR0aHMucHVzaChlbGVtZW50ICogdGhpcy5fbWF4V2lkdGgpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5yZW5kZXJUYWJsZUhlYWRlcihjdHgsIFJlbmRlcmVyV2FyY3J5Ll91bml0TGFiZWxzLCB1bml0TGFiZWxXaWR0aHMpO1xuICAgICAgICB0aGlzLnJlbmRlclVuaXRTdGF0cyhjdHgsIHVuaXQsIHVuaXRMYWJlbFdpZHRocywgMCk7XG5cbiAgICAgICAgY29uc3Qgd2VhcG9uTGFiZWxXaWR0aHM6IG51bWJlcltdID0gW107XG4gICAgICAgIHRoaXMuX3dlYXBvbkxhYmVsV2lkdGhOb3JtYWxpemVkLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICB3ZWFwb25MYWJlbFdpZHRocy5wdXNoKGVsZW1lbnQgKiB0aGlzLl9tYXhXaWR0aCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnJlbmRlckxpbmUoY3R4KTtcbiAgICAgICAgdGhpcy5yZW5kZXJUYWJsZUhlYWRlcihjdHgsIFJlbmRlcmVyV2FyY3J5Ll93ZWFwb25MYWJlbHMsIHdlYXBvbkxhYmVsV2lkdGhzKTtcbiAgICAgICAgdGhpcy5yZW5kZXJXZWFwb25zKGN0eCwgdW5pdC5fd2VhcG9ucywgd2VhcG9uTGFiZWxXaWR0aHMpO1xuICAgICAgICBcbiAgICAgICAgaWYgKHVuaXQuX2tleXdvcmRzLnNpemUgPiAwKSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckxpbmUoY3R4KTtcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRZICs9IDI7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcktleXdvcmRzKGN0eCwgdW5pdCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0b3RhbEhlaWdodCA9IHRoaXMuX2N1cnJlbnRZIC0gKHlPZmZzZXQgKyBSZW5kZXJlcldhcmNyeS5fbWFyZ2luKTtcbiAgICAgICAgY29uc3QgdG90YWxXaWR0aCA9IHRoaXMuX21heFdpZHRoO1xuXG4gICAgICAgIHRoaXMucmVuZGVyQm9yZGVyKGN0eCwgdGhpcy5fY3VycmVudFgsIHlPZmZzZXQgKyBSZW5kZXJlcldhcmNyeS5fbWFyZ2luLCB0b3RhbFdpZHRoLCB0b3RhbEhlaWdodCk7XG5cbiAgICAgICAgcmV0dXJuIFt0aGlzLl9tYXhXaWR0aCwgdGhpcy5fY3VycmVudFldO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVuZGVySGVhZGVyKHVuaXQ6IFdhcmNyeVVuaXQsIGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKTogdm9pZCB7XG5cbiAgICAgICAgY3R4Lmdsb2JhbEFscGhhID0gMTtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IFJlbmRlcmVyV2FyY3J5Ll9ibGFja0NvbG9yO1xuXG4gICAgICAgIGNvbnN0IHhTdGFydCA9IHRoaXMuX2N1cnJlbnRYO1xuICAgICAgICBjb25zdCB4RW5kID0gdGhpcy5fY3VycmVudFggKyB0aGlzLl9tYXhXaWR0aDtcbiAgICAgICAgY29uc3QgeVN0YXJ0ID0gdGhpcy5fY3VycmVudFk7XG4gICAgICAgIGNvbnN0IHRpdGxlSGVpZ2h0ID0gMzY7XG4gICAgICAgIGNvbnN0IHlFbmQgPSB5U3RhcnQgKyB0aXRsZUhlaWdodDtcblxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5tb3ZlVG8oeFN0YXJ0LCB5U3RhcnQgKyBSZW5kZXJlcldhcmNyeS5fYmV2ZWxTaXplKTtcbiAgICAgICAgY3R4LmxpbmVUbyh4U3RhcnQsIHlFbmQpO1xuICAgICAgICBjdHgubGluZVRvKHhFbmQsIHlFbmQpO1xuICAgICAgICBjdHgubGluZVRvKHhFbmQsIHlTdGFydCArIFJlbmRlcmVyV2FyY3J5Ll9iZXZlbFNpemUpO1xuICAgICAgICBjdHgubGluZVRvKHhFbmQgLSBSZW5kZXJlcldhcmNyeS5fYmV2ZWxTaXplLCB5U3RhcnQpO1xuICAgICAgICBjdHgubGluZVRvKHhTdGFydCArIFJlbmRlcmVyV2FyY3J5Ll9iZXZlbFNpemUsIHlTdGFydCk7XG4gICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgY3R4LmZpbGwoKTtcblxuICAgICAgICBsZXQgaW1nWCA9IHhTdGFydCArIDY7XG5cbiAgICAgICAgLy8gdW5pdCBuYW1lXG4gICAgICAgIGxldCBpdGVyczogbnVtYmVyID0gMDtcbiAgICAgICAgbGV0IHRpdGxlX3NpemUgPSAyODtcbiAgICAgICAgY29uc3QgdGl0bGVfeCA9IGltZ1ggKyA2O1xuICAgICAgICBjdHguZm9udCA9IHRpdGxlX3NpemUgKyAncHggJyArICdib2xkIHNlcmlmJztcbiAgICAgICAgY29uc3QgdW5pdE5hbWUgPSB1bml0Ll9uYW1lLnRvTG9jYWxlVXBwZXJDYXNlKCk7XG4gICAgICAgIGxldCBjaGVjayA9IGN0eC5tZWFzdXJlVGV4dCh1bml0TmFtZSk7XG4gICAgICAgIGNvbnN0IG1heFdpZHRoID0gdGhpcy5fbWF4V2lkdGggLSB0aXRsZV94O1xuICAgICAgICB3aGlsZSAoaXRlcnMgPCA2ICYmIGNoZWNrLndpZHRoID4gbWF4V2lkdGgpIHtcbiAgICAgICAgICAgIGl0ZXJzICs9IDE7XG4gICAgICAgICAgICB0aXRsZV9zaXplIC09IDI7XG4gICAgICAgICAgICBjdHguZm9udCA9IHRpdGxlX3NpemUgKyAncHggJyArICdib2xkIHNlcmlmJztcbiAgICAgICAgICAgIGNoZWNrID0gY3R4Lm1lYXN1cmVUZXh0KHVuaXROYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBjdHguZmlsbFN0eWxlID0gJ3doaXRlJztcbiAgICAgICAgY3R4LnRleHRCYXNlbGluZSA9ICd0b3AnOyAvLyBNYWtlIHRoZSB0ZXh0IG9yaWdpbiBhdCB0aGUgdXBwZXItbGVmdCB0byBtYWtlIHBvc2l0aW9uaW5nIGVhc2llclxuICAgICAgICBSZW5kZXJUZXh0KGN0eCwgdW5pdE5hbWUsIHRpdGxlX3gsIHlTdGFydCwgbWF4V2lkdGgsIHRpdGxlSGVpZ2h0LCBKdXN0aWZpY2F0aW9uLkNlbnRlcik7XG5cbiAgICAgICAgdGhpcy5fY3VycmVudFkgKz0gdGl0bGVIZWlnaHQ7XG5cbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlclRhYmxlSGVhZGVyKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCBsYWJlbHM6IHN0cmluZ1tdLCBjb2x1bW5XaWR0aHM6IG51bWJlcltdIHwgbnVsbCkge1xuICAgICAgICBsZXQgeCA9IHRoaXMuX2N1cnJlbnRYO1xuICAgICAgICBjb25zdCBoZWlnaHQgPSAyMjtcbiAgICAgICAgY29uc3Qgd2lkdGggPSB0aGlzLl9tYXhXaWR0aDtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IFJlbmRlcmVyV2FyY3J5Ll9ncmV5MTtcbiAgICAgICAgY3R4LmZpbGxSZWN0KHRoaXMuX2N1cnJlbnRYLCB0aGlzLl9jdXJyZW50WSwgd2lkdGgsIGhlaWdodCk7XG5cbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IFJlbmRlcmVyV2FyY3J5Ll9ibGFja0NvbG9yO1xuICAgICAgICBjdHguZm9udCA9ICcxNHB4IHNhbnMtc2VyaWYnO1xuICAgICAgICB2YXIgdyA9IDUwO1xuICAgICAgICBpZiAobGFiZWxzKSB7XG4gICAgICAgICAgICBjdHguZm9udCA9ICcxMnB4IHNhbnMtc2VyaWYnO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsYWJlbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoY29sdW1uV2lkdGhzKSB3ID0gY29sdW1uV2lkdGhzW2ldO1xuICAgICAgICAgICAgICAgIFJlbmRlclRleHQoY3R4LCBsYWJlbHNbaV0sIHgsIHRoaXMuX2N1cnJlbnRZLCB3LCBoZWlnaHQsIEp1c3RpZmljYXRpb24uQ2VudGVyKTtcbiAgICAgICAgICAgICAgICB4ICs9IHc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9jdXJyZW50WSArPSBoZWlnaHQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW5kZXJLZXl3b3JkcyhjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgdW5pdDogV2FyY3J5VW5pdCk6IHZvaWQge1xuICAgICAgICBjdHguZm9udCA9ICcxNHB4IHNhbnMtc2VyaWYnO1xuICAgICAgICBSZW5kZXJUZXh0KGN0eCwgXCJLRVlXT1JEU1wiLCB0aGlzLl9jdXJyZW50WCArIDIwLCB0aGlzLl9jdXJyZW50WSwgMTAwLCAxNiwgSnVzdGlmaWNhdGlvbi5MZWZ0KTtcblxuICAgICAgICBjdHguZm9udCA9ICcxMnB4IHNlcmlmJztcbiAgICAgICAgY29uc3Qga3dsaXN0ID0gWy4uLnVuaXQuX2tleXdvcmRzXTsgXG4gICAgICAgIGNvbnN0IGt3ID0ga3dsaXN0LmpvaW4oXCIsIFwiKS50b0xvY2FsZVVwcGVyQ2FzZSgpO1xuICAgICAgICB0aGlzLl9jdXJyZW50WSA9IFJlbmRlclBhcmFncmFwaChjdHgsIGt3LCB0aGlzLl9jdXJyZW50WCArIDE5MCwgdGhpcy5fY3VycmVudFksIDUwMCk7XG5cbiAgICAgICAgdGhpcy5fY3VycmVudFkgKz0gNDtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlclVuaXRTdGF0cyhjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgdW5pdDogV2FyY3J5VW5pdCwgY29sdW1uV2lkdGhzOiBudW1iZXJbXSB8IG51bGwsIGJnOiBudW1iZXIpOiB2b2lkIHtcblxuICAgICAgICBjb25zdCBoZWlnaHQgPSAyMjtcblxuICAgICAgICBsZXQgdyA9IDUwO1xuICAgICAgICBsZXQgeCA9IHRoaXMuX2N1cnJlbnRYO1xuICAgICAgICBsZXQgY2kgPSAwO1xuXG4gICAgICAgIGlmIChiZyAlIDIpIGN0eC5maWxsU3R5bGUgPSBSZW5kZXJlcldhcmNyeS5fZ3JleUxpZ2h0O1xuICAgICAgICBlbHNlIGN0eC5maWxsU3R5bGUgPSAnI2ZmZmZmZic7XG4gICAgICAgIGN0eC5maWxsUmVjdCh4LCB0aGlzLl9jdXJyZW50WSwgdGhpcy5fbWF4V2lkdGgsIGhlaWdodCk7XG5cbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IFJlbmRlcmVyV2FyY3J5Ll9ibGFja0NvbG9yO1xuICAgICAgICBjdHguZm9udCA9ICcxMnB4IHNhbnMtc2VyaWYnO1xuXG4gICAgICAgIGlmIChjb2x1bW5XaWR0aHMpIHcgPSBjb2x1bW5XaWR0aHNbY2krK107XG4gICAgICAgIFJlbmRlclRleHQoY3R4LCB1bml0Ll9uYW1lLnRvU3RyaW5nKCksIHgsIHRoaXMuX2N1cnJlbnRZLCB3LCBoZWlnaHQsIEp1c3RpZmljYXRpb24uQ2VudGVyKTtcbiAgICAgICAgeCArPSB3O1xuXG4gICAgICAgIGlmIChjb2x1bW5XaWR0aHMpIHcgPSBjb2x1bW5XaWR0aHNbY2krK107XG4gICAgICAgIFJlbmRlclRleHQoY3R4LCB1bml0Ll9tb3ZlLnRvU3RyaW5nKCksIHgsIHRoaXMuX2N1cnJlbnRZLCB3LCBoZWlnaHQsIEp1c3RpZmljYXRpb24uQ2VudGVyKTtcbiAgICAgICAgeCArPSB3O1xuXG4gICAgICAgIGlmIChjb2x1bW5XaWR0aHMpIHcgPSBjb2x1bW5XaWR0aHNbY2krK107XG4gICAgICAgIFJlbmRlclRleHQoY3R4LCB1bml0Ll93b3VuZHMudG9TdHJpbmcoKSwgeCwgdGhpcy5fY3VycmVudFksIHcsIGhlaWdodCwgSnVzdGlmaWNhdGlvbi5DZW50ZXIpO1xuICAgICAgICB4ICs9IHc7XG5cbiAgICAgICAgaWYgKGNvbHVtbldpZHRocykgdyA9IGNvbHVtbldpZHRoc1tjaSsrXTtcbiAgICAgICAgUmVuZGVyVGV4dChjdHgsIHVuaXQuX3RvdWdobmVzcy50b1N0cmluZygpLCB4LCB0aGlzLl9jdXJyZW50WSwgdywgaGVpZ2h0LCBKdXN0aWZpY2F0aW9uLkNlbnRlcik7XG4gICAgICAgIHggKz0gdztcblxuICAgICAgICB0aGlzLl9jdXJyZW50WSArPSBoZWlnaHQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW5kZXJXZWFwb25zKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCB3ZWFwb25zOiBXYXJjcnlXZWFwb25bXSwgY29sdW1uV2lkdGhzOiBudW1iZXJbXSB8IG51bGwpOiB2b2lkIHtcbiAgICAgICAgY3R4LmZvbnQgPSAnMTJweCBzYW5zLXNlcmlmJztcblxuICAgICAgICBjb25zdCBoZWlnaHQgPSAyMjtcblxuICAgICAgICBjdHguc2F2ZSgpO1xuXG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgbGV0IHcgPSA1MDtcbiAgICAgICAgZm9yIChjb25zdCB3ZWFwb24gb2Ygd2VhcG9ucykge1xuXG4gICAgICAgICAgICBsZXQgY2kgPSAwO1xuICAgICAgICAgICAgbGV0IHggPSB0aGlzLl9jdXJyZW50WDtcblxuICAgICAgICAgICAgbGV0IHhTdGFydCA9IHRoaXMuX2N1cnJlbnRYO1xuICAgICAgICAgICAgbGV0IHlTdGFydCA9IHRoaXMuX2N1cnJlbnRZO1xuXG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gUmVuZGVyZXJXYXJjcnkuX2JsYWNrQ29sb3I7XG4gICAgICAgICAgICBpZiAoY29sdW1uV2lkdGhzKSB3ID0gY29sdW1uV2lkdGhzW2NpKytdO1xuICAgICAgICAgICAgUmVuZGVyVGV4dChjdHgsIHdlYXBvbi5fbmFtZS50b1N0cmluZygpLCB4LCB0aGlzLl9jdXJyZW50WSwgdywgaGVpZ2h0LCBKdXN0aWZpY2F0aW9uLkNlbnRlcik7XG4gICAgICAgICAgICB4ICs9IHc7XG5cbiAgICAgICAgICAgIGlmIChjb2x1bW5XaWR0aHMpIHcgPSBjb2x1bW5XaWR0aHNbY2krK107XG4gICAgICAgICAgICBSZW5kZXJUZXh0KGN0eCwgd2VhcG9uLl9yYW5nZS50b1N0cmluZygpLCB4LCB0aGlzLl9jdXJyZW50WSwgdywgaGVpZ2h0LCBKdXN0aWZpY2F0aW9uLkNlbnRlcik7XG4gICAgICAgICAgICB4ICs9IHc7XG5cbiAgICAgICAgICAgIGlmIChjb2x1bW5XaWR0aHMpIHcgPSBjb2x1bW5XaWR0aHNbY2krK107XG4gICAgICAgICAgICBSZW5kZXJUZXh0KGN0eCwgd2VhcG9uLl9hdHRhY2tzLnRvU3RyaW5nKCksIHgsIHRoaXMuX2N1cnJlbnRZLCB3LCBoZWlnaHQsIEp1c3RpZmljYXRpb24uQ2VudGVyKTtcbiAgICAgICAgICAgIHggKz0gdztcblxuICAgICAgICAgICAgaWYgKGNvbHVtbldpZHRocykgdyA9IGNvbHVtbldpZHRoc1tjaSsrXTtcbiAgICAgICAgICAgIFJlbmRlclRleHQoY3R4LCB3ZWFwb24uX3N0cmVuZ3RoLnRvU3RyaW5nKCksIHgsIHRoaXMuX2N1cnJlbnRZLCB3LCBoZWlnaHQsIEp1c3RpZmljYXRpb24uQ2VudGVyKTtcbiAgICAgICAgICAgIHggKz0gdztcblxuICAgICAgICAgICAgaWYgKGNvbHVtbldpZHRocykgdyA9IGNvbHVtbldpZHRoc1tjaSsrXTtcbiAgICAgICAgICAgIFJlbmRlclRleHQoY3R4LCB3ZWFwb24uX2RhbWFnZSwgeCwgdGhpcy5fY3VycmVudFksIHcsIGhlaWdodCwgSnVzdGlmaWNhdGlvbi5DZW50ZXIpO1xuICAgICAgICAgICAgeCArPSB3O1xuXG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50WSArPSBoZWlnaHQ7XG5cbiAgICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgICBjdHguZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gXCJkZXN0aW5hdGlvbi1vdmVyXCI7XG4gICAgICAgICAgICBjb25zdCBhY3R1YWxIZWlnaHQgPSB0aGlzLl9jdXJyZW50WSAtIHlTdGFydDtcbiAgICAgICAgICAgIGlmIChpICUgMikgY3R4LmZpbGxTdHlsZSA9IFJlbmRlcmVyV2FyY3J5Ll9ncmV5TGlnaHQ7XG4gICAgICAgICAgICBlbHNlIGN0eC5maWxsU3R5bGUgPSAgJyNmZmZmZmYnO1xuICAgICAgICAgICAgY3R4LmZpbGxSZWN0KHhTdGFydCwgeVN0YXJ0LCB0aGlzLl9tYXhXaWR0aCwgYWN0dWFsSGVpZ2h0KTtcbiAgICAgICAgICAgIGkrKztcblxuICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgfVxuICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVuZGVyQm9yZGVyKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCB4OiBudW1iZXIsIHk6IG51bWJlciwgdzogbnVtYmVyLCBoOiBudW1iZXIpIHtcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gUmVuZGVyZXJXYXJjcnkuX2JsYWNrQ29sb3I7XG5cbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBjdHgubW92ZVRvKHgsIHkgKyBSZW5kZXJlcldhcmNyeS5fYmV2ZWxTaXplKTtcbiAgICAgICAgY3R4LmxpbmVUbyh4LCB5ICsgaCAtIFJlbmRlcmVyV2FyY3J5Ll9iZXZlbFNpemUpO1xuICAgICAgICBjdHgubGluZVRvKHggKyBSZW5kZXJlcldhcmNyeS5fYmV2ZWxTaXplLCB5ICsgaCk7XG4gICAgICAgIGN0eC5saW5lVG8oeCArIHcgLSBSZW5kZXJlcldhcmNyeS5fYmV2ZWxTaXplLCB5ICsgaCk7XG4gICAgICAgIGN0eC5saW5lVG8oeCArIHcsIHkgKyBoIC0gUmVuZGVyZXJXYXJjcnkuX2JldmVsU2l6ZSk7XG4gICAgICAgIGN0eC5saW5lVG8oeCArIHcsIHkgKyBSZW5kZXJlcldhcmNyeS5fYmV2ZWxTaXplKTtcbiAgICAgICAgY3R4LmxpbmVUbyh4ICsgdyAtIFJlbmRlcmVyV2FyY3J5Ll9iZXZlbFNpemUsIHkpO1xuICAgICAgICBjdHgubGluZVRvKHggKyBSZW5kZXJlcldhcmNyeS5fYmV2ZWxTaXplLCB5KTtcbiAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgICBjdHguc3Ryb2tlKCk7XG5cbiAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IFJlbmRlcmVyV2FyY3J5Ll9maWxsQ29sb3I7XG4gICAgICAgIGN0eC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSBcImRlc3RpbmF0aW9uLW92ZXJcIjtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBjdHgubW92ZVRvKHgsIHkgKyBSZW5kZXJlcldhcmNyeS5fYmV2ZWxTaXplKTtcbiAgICAgICAgY3R4LmxpbmVUbyh4LCB5ICsgaCAtIFJlbmRlcmVyV2FyY3J5Ll9iZXZlbFNpemUpO1xuICAgICAgICBjdHgubGluZVRvKHggKyBSZW5kZXJlcldhcmNyeS5fYmV2ZWxTaXplLCB5ICsgaCk7XG4gICAgICAgIGN0eC5saW5lVG8oeCArIHcgLSBSZW5kZXJlcldhcmNyeS5fYmV2ZWxTaXplLCB5ICsgaCk7XG4gICAgICAgIGN0eC5saW5lVG8oeCArIHcsIHkgKyBoIC0gUmVuZGVyZXJXYXJjcnkuX2JldmVsU2l6ZSk7XG4gICAgICAgIGN0eC5saW5lVG8oeCArIHcsIHkgKyBSZW5kZXJlcldhcmNyeS5fYmV2ZWxTaXplKTtcbiAgICAgICAgY3R4LmxpbmVUbyh4ICsgdyAtIFJlbmRlcmVyV2FyY3J5Ll9iZXZlbFNpemUsIHkpO1xuICAgICAgICBjdHgubGluZVRvKHggKyBSZW5kZXJlcldhcmNyeS5fYmV2ZWxTaXplLCB5KTtcbiAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgICBjdHguZmlsbCgpO1xuXG4gICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW5kZXJMaW5lKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKTogdm9pZCB7XG4gICAgICAgIGN0eC5saW5lV2lkdGggPSAyO1xuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBSZW5kZXJlcldhcmNyeS5fYmxhY2tDb2xvcjtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBjdHgubW92ZVRvKHRoaXMuX2N1cnJlbnRYLCB0aGlzLl9jdXJyZW50WSk7XG4gICAgICAgIGN0eC5saW5lVG8odGhpcy5fY3VycmVudFggKyB0aGlzLl9tYXhXaWR0aCwgdGhpcy5fY3VycmVudFkpO1xuICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRZICs9IDE7XG4gICAgfVxuXG59IiwiLypcbiAgICBDb3B5cmlnaHQgMjAyMCBSaWNrIFdleXJhdWNoLFxuXG4gICAgUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UgXG4gICAgd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZCwgcHJvdmlkZWQgdGhhdCB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZVxuICAgIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIGFwcGVhciBpbiBhbGwgY29waWVzLlxuXG4gICAgVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSCBcbiAgICBSRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIFxuICAgIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULCBcbiAgICBJTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST00gTE9TUyBcbiAgICBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1IgT1RIRVIgXG4gICAgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUiBQRVJGT1JNQU5DRSBcbiAgICBPRiBUSElTIFNPRlRXQVJFLlxuKi9cblxudHlwZSBXZWFwb25TdHJlbmd0aCA9IG51bWJlciB8IHN0cmluZztcblxuZXhwb3J0IGNsYXNzIFdlYXBvbjMwayB7XG4gICAgX25hbWU6IHN0cmluZyA9IFwiXCI7XG4gICAgX3JhbmdlOiBzdHJpbmcgPSBcIk1lbGVlXCI7XG4gICAgX3N0cjogV2VhcG9uU3RyZW5ndGggPSBcInVzZXJcIjtcbiAgICBfYXA6IHN0cmluZyA9IFwiXCI7XG4gICAgX3R5cGU6IHN0cmluZyA9IFwiTWVsZWVcIjtcbn1cblxuZXhwb3J0IGNsYXNzIFBzeWtlcjMwayB7XG4gICAgX25hbWU6IHN0cmluZyA9IFwiXCI7XG4gICAgX21hc3RlcnlMZXZlbDogc3RyaW5nID0gXCJcIjtcbiAgICBfZGlzY2lwbGluZXM6IHN0cmluZyA9IFwiXCI7XG59XG5cbmV4cG9ydCBjbGFzcyBQc3ljaGljUG93ZXIzMGsge1xuICAgIF9uYW1lOiBzdHJpbmcgPSBcIlwiO1xuICAgIF93YXJwQ2hhcmdlOiBudW1iZXIgPSAwO1xuICAgIF9jYXRlZ29yeTogc3RyaW5nID0gXCJcIjtcbiAgICBfcmFuZ2U6IHN0cmluZyA9IFwiXCI7XG4gICAgX2RldGFpbHM6IHN0cmluZyA9IFwiXCI7XG59XG5cbmV4cG9ydCBlbnVtIFVuaXRSb2xlMzBrIHtcbiAgICBOT05FLFxuXG4gICAgLy8gNDBrXG4gICAgSFEsXG4gICAgVFIsXG4gICAgRUwsXG4gICAgRkEsXG4gICAgSFMsXG4gICAgRkwsXG4gICAgRFQsXG4gICAgRlQsXG4gICAgTFcsXG59XG5cbmV4cG9ydCBjb25zdCBVbml0Um9sZVRvU3RyaW5nMzBrOiBzdHJpbmdbXSA9IFtcbiAgICAnTm9uZScsXG5cbiAgICAvLyA0MGtcbiAgICAnSFEnLFxuICAgICdUcm9vcHMnLFxuICAgICdFbGl0ZXMnLFxuICAgICdGYXN0IEF0dGFjaycsXG4gICAgJ0hlYXZ5IFN1cHBvcnQnLFxuICAgICdGbHllcicsXG4gICAgJ0RlZGljYXRlZCBUcmFuc3BvcnQnLFxuICAgICdGb3J0aWZpY2F0aW9uJyxcbiAgICAnTG9yZCBvZiBXYXInLFxuXTtcblxuZXhwb3J0IGNsYXNzIFZlaGljbGUzMGsge1xuICAgIF9uYW1lOiBzdHJpbmcgPSBcIlwiO1xuXG4gICAgLy8gQ2hhcmFjdGVyaXN0aWNzXG4gICAgX2JzOiBzdHJpbmcgPSBcIlwiO1xuICAgIF9mcm9udDogbnVtYmVyID0gNDtcbiAgICBfc2lkZTogbnVtYmVyID0gNDtcbiAgICBfcmVhcjogbnVtYmVyID0gNDtcbiAgICBfaHA6IG51bWJlciA9IDE7XG4gICAgX3R5cGU6IHN0cmluZyA9IFwiXCI7XG5cbiAgICBfd2VhcG9uczogV2VhcG9uMzBrW10gPSBbXTtcbn1cblxuZXhwb3J0IGNsYXNzIFdhbGtlcjMwayB7XG4gICAgX25hbWU6IHN0cmluZyA9IFwiXCI7XG5cbiAgICAvLyBDaGFyYWN0ZXJpc3RpY3NcbiAgICBfd3M6IHN0cmluZyA9IFwiXCI7XG4gICAgX2JzOiBzdHJpbmcgPSBcIlwiO1xuICAgIF9zdHI6IG51bWJlciA9IDQ7XG4gICAgX2Zyb250OiBudW1iZXIgPSA0O1xuICAgIF9zaWRlOiBudW1iZXIgPSA0O1xuICAgIF9yZWFyOiBudW1iZXIgPSA0O1xuICAgIF9pbml0aWF0aXZlOiBudW1iZXIgPSAxO1xuICAgIF9hdHRhY2tzOiBzdHJpbmcgPSBcIlwiO1xuICAgIF9ocDogbnVtYmVyID0gMTtcbiAgICBfdHlwZTogc3RyaW5nID0gXCJcIjtcblxuICAgIF93ZWFwb25zOiBXZWFwb24zMGtbXSA9IFtdO1xufVxuXG5leHBvcnQgY2xhc3MgRmx5ZXIzMGsge1xuICAgIF9uYW1lOiBzdHJpbmcgPSBcIlwiO1xuXG4gICAgLy8gQ2hhcmFjdGVyaXN0aWNzXG4gICAgX2JzOiBzdHJpbmcgPSBcIlwiO1xuICAgIF9mcm9udDogbnVtYmVyID0gNDtcbiAgICBfc2lkZTogbnVtYmVyID0gNDtcbiAgICBfcmVhcjogbnVtYmVyID0gNDtcbiAgICBfaHA6IG51bWJlciA9IDE7XG4gICAgX3R5cGU6IHN0cmluZyA9IFwiXCI7XG4gICAgX3JvbGU6IHN0cmluZyA9IFwiXCI7XG4gICAgX3B1cnN1aXQ6IHN0cmluZyA9IFwiXCI7XG4gICAgX2FnaWxpdHk6IHN0cmluZyA9IFwiXCI7XG5cbiAgICBfd2VhcG9uczogV2VhcG9uMzBrW10gPSBbXTtcbn1cblxuZXhwb3J0IGNsYXNzIE1vZGVsMzBrIHtcblxuICAgIF9uYW1lOiBzdHJpbmcgPSBcIlwiO1xuICAgIF9jb3VudDogbnVtYmVyID0gMDtcblxuICAgIC8vIENoYXJhY3RlcmlzdGljc1xuICAgIF93czogc3RyaW5nID0gXCJcIjtcbiAgICBfYnM6IHN0cmluZyA9IFwiXCI7XG4gICAgX3N0cjogbnVtYmVyID0gNDtcbiAgICBfdG91Z2huZXNzOiBudW1iZXIgPSA0O1xuICAgIF93b3VuZHM6IG51bWJlciA9IDE7XG4gICAgX2luaXRpYXRpdmU6IG51bWJlciA9IDE7XG4gICAgX2F0dGFja3M6IHN0cmluZyA9IFwiXCI7XG4gICAgX2xlYWRlcnNoaXA6IG51bWJlciA9IDc7XG4gICAgX3NhdmU6IHN0cmluZyA9IFwiXCI7XG5cbiAgICBfd2VhcG9uczogV2VhcG9uMzBrW10gPSBbXTtcbiAgICBfcHN5a2VyOiBQc3lrZXIzMGsgfCBudWxsID0gbnVsbDtcbiAgICBfcHN5Y2hpY1Bvd2VyczogUHN5Y2hpY1Bvd2VyMzBrW10gPSBbXTtcbn07XG5cbmV4cG9ydCBjbGFzcyBGb3J0aWZpY2F0aW9uMzBrIHtcblxuICAgIF9uYW1lOiBzdHJpbmcgPSBcIlwiO1xuICAgIF9jb21wb3NpdGlvbjogc3RyaW5nID0gXCJcIjtcbiAgICBfdHlwZTogc3RyaW5nID0gXCJcIjtcbn07XG5cbmV4cG9ydCBjbGFzcyBVbml0MzBrIHtcblxuICAgIF9uYW1lOiBzdHJpbmcgPSBcIlwiO1xuICAgIF9yb2xlOiBVbml0Um9sZTMwayA9IFVuaXRSb2xlMzBrLk5PTkU7XG4gICAgX2ZhY3Rpb25zOiBTZXQ8c3RyaW5nPiA9IG5ldyBTZXQoKTtcbiAgICBfa2V5d29yZHM6IFNldDxzdHJpbmc+ID0gbmV3IFNldCgpO1xuXG4gICAgX2FiaWxpdGllczogTWFwPHN0cmluZywgc3RyaW5nPiA9IG5ldyBNYXAoKTtcbiAgICBfcnVsZXM6IE1hcDxzdHJpbmcsIHN0cmluZz4gPSBuZXcgTWFwKCk7XG5cbiAgICBfbW9kZWxzOiBNb2RlbDMwa1tdID0gW107XG4gICAgX3dhbGtlcnM6IFdhbGtlcjMwa1tdID0gW107XG4gICAgX3ZlaGljbGVzOiBWZWhpY2xlMzBrW10gPSBbXTtcbiAgICBfZmx5ZXJzOiBGbHllcjMwa1tdID0gW107XG5cbiAgICBfcG9pbnRzOiBudW1iZXIgPSAwO1xufVxuXG5leHBvcnQgY2xhc3MgRm9yY2UzMGsge1xuICAgIF9jYXRhbG9nOiBzdHJpbmcgPSBcIlwiO1xuICAgIF9uYW1lOiBzdHJpbmcgPSBcIlVua25vd25cIjtcbiAgICBfZmFjdGlvbjogc3RyaW5nID0gXCJVbmtub3duXCI7XG4gICAgX3J1bGVzOiBNYXA8c3RyaW5nLCBzdHJpbmcgfCBudWxsPiA9IG5ldyBNYXAoKTtcbiAgICBfdW5pdHM6IFVuaXQzMGtbXSA9IFtdO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG5cbiAgICB9XG59O1xuXG5leHBvcnQgY2xhc3MgUm9zdGVyMzBrIHtcbiAgICBfY29tbWFuZFBvaW50czogbnVtYmVyID0gMDtcbiAgICBfcG9pbnRzOiBudW1iZXIgPSAwO1xuICAgIF9uYW1lOiBzdHJpbmcgPSBcIlwiO1xuICAgIF9mb3JjZXM6IEZvcmNlMzBrW10gPSBbXTtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuXG4gICAgfVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIENyZWF0ZTMwa1Jvc3Rlcihkb2M6IERvY3VtZW50KTogUm9zdGVyMzBrIHwgbnVsbCB7XG4gICAgaWYgKGRvYykge1xuICAgICAgICAvLyBEZXRlcm1pbmUgcm9zdGVyIHR5cGUgKGdhbWUgc3lzdGVtKS5cbiAgICAgICAgbGV0IGluZm8gPSBkb2MucXVlcnlTZWxlY3RvcihcInJvc3RlclwiKTtcbiAgICAgICAgaWYgKGluZm8pIHtcbiAgICAgICAgICAgIGNvbnN0IHJvc3RlciA9IG5ldyBSb3N0ZXIzMGsoKTtcblxuICAgICAgICAgICAgY29uc3QgbmFtZSA9IGluZm8uZ2V0QXR0cmlidXRlTm9kZShcIm5hbWVcIik/Lm5vZGVWYWx1ZTtcbiAgICAgICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgICAgICAgcm9zdGVyLl9uYW1lID0gbmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJvc3Rlci5fbmFtZSA9IFwiMzBrIEFybXkgUm9zdGVyXCI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIFBhcnNlUm9zdGVyUG9pbnRzKGRvYywgcm9zdGVyKTtcbiAgICAgICAgICAgIFBhcnNlRm9yY2VzKGRvYywgcm9zdGVyKTtcblxuICAgICAgICAgICAgcmV0dXJuIHJvc3RlcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gUGFyc2VSb3N0ZXJQb2ludHMoZG9jOiBYTUxEb2N1bWVudCwgcm9zdGVyOiBSb3N0ZXIzMGspOiB2b2lkIHtcbiAgICBsZXQgY29zdHMgPSBkb2MucXVlcnlTZWxlY3RvckFsbChcInJvc3Rlcj5jb3N0cz5jb3N0XCIpO1xuICAgIGZvciAobGV0IGNvc3Qgb2YgY29zdHMpIHtcbiAgICAgICAgaWYgKGNvc3QuaGFzQXR0cmlidXRlKFwibmFtZVwiKSAmJiBjb3N0Lmhhc0F0dHJpYnV0ZShcInZhbHVlXCIpKSB7XG4gICAgICAgICAgICBsZXQgd2hpY2ggPSBjb3N0LmdldEF0dHJpYnV0ZU5vZGUoXCJuYW1lXCIpPy5ub2RlVmFsdWU7XG4gICAgICAgICAgICBsZXQgdmFsdWUgPSBjb3N0LmdldEF0dHJpYnV0ZU5vZGUoXCJ2YWx1ZVwiKT8ubm9kZVZhbHVlO1xuICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHdoaWNoID09PSBcInB0c1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJvc3Rlci5fcG9pbnRzID0gK3ZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh3aGljaCA9PT0gXCJDUFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJvc3Rlci5fY29tbWFuZFBvaW50cyA9ICt2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIFBhcnNlRm9yY2VzKGRvYzogWE1MRG9jdW1lbnQsIHJvc3RlcjogUm9zdGVyMzBrKTogdm9pZCB7XG4gICAgbGV0IGZvcmNlc1Jvb3QgPSBkb2MucXVlcnlTZWxlY3RvckFsbChcInJvc3Rlcj5mb3JjZXM+Zm9yY2VcIik7XG4gICAgZm9yIChsZXQgcm9vdCBvZiBmb3JjZXNSb290KSB7XG4gICAgICAgIGlmIChyb290Lmhhc0F0dHJpYnV0ZShcIm5hbWVcIikgJiYgcm9vdC5oYXNBdHRyaWJ1dGUoXCJjYXRhbG9ndWVOYW1lXCIpKSB7XG5cbiAgICAgICAgICAgIGxldCBmID0gbmV3IEZvcmNlMzBrKCk7XG5cbiAgICAgICAgICAgIGxldCB3aGljaCA9IHJvb3QuZ2V0QXR0cmlidXRlTm9kZShcIm5hbWVcIik/Lm5vZGVWYWx1ZTtcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IHJvb3QuZ2V0QXR0cmlidXRlTm9kZShcImNhdGFsb2d1ZU5hbWVcIik/Lm5vZGVWYWx1ZTtcblxuICAgICAgICAgICAgaWYgKHdoaWNoKSB7XG4gICAgICAgICAgICAgICAgZi5fbmFtZSA9IHdoaWNoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgZi5fY2F0YWxvZyA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBUT0RPOiBEZXRlcm1pbmUgZm9yY2UgZmFjdGlvbiBhbmQgZmFjdGlvbiBzcGVjaWZpYyBydWxlcy5cblxuICAgICAgICAgICAgLy8gT25seSBpbmNsdWRlIHRoZSBhbGxlZ2lhbmNlIHJ1bGVzIG9uY2UuXG4gICAgICAgICAgICBpZiAoIUR1cGxpY2F0ZUZvcmNlKGYsIHJvc3RlcikpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBydWxlcyA9IHJvb3QucXVlcnlTZWxlY3RvckFsbChcImZvcmNlPnJ1bGVzPnJ1bGVcIik7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgcnVsZSBvZiBydWxlcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAocnVsZS5oYXNBdHRyaWJ1dGUoXCJuYW1lXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcnVsZU5hbWUgPSBydWxlLmdldEF0dHJpYnV0ZU5vZGUoXCJuYW1lXCIpPy5ub2RlVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkZXNjID0gcnVsZS5xdWVyeVNlbGVjdG9yKFwicnVsZT5kZXNjcmlwdGlvblwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChydWxlTmFtZSAmJiBkZXNjKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZi5fcnVsZXMuc2V0KHJ1bGVOYW1lLCBkZXNjLnRleHRDb250ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICBQYXJzZVVuaXRzKHJvb3QsIGYpO1xuXG4gICAgICAgICAgICByb3N0ZXIuX2ZvcmNlcy5wdXNoKGYpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBEdXBsaWNhdGVGb3JjZShmb3JjZTogRm9yY2UzMGssIHJvc3RlcjogUm9zdGVyMzBrKTogYm9vbGVhbiB7XG4gICAgaWYgKCFyb3N0ZXIgfHwgIWZvcmNlKSByZXR1cm4gZmFsc2U7XG5cbiAgICBmb3IgKGxldCBmIG9mIHJvc3Rlci5fZm9yY2VzKSB7XG4gICAgICAgIGlmIChmLl9jYXRhbG9nID09PSBmb3JjZS5fY2F0YWxvZykgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gUGFyc2VVbml0cyhyb290OiBFbGVtZW50LCBmb3JjZTogRm9yY2UzMGspOiB2b2lkIHtcbiAgICBsZXQgc2VsZWN0aW9ucyA9IHJvb3QucXVlcnlTZWxlY3RvckFsbChcImZvcmNlPnNlbGVjdGlvbnM+c2VsZWN0aW9uXCIpO1xuICAgIGZvciAobGV0IHNlbGVjdGlvbiBvZiBzZWxlY3Rpb25zKSB7XG4gICAgICAgIGxldCB1bml0ID0gQ3JlYXRlVW5pdChzZWxlY3Rpb24pO1xuICAgICAgICBpZiAodW5pdCAmJiB1bml0Ll9yb2xlICE9IFVuaXRSb2xlMzBrLk5PTkUpIHtcbiAgICAgICAgICAgIGZvcmNlLl91bml0cy5wdXNoKHVuaXQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gU29ydCBmb3JjZSB1bml0cyBieSByb2xlLlxuICAgIGZvcmNlLl91bml0cy5zb3J0KChhOiBVbml0MzBrLCBiOiBVbml0MzBrKTogbnVtYmVyID0+IHtcbiAgICAgICAgaWYgKGEuX3JvbGUgPiBiLl9yb2xlKSByZXR1cm4gMTtcbiAgICAgICAgZWxzZSBpZiAoYS5fcm9sZSA9PSBiLl9yb2xlKSByZXR1cm4gMDtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBMb29rdXBSb2xlKHJvbGVUZXh0OiBzdHJpbmcpOiBVbml0Um9sZTMwayB7XG4gICAgc3dpdGNoIChyb2xlVGV4dCkge1xuICAgICAgICBjYXNlICdIUSc6IHJldHVybiBVbml0Um9sZTMway5IUTtcbiAgICAgICAgY2FzZSAnVHJvb3BzJzogcmV0dXJuIFVuaXRSb2xlMzBrLlRSO1xuICAgICAgICBjYXNlICdFbGl0ZXMnOiByZXR1cm4gVW5pdFJvbGUzMGsuRUw7XG4gICAgICAgIGNhc2UgJ0Zhc3QgQXR0YWNrJzogcmV0dXJuIFVuaXRSb2xlMzBrLkZBO1xuICAgICAgICBjYXNlICdIZWF2eSBTdXBwb3J0JzogcmV0dXJuIFVuaXRSb2xlMzBrLkhTO1xuICAgICAgICBjYXNlICdGbHllcic6IHJldHVybiBVbml0Um9sZTMway5GTDtcbiAgICAgICAgY2FzZSAnRGVkaWNhdGVkIFRyYW5zcG9ydCc6IHJldHVybiBVbml0Um9sZTMway5EVDtcbiAgICAgICAgY2FzZSAnRm9ydGlmaWNhdGlvbic6IHJldHVybiBVbml0Um9sZTMway5GVDtcbiAgICAgICAgY2FzZSAnTG9yZCBvZiBXYXInOiByZXR1cm4gVW5pdFJvbGUzMGsuTFc7XG4gICAgfVxuICAgIHJldHVybiBVbml0Um9sZTMway5OT05FO1xufVxuXG5mdW5jdGlvbiBDcmVhdGVVbml0KHJvb3Q6IEVsZW1lbnQpOiBVbml0MzBrIHwgbnVsbCB7XG4gICAgbGV0IHVuaXQ6IFVuaXQzMGsgPSBuZXcgVW5pdDMwaygpO1xuICAgIGxldCB1bml0TmFtZSA9IHJvb3QuZ2V0QXR0cmlidXRlTm9kZShcIm5hbWVcIik/Lm5vZGVWYWx1ZTtcbiAgICBpZiAodW5pdE5hbWUpIHtcbiAgICAgICAgdW5pdC5fbmFtZSA9IHVuaXROYW1lO1xuICAgIH1cblxuICAgIGxldCBjYXRlZ29yaWVzID0gcm9vdC5xdWVyeVNlbGVjdG9yQWxsKFwiOnNjb3BlIGNhdGVnb3JpZXM+Y2F0ZWdvcnlcIik7XG4gICAgZm9yIChsZXQgY2F0IG9mIGNhdGVnb3JpZXMpIHtcbiAgICAgICAgbGV0IGNhdE5hbWUgPSBjYXQuZ2V0QXR0cmlidXRlTm9kZShcIm5hbWVcIik/Lm5vZGVWYWx1ZTtcbiAgICAgICAgaWYgKGNhdE5hbWUpIHtcbiAgICAgICAgICAgIGNvbnN0IGZhY3RQYXR0ZXJuID0gXCJGYWN0aW9uOiBcIjtcbiAgICAgICAgICAgIGNvbnN0IGZhY3RJbmRleCA9IGNhdE5hbWUubGFzdEluZGV4T2YoZmFjdFBhdHRlcm4pO1xuICAgICAgICAgICAgaWYgKGZhY3RJbmRleCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmFjdEtleXdvcmQgPSBjYXROYW1lLnNsaWNlKGZhY3RJbmRleCArIGZhY3RQYXR0ZXJuLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgdW5pdC5fZmFjdGlvbnMuYWRkKGZhY3RLZXl3b3JkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJvbGVUZXh0ID0gY2F0TmFtZS50cmltKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgdW5pdFJvbGUgPSBMb29rdXBSb2xlKHJvbGVUZXh0KTtcbiAgICAgICAgICAgICAgICBpZiAodW5pdFJvbGUgIT0gVW5pdFJvbGUzMGsuTk9ORSkge1xuICAgICAgICAgICAgICAgICAgICB1bml0Ll9yb2xlID0gdW5pdFJvbGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBLZXl3b3JkXG4gICAgICAgICAgICAgICAgICAgIHVuaXQuX2tleXdvcmRzLmFkZChjYXROYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBGaXJzdCBwYXNzIC0gZmluZCBhbGwgdW5pdHMsIHZlaGljbGVzLCBmbHllcnMsIGV0Yy5cbiAgICBsZXQgYWN0aXZlTW9kZWw6IE1vZGVsMzBrIHwgbnVsbCA9IG51bGw7XG4gICAgbGV0IGFjdGl2ZVdhbGtlcjogV2Fsa2VyMzBrIHwgbnVsbCA9IG51bGw7XG4gICAgbGV0IGFjdGl2ZVZlaGljbGU6IFZlaGljbGUzMGsgfCBudWxsID0gbnVsbDtcbiAgICBsZXQgYWN0aXZlRmx5ZXI6IEZseWVyMzBrIHwgbnVsbCA9IG51bGw7XG5cbiAgICBsZXQgcHJvcHMgPSByb290LnF1ZXJ5U2VsZWN0b3JBbGwoXCI6c2NvcGUgcHJvZmlsZXM+cHJvZmlsZVwiKTtcbiAgICBmb3IgKGxldCBwcm9wIG9mIHByb3BzKSB7XG4gICAgICAgIC8vIFdoYXQga2luZCBvZiBwcm9wIGlzIHRoaXNcbiAgICAgICAgbGV0IHByb3BOYW1lID0gcHJvcC5nZXRBdHRyaWJ1dGVOb2RlKFwibmFtZVwiKT8ubm9kZVZhbHVlO1xuICAgICAgICBsZXQgcHJvcFR5cGUgPSBwcm9wLmdldEF0dHJpYnV0ZU5vZGUoXCJ0eXBlTmFtZVwiKT8ubm9kZVZhbHVlO1xuICAgICAgICBpZiAocHJvcE5hbWUgJiYgcHJvcFR5cGUpIHtcbiAgICAgICAgICAgIGlmIChwcm9wVHlwZSA9PT0gXCJVbml0XCIpIHtcbiAgICAgICAgICAgICAgICBhY3RpdmVNb2RlbCA9IG5ldyBNb2RlbDMwaygpO1xuICAgICAgICAgICAgICAgIGFjdGl2ZU1vZGVsLl9uYW1lID0gcHJvcE5hbWU7XG4gICAgICAgICAgICAgICAgbGV0IGNoYXJzID0gcHJvcC5xdWVyeVNlbGVjdG9yQWxsKFwiY2hhcmFjdGVyaXN0aWNzPmNoYXJhY3RlcmlzdGljXCIpO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGNoYXIgb2YgY2hhcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNoYXJOYW1lID0gY2hhci5nZXRBdHRyaWJ1dGVOb2RlKFwibmFtZVwiKT8ubm9kZVZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hhck5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGFyLnRleHRDb250ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChjaGFyTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdXUyc6IGFjdGl2ZU1vZGVsLl93cyA9IGNoYXIudGV4dENvbnRlbnQ7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdCUyc6IGFjdGl2ZU1vZGVsLl9icyA9IGNoYXIudGV4dENvbnRlbnQ7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdTJzogYWN0aXZlTW9kZWwuX3N0ciA9ICtjaGFyLnRleHRDb250ZW50OyBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnVCc6IGFjdGl2ZU1vZGVsLl90b3VnaG5lc3MgPSArY2hhci50ZXh0Q29udGVudDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ1cnOiBhY3RpdmVNb2RlbC5fd291bmRzID0gK2NoYXIudGV4dENvbnRlbnQ7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdJJzogYWN0aXZlTW9kZWwuX2luaXRpYXRpdmUgPSArY2hhci50ZXh0Q29udGVudDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ0EnOiBhY3RpdmVNb2RlbC5fYXR0YWNrcyA9IGNoYXIudGV4dENvbnRlbnQ7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdMZCc6IGFjdGl2ZU1vZGVsLl9sZWFkZXJzaGlwID0gK2NoYXIudGV4dENvbnRlbnQ7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdTYXZlJzogYWN0aXZlTW9kZWwuX3NhdmUgPSBjaGFyLnRleHRDb250ZW50OyBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBHZXQgcGFyZW50IG5vZGUgKGEgc2VsZWN0aW9uKSB0byBkZXRlcm1pbmUgbW9kZWwgY291bnQuXG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm9wLnBhcmVudEVsZW1lbnQgJiYgcHJvcC5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudFNlbGVjdGlvbiA9IHByb3AucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvdW50VmFsdWUgPSBwYXJlbnRTZWxlY3Rpb24uZ2V0QXR0cmlidXRlTm9kZShcIm51bWJlclwiKT8ubm9kZVZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvdW50VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVNb2RlbC5fY291bnQgPSArY291bnRWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB1bml0Ll9tb2RlbHMucHVzaChhY3RpdmVNb2RlbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChwcm9wVHlwZSA9PT0gXCJXYWxrZXJcIikge1xuICAgICAgICAgICAgICAgIGFjdGl2ZVdhbGtlciA9IG5ldyBXYWxrZXIzMGsoKTtcbiAgICAgICAgICAgICAgICBhY3RpdmVXYWxrZXIuX25hbWUgPSBwcm9wTmFtZTtcbiAgICAgICAgICAgICAgICBsZXQgY2hhcnMgPSBwcm9wLnF1ZXJ5U2VsZWN0b3JBbGwoXCJjaGFyYWN0ZXJpc3RpY3M+Y2hhcmFjdGVyaXN0aWNcIik7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgY2hhciBvZiBjaGFycykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgY2hhck5hbWUgPSBjaGFyLmdldEF0dHJpYnV0ZU5vZGUoXCJuYW1lXCIpPy5ub2RlVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGFyTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXIudGV4dENvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGNoYXJOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ1dTJzogYWN0aXZlV2Fsa2VyLl93cyA9IGNoYXIudGV4dENvbnRlbnQ7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdCUyc6IGFjdGl2ZVdhbGtlci5fYnMgPSBjaGFyLnRleHRDb250ZW50OyBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnUyc6IGFjdGl2ZVdhbGtlci5fc3RyID0gK2NoYXIudGV4dENvbnRlbnQ7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdGcm9udCc6IGFjdGl2ZVdhbGtlci5fZnJvbnQgPSArY2hhci50ZXh0Q29udGVudDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ1NpZGUnOiBhY3RpdmVXYWxrZXIuX3NpZGUgPSArY2hhci50ZXh0Q29udGVudDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ1JlYXInOiBhY3RpdmVXYWxrZXIuX3JlYXIgPSArY2hhci50ZXh0Q29udGVudDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ0knOiBhY3RpdmVXYWxrZXIuX2luaXRpYXRpdmUgPSArY2hhci50ZXh0Q29udGVudDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ0EnOiBhY3RpdmVXYWxrZXIuX2F0dGFja3MgPSBjaGFyLnRleHRDb250ZW50OyBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnSFAnOiBhY3RpdmVXYWxrZXIuX2hwID0gK2NoYXIudGV4dENvbnRlbnQ7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdUeXBlJzogYWN0aXZlV2Fsa2VyLl90eXBlID0gY2hhci50ZXh0Q29udGVudDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHVuaXQuX3dhbGtlcnMucHVzaChhY3RpdmVXYWxrZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocHJvcFR5cGUgPT09IFwiVmVoaWNsZVwiKSB7XG4gICAgICAgICAgICAgICAgYWN0aXZlVmVoaWNsZSA9IG5ldyBWZWhpY2xlMzBrKCk7XG4gICAgICAgICAgICAgICAgYWN0aXZlVmVoaWNsZS5fbmFtZSA9IHByb3BOYW1lO1xuICAgICAgICAgICAgICAgIGxldCBjaGFycyA9IHByb3AucXVlcnlTZWxlY3RvckFsbChcImNoYXJhY3RlcmlzdGljcz5jaGFyYWN0ZXJpc3RpY1wiKTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBjaGFyIG9mIGNoYXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjaGFyTmFtZSA9IGNoYXIuZ2V0QXR0cmlidXRlTm9kZShcIm5hbWVcIik/Lm5vZGVWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXJOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hhci50ZXh0Q29udGVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoY2hhck5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnQlMnOiBhY3RpdmVWZWhpY2xlLl9icyA9IGNoYXIudGV4dENvbnRlbnQ7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdGcm9udCc6IGFjdGl2ZVZlaGljbGUuX2Zyb250ID0gK2NoYXIudGV4dENvbnRlbnQ7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdTaWRlJzogYWN0aXZlVmVoaWNsZS5fc2lkZSA9ICtjaGFyLnRleHRDb250ZW50OyBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnUmVhcic6IGFjdGl2ZVZlaGljbGUuX3JlYXIgPSArY2hhci50ZXh0Q29udGVudDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ0hQJzogYWN0aXZlVmVoaWNsZS5faHAgPSArY2hhci50ZXh0Q29udGVudDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ1R5cGUnOiBhY3RpdmVWZWhpY2xlLl90eXBlID0gY2hhci50ZXh0Q29udGVudDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHVuaXQuX3ZlaGljbGVzLnB1c2goYWN0aXZlVmVoaWNsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChwcm9wVHlwZSA9PT0gXCJGbHllclwiKSB7XG4gICAgICAgICAgICAgICAgYWN0aXZlRmx5ZXIgPSBuZXcgRmx5ZXIzMGsoKTtcbiAgICAgICAgICAgICAgICBhY3RpdmVGbHllci5fbmFtZSA9IHByb3BOYW1lO1xuICAgICAgICAgICAgICAgIGxldCBjaGFycyA9IHByb3AucXVlcnlTZWxlY3RvckFsbChcImNoYXJhY3RlcmlzdGljcz5jaGFyYWN0ZXJpc3RpY1wiKTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBjaGFyIG9mIGNoYXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjaGFyTmFtZSA9IGNoYXIuZ2V0QXR0cmlidXRlTm9kZShcIm5hbWVcIik/Lm5vZGVWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXJOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hhci50ZXh0Q29udGVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoY2hhck5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnQlMnOiBhY3RpdmVGbHllci5fYnMgPSBjaGFyLnRleHRDb250ZW50OyBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnRnJvbnQnOiBhY3RpdmVGbHllci5fZnJvbnQgPSArY2hhci50ZXh0Q29udGVudDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ1NpZGUnOiBhY3RpdmVGbHllci5fc2lkZSA9ICtjaGFyLnRleHRDb250ZW50OyBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnUmVhcic6IGFjdGl2ZUZseWVyLl9yZWFyID0gK2NoYXIudGV4dENvbnRlbnQ7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdIUCc6IGFjdGl2ZUZseWVyLl9ocCA9ICtjaGFyLnRleHRDb250ZW50OyBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnQ29tYmF0IFJvbGUnOiBhY3RpdmVGbHllci5fcm9sZSA9IGNoYXIudGV4dENvbnRlbnQ7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdQdXJzdWl0JzogYWN0aXZlRmx5ZXIuX3B1cnN1aXQgPSBjaGFyLnRleHRDb250ZW50OyBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnQWdpbGl0eSc6IGFjdGl2ZUZseWVyLl9hZ2lsaXR5ID0gY2hhci50ZXh0Q29udGVudDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHVuaXQuX2ZseWVycy5wdXNoKGFjdGl2ZUZseWVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFNlY29uZCBwYXNzIC0gYXR0YWNoIGF0dHJpYnV0ZXMgdG8gbW9kZWxzLlxuICAgIGZvciAobGV0IHByb3Agb2YgcHJvcHMpIHtcbiAgICAgICAgLy8gV2hhdCBraW5kIG9mIHByb3AgaXMgdGhpc1xuICAgICAgICBsZXQgcHJvcE5hbWUgPSBwcm9wLmdldEF0dHJpYnV0ZU5vZGUoXCJuYW1lXCIpPy5ub2RlVmFsdWU7XG4gICAgICAgIGxldCBwcm9wVHlwZSA9IHByb3AuZ2V0QXR0cmlidXRlTm9kZShcInR5cGVOYW1lXCIpPy5ub2RlVmFsdWU7XG4gICAgICAgIGlmIChwcm9wTmFtZSAmJiBwcm9wVHlwZSkge1xuICAgICAgICAgICAgaWYgKHByb3BUeXBlID09PSBcIldhcmdlYXIgSXRlbVwiKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNoYXJzID0gcHJvcC5xdWVyeVNlbGVjdG9yQWxsKFwiY2hhcmFjdGVyaXN0aWNzPmNoYXJhY3RlcmlzdGljXCIpO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGNoYXIgb2YgY2hhcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNoYXJOYW1lID0gY2hhci5nZXRBdHRyaWJ1dGVOb2RlKFwibmFtZVwiKT8ubm9kZVZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hhck5hbWUgJiYgY2hhci50ZXh0Q29udGVudCAmJiBwcm9wTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXJOYW1lID09PSBcIkRlc2NyaXB0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bml0Ll9hYmlsaXRpZXMuc2V0KHByb3BOYW1lLCBjaGFyLnRleHRDb250ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHByb3BUeXBlID09PSBcIldlYXBvblwiKSB7XG4gICAgICAgICAgICAgICAgbGV0IHdlYXBvbjogV2VhcG9uMzBrID0gbmV3IFdlYXBvbjMwaygpO1xuICAgICAgICAgICAgICAgIHdlYXBvbi5fbmFtZSA9IHByb3BOYW1lO1xuICAgICAgICAgICAgICAgIGxldCBjaGFycyA9IHByb3AucXVlcnlTZWxlY3RvckFsbChcImNoYXJhY3RlcmlzdGljcz5jaGFyYWN0ZXJpc3RpY1wiKTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBjaGFyIG9mIGNoYXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjaGFyTmFtZSA9IGNoYXIuZ2V0QXR0cmlidXRlTm9kZShcIm5hbWVcIik/Lm5vZGVWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXJOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hhci50ZXh0Q29udGVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoY2hhck5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnUmFuZ2UnOiB3ZWFwb24uX3JhbmdlID0gY2hhci50ZXh0Q29udGVudDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ1R5cGUnOiB3ZWFwb24uX3R5cGUgPSBjaGFyLnRleHRDb250ZW50OyBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnU3RyZW5ndGgnOiB3ZWFwb24uX3N0ciA9IGNoYXIudGV4dENvbnRlbnQ7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdBUCc6IHdlYXBvbi5fYXAgPSBjaGFyLnRleHRDb250ZW50OyBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoYWN0aXZlTW9kZWwpIGFjdGl2ZU1vZGVsLl93ZWFwb25zLnB1c2god2VhcG9uKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChhY3RpdmVXYWxrZXIpIGFjdGl2ZVdhbGtlci5fd2VhcG9ucy5wdXNoKHdlYXBvbik7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYWN0aXZlVmVoaWNsZSkgYWN0aXZlVmVoaWNsZS5fd2VhcG9ucy5wdXNoKHdlYXBvbik7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYWN0aXZlRmx5ZXIpIGFjdGl2ZUZseWVyLl93ZWFwb25zLnB1c2god2VhcG9uKTtcbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJVbmV4cGVjdGVkOiBDcmVhdGVkIGEgd2VhcG9uIHdpdGhvdXQgYW4gYWN0aXZlIG1vZGVsLiAgVW5pdDogXCIgKyB1bml0TmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocHJvcFR5cGUgPT0gXCJUcmFuc3BvcnRcIikge1xuICAgICAgICAgICAgICAgIGxldCBjaGFycyA9IHByb3AucXVlcnlTZWxlY3RvckFsbChcImNoYXJhY3RlcmlzdGljcz5jaGFyYWN0ZXJpc3RpY1wiKTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBjaGFyIG9mIGNoYXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjaGFyTmFtZSA9IGNoYXIuZ2V0QXR0cmlidXRlTm9kZShcIm5hbWVcIik/Lm5vZGVWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXJOYW1lICYmIGNoYXIudGV4dENvbnRlbnQgJiYgcHJvcE5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGFyTmFtZSA9PT0gXCJDYXBhY2l0eVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5pdC5fYWJpbGl0aWVzLnNldChwcm9wTmFtZSwgY2hhci50ZXh0Q29udGVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChwcm9wVHlwZSA9PSBcIlBzeWNoaWMgUG93ZXJcIikge1xuICAgICAgICAgICAgICAgIGxldCBwb3dlcjogUHN5Y2hpY1Bvd2VyMzBrID0gbmV3IFBzeWNoaWNQb3dlcjMwaygpO1xuICAgICAgICAgICAgICAgIHBvd2VyLl9uYW1lID0gcHJvcE5hbWU7XG4gICAgICAgICAgICAgICAgbGV0IGNoYXJzID0gcHJvcC5xdWVyeVNlbGVjdG9yQWxsKFwiY2hhcmFjdGVyaXN0aWNzPmNoYXJhY3RlcmlzdGljXCIpO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGNoYXIgb2YgY2hhcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNoYXJOYW1lID0gY2hhci5nZXRBdHRyaWJ1dGVOb2RlKFwibmFtZVwiKT8ubm9kZVZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hhck5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGFyLnRleHRDb250ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChjaGFyTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdXYXJwIENoYXJnZSc6IHBvd2VyLl93YXJwQ2hhcmdlID0gK2NoYXIudGV4dENvbnRlbnQ7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdQb3dlciBDYXRlZ29yeSc6IHBvd2VyLl9jYXRlZ29yeSA9IGNoYXIudGV4dENvbnRlbnQ7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdSYW5nZSc6IHBvd2VyLl9yYW5nZSA9IGNoYXIudGV4dENvbnRlbnQ7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdEZXRhaWxzJzogcG93ZXIuX2RldGFpbHMgPSBjaGFyLnRleHRDb250ZW50OyBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGFjdGl2ZU1vZGVsKSBhY3RpdmVNb2RlbC5fcHN5Y2hpY1Bvd2Vycy5wdXNoKHBvd2VyKTtcbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJVbmV4cGVjdGVkOiBDcmVhdGVkIGEgcHN5Y2hpYyBwb3dlciB3aXRob3V0IGFuIGFjdGl2ZSBtb2RlbC4gIFVuaXQ6IFwiICsgdW5pdE5hbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHByb3BUeXBlID09IFwiUHN5a2VyXCIpIHtcbiAgICAgICAgICAgICAgICBsZXQgcHN5a2VyOiBQc3lrZXIzMGsgPSBuZXcgUHN5a2VyMzBrKCk7XG4gICAgICAgICAgICAgICAgcHN5a2VyLl9uYW1lID0gcHJvcE5hbWU7XG4gICAgICAgICAgICAgICAgbGV0IGNoYXJzID0gcHJvcC5xdWVyeVNlbGVjdG9yQWxsKFwiY2hhcmFjdGVyaXN0aWNzPmNoYXJhY3RlcmlzdGljXCIpO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGNoYXIgb2YgY2hhcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNoYXJOYW1lID0gY2hhci5nZXRBdHRyaWJ1dGVOb2RlKFwibmFtZVwiKT8ubm9kZVZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hhck5hbWUgJiYgY2hhci50ZXh0Q29udGVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChjaGFyTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ01hc3RlcnkgTGV2ZWwnOiBwc3lrZXIuX21hc3RlcnlMZXZlbCA9IGNoYXIudGV4dENvbnRlbnQ7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ0Rpc2NpcGxpbmVzJzogcHN5a2VyLl9kaXNjaXBsaW5lcyA9IGNoYXIudGV4dENvbnRlbnQ7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChhY3RpdmVNb2RlbCkgYWN0aXZlTW9kZWwuX3BzeWtlciA9IHBzeWtlcjsgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlVuZXhwZWN0ZWQ6IENyZWF0ZWQgYSBwc3lrZXIgd2l0aG91dCBhbiBhY3RpdmUgbW9kZWwuICBVbml0OiBcIiArIHVuaXROYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKHByb3BUeXBlID09PSBcIlVuaXRcIikgfHwgKHByb3BUeXBlID09PSBcIldhbGtlclwiKSB8fCAocHJvcFR5cGUgPT09IFwiVmVoaWNsZVwiKSkge1xuICAgICAgICAgICAgLy8gQWxyZWFkeSBoYW5kbGVkLlxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJVbmtub3duIHByb3BlcnR5IHR5cGU6IFwiICsgcHJvcFR5cGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gT25seSBtYXRjaCBjb3N0cy0+Y29zdHMgYXNzb2NpYXRlZCB3aXRoIHRoZSB1bml0IGFuZCBub3QgaXRzIGNoaWxkcmVuIChtb2RlbCBhbmQgd2VhcG9uKSBjb3N0cy5cbiAgICBsZXQgY29zdHMgPSByb290LnF1ZXJ5U2VsZWN0b3JBbGwoXCI6c2NvcGUgY29zdHM+Y29zdFwiKTtcbiAgICBmb3IgKGxldCBjb3N0IG9mIGNvc3RzKSB7XG4gICAgICAgIGlmIChjb3N0Lmhhc0F0dHJpYnV0ZShcIm5hbWVcIikgJiYgY29zdC5oYXNBdHRyaWJ1dGUoXCJ2YWx1ZVwiKSkge1xuICAgICAgICAgICAgbGV0IHdoaWNoID0gY29zdC5nZXRBdHRyaWJ1dGVOb2RlKFwibmFtZVwiKT8ubm9kZVZhbHVlO1xuICAgICAgICAgICAgbGV0IHZhbHVlID0gY29zdC5nZXRBdHRyaWJ1dGVOb2RlKFwidmFsdWVcIik/Lm5vZGVWYWx1ZTtcbiAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmICh3aGljaCA9PSBcInB0c1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIHVuaXQuX3BvaW50cyArPSArdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgbGV0IHJ1bGVzID0gcm9vdC5xdWVyeVNlbGVjdG9yQWxsKFwiOnNjb3BlIHJ1bGVzID4gcnVsZVwiKTtcbiAgICBmb3IgKGxldCBydWxlIG9mIHJ1bGVzKSB7XG4gICAgICAgIGlmIChydWxlLmhhc0F0dHJpYnV0ZShcIm5hbWVcIikpIHtcbiAgICAgICAgICAgIGxldCBydWxlTmFtZSA9IHJ1bGUuZ2V0QXR0cmlidXRlTm9kZShcIm5hbWVcIik/Lm5vZGVWYWx1ZTtcbiAgICAgICAgICAgIGxldCBkZXNjID0gcnVsZS5xdWVyeVNlbGVjdG9yKFwiZGVzY3JpcHRpb25cIik7XG4gICAgICAgICAgICBpZiAocnVsZU5hbWUgJiYgZGVzYyAmJiBkZXNjLnRleHRDb250ZW50KSB7XG4gICAgICAgICAgICAgICAgdW5pdC5fcnVsZXMuc2V0KHJ1bGVOYW1lLCBkZXNjLnRleHRDb250ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB1bml0O1xufVxuIiwiLypcbiAgICBDb3B5cmlnaHQgMjAyMCBSaWNrIFdleXJhdWNoLFxuXG4gICAgUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UgXG4gICAgd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZCwgcHJvdmlkZWQgdGhhdCB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZVxuICAgIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIGFwcGVhciBpbiBhbGwgY29waWVzLlxuXG4gICAgVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSCBcbiAgICBSRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIFxuICAgIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULCBcbiAgICBJTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST00gTE9TUyBcbiAgICBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1IgT1RIRVIgXG4gICAgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUiBQRVJGT1JNQU5DRSBcbiAgICBPRiBUSElTIFNPRlRXQVJFLlxuKi9cblxudHlwZSBXZWFwb25TdHJlbmd0aCA9IG51bWJlciB8IHN0cmluZztcblxuZXhwb3J0IGNsYXNzIFdlYXBvbiB7XG4gICAgX25hbWU6IHN0cmluZyA9IFwiXCI7XG4gICAgX3JhbmdlOiBzdHJpbmcgPSBcIk1lbGVlXCI7XG4gICAgX3R5cGU6IHN0cmluZyA9IFwiTWVsZWVcIjtcbiAgICBfc3RyOiBXZWFwb25TdHJlbmd0aCA9IFwidXNlclwiO1xuICAgIF9hcDogc3RyaW5nID0gXCJcIjtcbiAgICBfZGFtYWdlOiBzdHJpbmcgPSBcIlwiO1xuXG4gICAgX2FiaWxpdGllczogc3RyaW5nID0gXCJcIjtcbn1cblxuZXhwb3J0IGNsYXNzIFdvdW5kVHJhY2tlciB7XG4gICAgX25hbWU6IHN0cmluZyA9IFwiXCI7XG4gICAgX3RhYmxlOiBNYXA8c3RyaW5nLCBzdHJpbmc+ID0gbmV3IE1hcCgpO1xufVxuXG5leHBvcnQgY2xhc3MgRXhwbG9zaW9uIHtcbiAgICBfbmFtZTogc3RyaW5nID0gXCJcIjtcbiAgICBfZGljZVJvbGw6IHN0cmluZyA9IFwiXCI7XG4gICAgX2Rpc3RhbmNlOiBzdHJpbmcgPSBcIlwiO1xuICAgIF9tb3J0YWxXb3VuZHM6IHN0cmluZyA9IFwiXCI7XG59XG5cbmV4cG9ydCBjbGFzcyBQc3lrZXIge1xuICAgIF9uYW1lOiBzdHJpbmcgPSBcIlwiO1xuICAgIF9jYXN0OiBzdHJpbmcgPSBcIlwiO1xuICAgIF9kZW55OiBzdHJpbmcgPSBcIlwiO1xuICAgIF9wb3dlcnM6IHN0cmluZyA9IFwiXCI7XG4gICAgX290aGVyOiBzdHJpbmcgPSBcIlwiO1xufVxuXG5leHBvcnQgY2xhc3MgUHN5Y2hpY1Bvd2VyIHtcbiAgICBfbmFtZTogc3RyaW5nID0gXCJcIjtcbiAgICBfbWFuaWZlc3Q6IG51bWJlciA9IDA7XG4gICAgX3JhbmdlOiBzdHJpbmcgPSBcIlwiO1xuICAgIF9kZXRhaWxzOiBzdHJpbmcgPSBcIlwiO1xufVxuXG5leHBvcnQgZW51bSBVbml0Um9sZSB7XG4gICAgTk9ORSxcblxuICAgIC8vIDQwa1xuICAgIEhRLFxuICAgIFRSLFxuICAgIEVMLFxuICAgIEZBLFxuICAgIEhTLFxuICAgIEZMLFxuICAgIERULFxuICAgIEZULFxuICAgIExXLFxuXG4gICAgLy8gS2lsbCBUZWFtXG4gICAgQ09NTUFOREVSLFxuICAgIExFQURFUixcbiAgICBTUEVDSUFMSVNULFxuICAgIE5PTl9TUEVDSUFMSVNULFxufVxuXG5leHBvcnQgY29uc3QgVW5pdFJvbGVUb1N0cmluZzogc3RyaW5nW10gPSBbXG4gICAgJ05vbmUnLFxuXG4gICAgLy8gNDBrXG4gICAgJ0hRJyxcbiAgICAnVHJvb3BzJyxcbiAgICAnRWxpdGVzJyxcbiAgICAnRmFzdCBBdHRhY2snLFxuICAgICdIZWF2eSBTdXBwb3J0JyxcbiAgICAnRmx5ZXInLFxuICAgICdEZWRpY2F0ZWQgVHJhbnNwb3J0JyxcbiAgICAnRm9ydGlmaWNhdGlvbicsXG4gICAgJ0xvcmQgb2YgV2FyJyxcblxuICAgIC8vIEtpbGwgVGVhbVxuICAgICdDb21tYW5kZXInLFxuICAgICdMZWFkZXInLFxuICAgICdTcGVjaWFsaXN0JyxcbiAgICAnTm9uLXNwZWNpYWxpc3QnXG5dO1xuXG5leHBvcnQgY2xhc3MgTW9kZWwge1xuXG4gICAgX25hbWU6IHN0cmluZyA9IFwiXCI7XG4gICAgX2NvdW50OiBudW1iZXIgPSAwO1xuXG4gICAgLy8gQ2hhcmFjdGVyaXN0aWNzXG4gICAgX21vdmU6IHN0cmluZyA9IFwiMFxcXCJcIjtcbiAgICBfd3M6IHN0cmluZyA9IFwiXCI7XG4gICAgX2JzOiBzdHJpbmcgPSBcIlwiO1xuICAgIF9zdHI6IG51bWJlciA9IDQ7XG4gICAgX3RvdWdobmVzczogbnVtYmVyID0gNDtcbiAgICBfd291bmRzOiBudW1iZXIgPSAxO1xuICAgIF9hdHRhY2tzOiBzdHJpbmcgPSBcIlwiO1xuICAgIF9sZWFkZXJzaGlwOiBudW1iZXIgPSA3O1xuICAgIF9zYXZlOiBzdHJpbmcgPSBcIlwiO1xuXG4gICAgX3dlYXBvbnM6IFdlYXBvbltdID0gW107XG4gICAgX3BzeWtlcjogUHN5a2VyIHwgbnVsbCA9IG51bGw7XG4gICAgX3BzeWNoaWNQb3dlcnM6IFBzeWNoaWNQb3dlcltdID0gW107XG4gICAgX2V4cGxvc2lvbnM6IEV4cGxvc2lvbltdID0gW107XG59O1xuXG5leHBvcnQgY2xhc3MgUHJvZmlsZVRhYmxlIHtcbiAgICBfbmFtZTogc3RyaW5nID0gXCJcIjtcbiAgICBfdGFibGU6IE1hcDxzdHJpbmcsIHN0cmluZz5bXSA9IFtdO1xufVxuXG5leHBvcnQgY2xhc3MgVW5pdCB7XG5cbiAgICBfbmFtZTogc3RyaW5nID0gXCJcIjtcbiAgICBfcm9sZTogVW5pdFJvbGUgPSBVbml0Um9sZS5OT05FO1xuICAgIF9mYWN0aW9uczogU2V0PHN0cmluZz4gPSBuZXcgU2V0KCk7XG4gICAgX2tleXdvcmRzOiBTZXQ8c3RyaW5nPiA9IG5ldyBTZXQoKTtcblxuICAgIF9hYmlsaXRpZXM6IE1hcDxzdHJpbmcsIHN0cmluZz4gPSBuZXcgTWFwKCk7XG4gICAgX3J1bGVzOiBNYXA8c3RyaW5nLCBzdHJpbmc+ID0gbmV3IE1hcCgpO1xuXG4gICAgX21vZGVsczogTW9kZWxbXSA9IFtdO1xuXG4gICAgX3BvaW50czogbnVtYmVyID0gMDtcbiAgICBfcG93ZXJMZXZlbDogbnVtYmVyID0gMDtcbiAgICBfY29tbWFuZFBvaW50czogbnVtYmVyID0gMDtcblxuICAgIF93b3VuZFRyYWNrZXI6IFdvdW5kVHJhY2tlcltdID0gW107XG5cbiAgICBfcHJvZmlsZVRhYmxlczogTWFwPHN0cmluZywgUHJvZmlsZVRhYmxlPiA9IG5ldyBNYXAoKTtcbn1cblxuZXhwb3J0IGNsYXNzIEZvcmNlIHtcbiAgICBfY2F0YWxvZzogc3RyaW5nID0gXCJcIjtcbiAgICBfbmFtZTogc3RyaW5nID0gXCJVbmtub3duXCI7XG4gICAgX2ZhY3Rpb246IHN0cmluZyA9IFwiVW5rbm93blwiO1xuICAgIF9ydWxlczogTWFwPHN0cmluZywgc3RyaW5nIHwgbnVsbD4gPSBuZXcgTWFwKCk7XG4gICAgX3VuaXRzOiBVbml0W10gPSBbXTtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuXG4gICAgfVxufTtcblxuZXhwb3J0IGNsYXNzIFJvc3RlcjQwayB7XG4gICAgX3Bvd2VyTGV2ZWw6IG51bWJlciA9IDA7XG4gICAgX2NvbW1hbmRQb2ludHM6IG51bWJlciA9IDA7XG4gICAgX3BvaW50czogbnVtYmVyID0gMDtcbiAgICBfbmFtZTogc3RyaW5nID0gXCJcIjtcbiAgICBfZm9yY2VzOiBGb3JjZVtdID0gW107XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcblxuICAgIH1cbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBDcmVhdGU0MGtSb3N0ZXIoZG9jOiBEb2N1bWVudCwgaXM0MGs6IGJvb2xlYW4gPSB0cnVlKTogUm9zdGVyNDBrIHwgbnVsbCB7XG4gICAgaWYgKGRvYykge1xuICAgICAgICAvLyBEZXRlcm1pbmUgcm9zdGVyIHR5cGUgKGdhbWUgc3lzdGVtKS5cbiAgICAgICAgdmFyIGluZm8gPSBkb2MucXVlcnlTZWxlY3RvcihcInJvc3RlclwiKTtcbiAgICAgICAgaWYgKGluZm8pIHtcbiAgICAgICAgICAgIGNvbnN0IHJvc3RlciA9IG5ldyBSb3N0ZXI0MGsoKTtcblxuICAgICAgICAgICAgY29uc3QgbmFtZSA9IGluZm8uZ2V0QXR0cmlidXRlTm9kZShcIm5hbWVcIik/Lm5vZGVWYWx1ZTtcbiAgICAgICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgICAgICAgcm9zdGVyLl9uYW1lID0gbmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJvc3Rlci5fbmFtZSA9IFwiNDBrIEFybXkgUm9zdGVyXCI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIFBhcnNlUm9zdGVyUG9pbnRzKGRvYywgcm9zdGVyKTtcbiAgICAgICAgICAgIFBhcnNlRm9yY2VzKGRvYywgcm9zdGVyLCBpczQwayk7XG5cbiAgICAgICAgICAgIHJldHVybiByb3N0ZXI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIFBhcnNlUm9zdGVyUG9pbnRzKGRvYzogWE1MRG9jdW1lbnQsIHJvc3RlcjogUm9zdGVyNDBrKTogdm9pZCB7XG4gICAgdmFyIGNvc3RzID0gZG9jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJyb3N0ZXI+Y29zdHM+Y29zdFwiKTtcbiAgICBmb3IgKGxldCBjb3N0IG9mIGNvc3RzKSB7XG4gICAgICAgIGlmIChjb3N0Lmhhc0F0dHJpYnV0ZShcIm5hbWVcIikgJiYgY29zdC5oYXNBdHRyaWJ1dGUoXCJ2YWx1ZVwiKSkge1xuICAgICAgICAgICAgbGV0IHdoaWNoID0gY29zdC5nZXRBdHRyaWJ1dGVOb2RlKFwibmFtZVwiKT8ubm9kZVZhbHVlO1xuICAgICAgICAgICAgbGV0IHZhbHVlID0gY29zdC5nZXRBdHRyaWJ1dGVOb2RlKFwidmFsdWVcIik/Lm5vZGVWYWx1ZTtcbiAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmICh3aGljaCA9PSBcIiBQTFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJvc3Rlci5fcG93ZXJMZXZlbCA9ICt2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAod2hpY2ggPT09IFwicHRzXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcm9zdGVyLl9wb2ludHMgPSArdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHdoaWNoID09PSBcIkNQXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcm9zdGVyLl9jb21tYW5kUG9pbnRzID0gK3ZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gUGFyc2VGb3JjZXMoZG9jOiBYTUxEb2N1bWVudCwgcm9zdGVyOiBSb3N0ZXI0MGssIGlzNDBrOiBib29sZWFuKTogdm9pZCB7XG4gICAgdmFyIGZvcmNlc1Jvb3QgPSBkb2MucXVlcnlTZWxlY3RvckFsbChcInJvc3Rlcj5mb3JjZXM+Zm9yY2VcIik7XG4gICAgZm9yIChsZXQgcm9vdCBvZiBmb3JjZXNSb290KSB7XG4gICAgICAgIGlmIChyb290Lmhhc0F0dHJpYnV0ZShcIm5hbWVcIikgJiYgcm9vdC5oYXNBdHRyaWJ1dGUoXCJjYXRhbG9ndWVOYW1lXCIpKSB7XG5cbiAgICAgICAgICAgIGxldCBmID0gbmV3IEZvcmNlKCk7XG5cbiAgICAgICAgICAgIGxldCB3aGljaCA9IHJvb3QuZ2V0QXR0cmlidXRlTm9kZShcIm5hbWVcIik/Lm5vZGVWYWx1ZTtcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IHJvb3QuZ2V0QXR0cmlidXRlTm9kZShcImNhdGFsb2d1ZU5hbWVcIik/Lm5vZGVWYWx1ZTtcblxuICAgICAgICAgICAgaWYgKHdoaWNoKSB7XG4gICAgICAgICAgICAgICAgZi5fbmFtZSA9IHdoaWNoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgZi5fY2F0YWxvZyA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBUT0RPOiBEZXRlcm1pbmUgZm9yY2UgZmFjdGlvbiBhbmQgZmFjdGlvbiBzcGVjaWZpYyBydWxlcy5cblxuICAgICAgICAgICAgLy8gT25seSBpbmNsdWRlIHRoZSBhbGxlZ2lhbmNlIHJ1bGVzIG9uY2UuXG4gICAgICAgICAgICBpZiAoIUR1cGxpY2F0ZUZvcmNlKGYsIHJvc3RlcikpIHtcbiAgICAgICAgICAgICAgICB2YXIgcnVsZXMgPSByb290LnF1ZXJ5U2VsZWN0b3JBbGwoXCJmb3JjZT5ydWxlcz5ydWxlXCIpO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IHJ1bGUgb2YgcnVsZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJ1bGUuaGFzQXR0cmlidXRlKFwibmFtZVwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJ1bGVOYW1lID0gcnVsZS5nZXRBdHRyaWJ1dGVOb2RlKFwibmFtZVwiKT8ubm9kZVZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlc2MgPSBydWxlLnF1ZXJ5U2VsZWN0b3IoXCJydWxlPmRlc2NyaXB0aW9uXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJ1bGVOYW1lICYmIGRlc2MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmLl9ydWxlcy5zZXQocnVsZU5hbWUsIGRlc2MudGV4dENvbnRlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIFxuICAgICAgICAgICAgUGFyc2VVbml0cyhyb290LCBmLCBpczQwayk7XG5cbiAgICAgICAgICAgIHJvc3Rlci5fZm9yY2VzLnB1c2goZik7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIER1cGxpY2F0ZUZvcmNlKGZvcmNlOiBGb3JjZSwgcm9zdGVyOiBSb3N0ZXI0MGspOiBib29sZWFuIHtcbiAgICBpZiAoIXJvc3RlciB8fCAhZm9yY2UpIHJldHVybiBmYWxzZTtcblxuICAgICBmb3IgKGxldCBmIG9mIHJvc3Rlci5fZm9yY2VzKSB7XG4gICAgICAgIGlmIChmLl9jYXRhbG9nID09PSBmb3JjZS5fY2F0YWxvZykgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gUGFyc2VVbml0cyhyb290OiBFbGVtZW50LCBmb3JjZTogRm9yY2UsIGlzNDBrOiBib29sZWFuKTogdm9pZCB7XG4gICAgdmFyIHNlbGVjdGlvbnMgPSByb290LnF1ZXJ5U2VsZWN0b3JBbGwoXCJmb3JjZT5zZWxlY3Rpb25zPnNlbGVjdGlvblwiKTtcbiAgICBmb3IgKGxldCBzZWxlY3Rpb24gb2Ygc2VsZWN0aW9ucykge1xuICAgICAgICB2YXIgdW5pdCA9IENyZWF0ZVVuaXQoc2VsZWN0aW9uLCBpczQwayk7XG4gICAgICAgIGlmICh1bml0ICYmIHVuaXQuX3JvbGUgIT0gVW5pdFJvbGUuTk9ORSkge1xuICAgICAgICAgICAgZm9yY2UuX3VuaXRzLnB1c2godW5pdCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBTb3J0IGZvcmNlIHVuaXRzIGJ5IHJvbGUuXG4gICAgZm9yY2UuX3VuaXRzLnNvcnQoKGE6IFVuaXQsIGI6IFVuaXQpOiBudW1iZXIgPT4ge1xuICAgICAgICBpZiAoYS5fcm9sZSA+IGIuX3JvbGUpIHJldHVybiAxO1xuICAgICAgICBlbHNlIGlmIChhLl9yb2xlID09IGIuX3JvbGUpIHJldHVybiAwO1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIExvb2t1cFJvbGUocm9sZVRleHQ6IHN0cmluZyk6IFVuaXRSb2xlIHtcbiAgICBzd2l0Y2ggKHJvbGVUZXh0KSB7XG4gICAgICAgIGNhc2UgJ0hRJzogcmV0dXJuIFVuaXRSb2xlLkhRO1xuICAgICAgICBjYXNlICdUcm9vcHMnOiByZXR1cm4gVW5pdFJvbGUuVFI7XG4gICAgICAgIGNhc2UgJ0VsaXRlcyc6IHJldHVybiBVbml0Um9sZS5FTDtcbiAgICAgICAgY2FzZSAnRmFzdCBBdHRhY2snOiByZXR1cm4gVW5pdFJvbGUuRkE7XG4gICAgICAgIGNhc2UgJ0hlYXZ5IFN1cHBvcnQnOiByZXR1cm4gVW5pdFJvbGUuSFM7XG4gICAgICAgIGNhc2UgJ0ZseWVyJzogcmV0dXJuIFVuaXRSb2xlLkZMO1xuICAgICAgICBjYXNlICdEZWRpY2F0ZWQgVHJhbnNwb3J0JzogcmV0dXJuIFVuaXRSb2xlLkRUO1xuICAgICAgICBjYXNlICdGb3J0aWZpY2F0aW9uJzogcmV0dXJuIFVuaXRSb2xlLkZUO1xuICAgICAgICBjYXNlICdMb3JkIG9mIFdhcic6IHJldHVybiBVbml0Um9sZS5MVztcbiAgICB9XG4gICAgcmV0dXJuIFVuaXRSb2xlLk5PTkU7XG59XG5cbmZ1bmN0aW9uIExvb2t1cFJvbGVLaWxsVGVhbShyb2xlVGV4dDogc3RyaW5nKTogVW5pdFJvbGUge1xuICAgIHN3aXRjaCAocm9sZVRleHQpIHtcbiAgICAgICAgY2FzZSAnQ29tbWFuZGVyJzogcmV0dXJuIFVuaXRSb2xlLkNPTU1BTkRFUjtcbiAgICAgICAgY2FzZSAnTGVhZGVyJzogcmV0dXJuIFVuaXRSb2xlLkxFQURFUjtcbiAgICAgICAgY2FzZSAnU3BlY2lhbGlzdCc6IHJldHVybiBVbml0Um9sZS5TUEVDSUFMSVNUO1xuICAgICAgICBjYXNlICdOb24tc3BlY2lhbGlzdCc6IHJldHVybiBVbml0Um9sZS5OT05fU1BFQ0lBTElTVDtcbiAgICB9XG4gICAgcmV0dXJuIFVuaXRSb2xlLk5PTkU7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVW5rbm93blByb2ZpbGUocHJvcDogRWxlbWVudCwgdW5pdDogVW5pdCk6IHZvaWQge1xuXG4gICAgbGV0IHByb3BOYW1lID0gcHJvcC5nZXRBdHRyaWJ1dGVOb2RlKFwibmFtZVwiKT8ubm9kZVZhbHVlO1xuICAgIGxldCBwcm9wVHlwZSA9IHByb3AuZ2V0QXR0cmlidXRlTm9kZShcInR5cGVOYW1lXCIpPy5ub2RlVmFsdWU7XG5cbiAgICBjb25zb2xlLmxvZyhcIlVua25vd24gcHJvZmlsZSB0eXBlOiBcIiArIHByb3BUeXBlICsgXCIgd2l0aCBuYW1lOiBcIiArIHByb3BOYW1lICsgXCIuICBGb3VuZCBpbiB1bml0OiBcIiArIHVuaXQuX25hbWUpO1xuXG4gICAgLy8gVE9ETzogbWFrZSBhIHRhYmxlIG91dCBvZiB0aGUgdW5rbm93biBwcm9maWxlLlxuICAgIC8vXG4gICAgLy8gPHR5cGVOYW1lPiAgICAgIE5hbWUgICAgICAgICAgIDxjaGFyYWN0ZXJpc3RpYzEubmFtZT4gICAgPGNoYXJhY3RlcmlzdGljMi5uYW1lPiAuLi5cbiAgICAvLyAgICAgICAgICAgICAgIDxwcm9maWxlTmFtZT4gICAgPGNoYXJhY3RlcmlzdGljMS50ZXh0PiAgICA8Y2hhcmFjdGVyaXN0aWMyLnRleHQ+IC4uLlxuICAgIC8vXG5cbn1cblxuZnVuY3Rpb24gQ3JlYXRlVW5pdChyb290OiBFbGVtZW50LCBpczQwazogYm9vbGVhbik6IFVuaXQgfCBudWxsIHtcbiAgICB2YXIgdW5pdDogVW5pdCA9IG5ldyBVbml0KCk7XG4gICAgdmFyIHVuaXROYW1lID0gcm9vdC5nZXRBdHRyaWJ1dGVOb2RlKFwibmFtZVwiKT8ubm9kZVZhbHVlO1xuICAgIGlmICh1bml0TmFtZSkge1xuICAgICAgICB1bml0Ll9uYW1lID0gdW5pdE5hbWU7XG4gICAgfVxuXG4gICAgdmFyIGNhdGVnb3JpZXMgPSByb290LnF1ZXJ5U2VsZWN0b3JBbGwoXCI6c2NvcGUgY2F0ZWdvcmllcz5jYXRlZ29yeVwiKTtcbiAgICBmb3IgKGxldCBjYXQgb2YgY2F0ZWdvcmllcykge1xuICAgICAgICBsZXQgY2F0TmFtZSA9IGNhdC5nZXRBdHRyaWJ1dGVOb2RlKFwibmFtZVwiKT8ubm9kZVZhbHVlO1xuICAgICAgICBpZiAoY2F0TmFtZSkge1xuICAgICAgICAgICAgY29uc3QgZmFjdFBhdHRlcm4gPSBcIkZhY3Rpb246IFwiO1xuICAgICAgICAgICAgY29uc3QgZmFjdEluZGV4ID0gY2F0TmFtZS5sYXN0SW5kZXhPZihmYWN0UGF0dGVybik7XG4gICAgICAgICAgICBpZiAoZmFjdEluZGV4ID49IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmYWN0S2V5d29yZCA9IGNhdE5hbWUuc2xpY2UoZmFjdEluZGV4ICsgZmFjdFBhdHRlcm4ubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICB1bml0Ll9mYWN0aW9ucy5hZGQoZmFjdEtleXdvcmQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgcm9sZVRleHQgPSBjYXROYW1lLnRyaW0oKTtcbiAgICAgICAgICAgICAgICB2YXIgdW5pdFJvbGUgPSBMb29rdXBSb2xlKHJvbGVUZXh0KTtcbiAgICAgICAgICAgICAgICBpZiAodW5pdFJvbGUgIT0gVW5pdFJvbGUuTk9ORSkge1xuICAgICAgICAgICAgICAgICAgICB1bml0Ll9yb2xlID0gdW5pdFJvbGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzNDBrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1bml0Um9sZSA9IExvb2t1cFJvbGVLaWxsVGVhbShyb2xlVGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodW5pdFJvbGUgIT0gVW5pdFJvbGUuTk9ORSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuaXQuX3JvbGUgPSB1bml0Um9sZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEtleXdvcmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bml0Ll9rZXl3b3Jkcy5hZGQoY2F0TmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBLZXl3b3JkXG4gICAgICAgICAgICAgICAgICAgICAgICB1bml0Ll9rZXl3b3Jkcy5hZGQoY2F0TmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBGaXJzdCBwYXNzIC0gZmluZCBhbGwgbW9kZWxzXG4gICAgdmFyIHByb3BzID0gcm9vdC5xdWVyeVNlbGVjdG9yQWxsKFwiOnNjb3BlIHByb2ZpbGVzPnByb2ZpbGVcIik7XG4gICAgZm9yIChsZXQgcHJvcCBvZiBwcm9wcykge1xuICAgICAgICAvLyBXaGF0IGtpbmQgb2YgcHJvcCBpcyB0aGlzXG4gICAgICAgIGxldCBwcm9wTmFtZSA9IHByb3AuZ2V0QXR0cmlidXRlTm9kZShcIm5hbWVcIik/Lm5vZGVWYWx1ZTtcbiAgICAgICAgbGV0IHByb3BUeXBlID0gcHJvcC5nZXRBdHRyaWJ1dGVOb2RlKFwidHlwZU5hbWVcIik/Lm5vZGVWYWx1ZTtcbiAgICAgICAgaWYgKHByb3BOYW1lICYmIHByb3BUeXBlKSB7XG4gICAgICAgICAgICBpZiAoKHByb3BUeXBlID09PSBcIlVuaXRcIikgfHwgKHByb3BUeXBlID09PSBcIk1vZGVsXCIpKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1vZGVsOiBNb2RlbCA9IG5ldyBNb2RlbCgpO1xuICAgICAgICAgICAgICAgIG1vZGVsLl9uYW1lID0gcHJvcE5hbWU7XG4gICAgICAgICAgICAgICAgbGV0IGNoYXJzID0gcHJvcC5xdWVyeVNlbGVjdG9yQWxsKFwiY2hhcmFjdGVyaXN0aWNzPmNoYXJhY3RlcmlzdGljXCIpO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGNoYXIgb2YgY2hhcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNoYXJOYW1lID0gY2hhci5nZXRBdHRyaWJ1dGVOb2RlKFwibmFtZVwiKT8ubm9kZVZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hhck5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGFyLnRleHRDb250ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChjaGFyTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdNJzogbW9kZWwuX21vdmUgPSBjaGFyLnRleHRDb250ZW50OyBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnV1MnOiBtb2RlbC5fd3MgPSBjaGFyLnRleHRDb250ZW50OyBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnQlMnOiBtb2RlbC5fYnMgPSBjaGFyLnRleHRDb250ZW50OyBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnUyc6IG1vZGVsLl9zdHIgPSArY2hhci50ZXh0Q29udGVudDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ1QnOiBtb2RlbC5fdG91Z2huZXNzID0gK2NoYXIudGV4dENvbnRlbnQ7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdXJzogbW9kZWwuX3dvdW5kcyA9ICtjaGFyLnRleHRDb250ZW50OyBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnQSc6IG1vZGVsLl9hdHRhY2tzID0gY2hhci50ZXh0Q29udGVudDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ0xkJzogbW9kZWwuX2xlYWRlcnNoaXAgPSArY2hhci50ZXh0Q29udGVudDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ1NhdmUnOiBtb2RlbC5fc2F2ZSA9IGNoYXIudGV4dENvbnRlbnQ7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIEdldCBwYXJlbnQgbm9kZSAoYSBzZWxlY3Rpb24pIHRvIGRldGVybWluZSBtb2RlbCBjb3VudC5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHByb3AucGFyZW50RWxlbWVudCAmJiBwcm9wLnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyZW50U2VsZWN0aW9uID0gcHJvcC5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY291bnRWYWx1ZSA9IHBhcmVudFNlbGVjdGlvbi5nZXRBdHRyaWJ1dGVOb2RlKFwibnVtYmVyXCIpPy5ub2RlVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY291bnRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLl9jb3VudCA9ICtjb3VudFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHVuaXQuX21vZGVscy5wdXNoKG1vZGVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFNlY29uZCBwYXNzIC0gYXR0YWNoIGF0dHJpYnV0ZXMgdG8gbW9kZWxzLlxuICAgIGZvciAobGV0IHByb3Agb2YgcHJvcHMpIHtcbiAgICAgICAgLy8gV2hhdCBraW5kIG9mIHByb3AgaXMgdGhpc1xuICAgICAgICBsZXQgcHJvcE5hbWUgPSBwcm9wLmdldEF0dHJpYnV0ZU5vZGUoXCJuYW1lXCIpPy5ub2RlVmFsdWU7XG4gICAgICAgIGxldCBwcm9wVHlwZSA9IHByb3AuZ2V0QXR0cmlidXRlTm9kZShcInR5cGVOYW1lXCIpPy5ub2RlVmFsdWU7XG4gICAgICAgIGlmIChwcm9wTmFtZSAmJiBwcm9wVHlwZSkge1xuICAgICAgICAgICAgaWYgKChwcm9wVHlwZSA9PT0gXCJBYmlsaXRpZXNcIikgfHwgKHByb3BUeXBlID09PSBcIldhcmdlYXJcIikgfHwgKHByb3BUeXBlID09PSBcIkFiaWxpdHlcIikgfHxcbiAgICAgICAgICAgICAgICAocHJvcFR5cGUgPT09IFwiSG91c2Vob2xkIFRyYWRpdGlvblwiKSB8fCAocHJvcFR5cGUgPT09IFwiV2FybG9yZCBUcmFpdFwiKSB8fCAocHJvcFR5cGUgPT09IFwiQXN0cmEgTWlsaXRhcnVtIE9yZGVyc1wiKSB8fFxuICAgICAgICAgICAgICAgIChwcm9wVHlwZSA9PT0gXCJUYW5rIE9yZGVyc1wiKSB8fCAocHJvcFR5cGUgPT0gXCJMZXRoYWwgQW1idXNoXCIpKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNoYXJzID0gcHJvcC5xdWVyeVNlbGVjdG9yQWxsKFwiY2hhcmFjdGVyaXN0aWNzPmNoYXJhY3RlcmlzdGljXCIpO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGNoYXIgb2YgY2hhcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNoYXJOYW1lID0gY2hhci5nZXRBdHRyaWJ1dGVOb2RlKFwibmFtZVwiKT8ubm9kZVZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hhck5hbWUgJiYgY2hhci50ZXh0Q29udGVudCAmJiBwcm9wTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChjaGFyTmFtZSA9PT0gXCJEZXNjcmlwdGlvblwiKSB8fCAoY2hhck5hbWUgPT09IFwiQWJpbGl0eVwiKSB8fCAoY2hhck5hbWUgPT0gXCJFZmZlY3RcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bml0Ll9hYmlsaXRpZXMuc2V0KHByb3BOYW1lLCBjaGFyLnRleHRDb250ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHByb3BUeXBlID09PSBcIldlYXBvblwiKSB7XG4gICAgICAgICAgICAgICAgbGV0IHdlYXBvbjogV2VhcG9uID0gbmV3IFdlYXBvbigpO1xuICAgICAgICAgICAgICAgIHdlYXBvbi5fbmFtZSA9IHByb3BOYW1lO1xuICAgICAgICAgICAgICAgIGxldCBjaGFycyA9IHByb3AucXVlcnlTZWxlY3RvckFsbChcImNoYXJhY3RlcmlzdGljcz5jaGFyYWN0ZXJpc3RpY1wiKTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBjaGFyIG9mIGNoYXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjaGFyTmFtZSA9IGNoYXIuZ2V0QXR0cmlidXRlTm9kZShcIm5hbWVcIik/Lm5vZGVWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXJOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hhci50ZXh0Q29udGVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoY2hhck5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnUmFuZ2UnOiB3ZWFwb24uX3JhbmdlID0gY2hhci50ZXh0Q29udGVudDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ1R5cGUnOiB3ZWFwb24uX3R5cGUgPSBjaGFyLnRleHRDb250ZW50OyBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnUyc6IHdlYXBvbi5fc3RyID0gY2hhci50ZXh0Q29udGVudDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ0FQJzogd2VhcG9uLl9hcCA9IGNoYXIudGV4dENvbnRlbnQ7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdEJzogd2VhcG9uLl9kYW1hZ2UgPSBjaGFyLnRleHRDb250ZW50OyBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnQWJpbGl0aWVzJzogd2VhcG9uLl9hYmlsaXRpZXMgPSBjaGFyLnRleHRDb250ZW50OyBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodW5pdC5fbW9kZWxzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICB1bml0Ll9tb2RlbHNbdW5pdC5fbW9kZWxzLmxlbmd0aCAtIDFdLl93ZWFwb25zLnB1c2god2VhcG9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVW5leHBlY3RlZDogQ3JlYXRlZCBhIHdlYXBvbiB3aXRob3V0IGFuIGFjdGl2ZSBtb2RlbC4gIFVuaXQ6IFwiICsgdW5pdE5hbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHByb3BUeXBlLmluY2x1ZGVzKFwiV291bmQgVHJhY2tcIikgfHwgcHJvcFR5cGUuaW5jbHVkZXMoXCJTdGF0IERhbWFnZVwiKSkge1xuICAgICAgICAgICAgICAgIGxldCB0cmFja2VyID0gbmV3IFdvdW5kVHJhY2tlcigpO1xuICAgICAgICAgICAgICAgIHRyYWNrZXIuX25hbWUgPSBwcm9wTmFtZTtcbiAgICAgICAgICAgICAgICBsZXQgY2hhcnMgPSBwcm9wLnF1ZXJ5U2VsZWN0b3JBbGwoXCJjaGFyYWN0ZXJpc3RpY3M+Y2hhcmFjdGVyaXN0aWNcIik7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgY2hhciBvZiBjaGFycykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgY2hhck5hbWUgPSBjaGFyLmdldEF0dHJpYnV0ZU5vZGUoXCJuYW1lXCIpPy5ub2RlVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGFyTmFtZSAmJiBwcm9wTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXIudGV4dENvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFja2VyLl90YWJsZS5zZXQoY2hhck5hbWUsIGNoYXIudGV4dENvbnRlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2tlci5fdGFibGUuc2V0KGNoYXJOYW1lLCBcIi1cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdW5pdC5fd291bmRUcmFja2VyLnB1c2godHJhY2tlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChwcm9wVHlwZSA9PSBcIlRyYW5zcG9ydFwiKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNoYXJzID0gcHJvcC5xdWVyeVNlbGVjdG9yQWxsKFwiY2hhcmFjdGVyaXN0aWNzPmNoYXJhY3RlcmlzdGljXCIpO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGNoYXIgb2YgY2hhcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNoYXJOYW1lID0gY2hhci5nZXRBdHRyaWJ1dGVOb2RlKFwibmFtZVwiKT8ubm9kZVZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hhck5hbWUgJiYgY2hhci50ZXh0Q29udGVudCAmJiBwcm9wTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXJOYW1lID09PSBcIkNhcGFjaXR5XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bml0Ll9hYmlsaXRpZXMuc2V0KHByb3BOYW1lLCBjaGFyLnRleHRDb250ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHByb3BUeXBlID09IFwiUHN5Y2hpYyBQb3dlclwiKSB7XG4gICAgICAgICAgICAgICAgbGV0IHBvd2VyOiBQc3ljaGljUG93ZXIgPSBuZXcgUHN5Y2hpY1Bvd2VyKCk7XG4gICAgICAgICAgICAgICAgcG93ZXIuX25hbWUgPSBwcm9wTmFtZTtcbiAgICAgICAgICAgICAgICBsZXQgY2hhcnMgPSBwcm9wLnF1ZXJ5U2VsZWN0b3JBbGwoXCJjaGFyYWN0ZXJpc3RpY3M+Y2hhcmFjdGVyaXN0aWNcIik7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgY2hhciBvZiBjaGFycykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgY2hhck5hbWUgPSBjaGFyLmdldEF0dHJpYnV0ZU5vZGUoXCJuYW1lXCIpPy5ub2RlVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGFyTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXIudGV4dENvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGNoYXJOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ1JhbmdlJzogcG93ZXIuX3JhbmdlID0gY2hhci50ZXh0Q29udGVudDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ1dhcnAgQ2hhcmdlJzogcG93ZXIuX21hbmlmZXN0ID0gK2NoYXIudGV4dENvbnRlbnQ7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdEZXRhaWxzJzogcG93ZXIuX2RldGFpbHMgPSBjaGFyLnRleHRDb250ZW50OyBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHVuaXQuX21vZGVscy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgdW5pdC5fbW9kZWxzW3VuaXQuX21vZGVscy5sZW5ndGggLSAxXS5fcHN5Y2hpY1Bvd2Vycy5wdXNoKHBvd2VyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVW5leHBlY3RlZDogQ3JlYXRlZCBhIHBzeWNoaWMgcG93ZXIgd2l0aG91dCBhbiBhY3RpdmUgbW9kZWwuICBVbml0OiBcIiArIHVuaXROYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChwcm9wVHlwZS5pbmNsdWRlcyhcIkV4cGxvc2lvblwiKSkge1xuICAgICAgICAgICAgICAgIGxldCBleHBsb3Npb246IEV4cGxvc2lvbiA9IG5ldyBFeHBsb3Npb24oKTtcbiAgICAgICAgICAgICAgICBleHBsb3Npb24uX25hbWUgPSBwcm9wTmFtZTtcbiAgICAgICAgICAgICAgICBsZXQgY2hhcnMgPSBwcm9wLnF1ZXJ5U2VsZWN0b3JBbGwoXCJjaGFyYWN0ZXJpc3RpY3M+Y2hhcmFjdGVyaXN0aWNcIik7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgY2hhciBvZiBjaGFycykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgY2hhck5hbWUgPSBjaGFyLmdldEF0dHJpYnV0ZU5vZGUoXCJuYW1lXCIpPy5ub2RlVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGFyTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXIudGV4dENvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGNoYXJOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ0RpY2UgUm9sbCc6IGV4cGxvc2lvbi5fZGljZVJvbGwgPSBjaGFyLnRleHRDb250ZW50OyBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnRGlzdGFuY2UnOiBleHBsb3Npb24uX2Rpc3RhbmNlID0gY2hhci50ZXh0Q29udGVudDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ01vcnRhbCBXb3VuZHMnOiBleHBsb3Npb24uX21vcnRhbFdvdW5kcyA9IGNoYXIudGV4dENvbnRlbnQ7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodW5pdC5fbW9kZWxzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICB1bml0Ll9tb2RlbHNbdW5pdC5fbW9kZWxzLmxlbmd0aCAtIDFdLl9leHBsb3Npb25zLnB1c2goZXhwbG9zaW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVW5leHBlY3RlZDogQ3JlYXRlZCBhbiBleHBsb3Npb24gd2l0aG91dCBhbiBhY3RpdmUgbW9kZWwuICBVbml0OiBcIiArIHVuaXROYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChwcm9wVHlwZSA9PSBcIlBzeWtlclwiKSB7XG4gICAgICAgICAgICAgICAgbGV0IHBzeWtlcjogUHN5a2VyID0gbmV3IFBzeWtlcigpO1xuICAgICAgICAgICAgICAgIHBzeWtlci5fbmFtZSA9IHByb3BOYW1lO1xuICAgICAgICAgICAgICAgIGxldCBjaGFycyA9IHByb3AucXVlcnlTZWxlY3RvckFsbChcImNoYXJhY3RlcmlzdGljcz5jaGFyYWN0ZXJpc3RpY1wiKTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBjaGFyIG9mIGNoYXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjaGFyTmFtZSA9IGNoYXIuZ2V0QXR0cmlidXRlTm9kZShcIm5hbWVcIik/Lm5vZGVWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXJOYW1lICYmIGNoYXIudGV4dENvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoY2hhck5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdDYXN0JzogcHN5a2VyLl9jYXN0ID0gY2hhci50ZXh0Q29udGVudDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnRGVueSc6IHBzeWtlci5fZGVueSA9IGNoYXIudGV4dENvbnRlbnQ7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ1Bvd2VycyBLbm93bic6IHBzeWtlci5fcG93ZXJzID0gY2hhci50ZXh0Q29udGVudDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnT3RoZXInOiBwc3lrZXIuX290aGVyID0gY2hhci50ZXh0Q29udGVudDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHVuaXQuX21vZGVscy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgdW5pdC5fbW9kZWxzW3VuaXQuX21vZGVscy5sZW5ndGggLSAxXS5fcHN5a2VyID0gcHN5a2VyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJVbmV4cGVjdGVkOiBDcmVhdGVkIGEgcHN5a2VyIHdpdGhvdXQgYW4gYWN0aXZlIG1vZGVsLiAgVW5pdDogXCIgKyB1bml0TmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoKHByb3BUeXBlID09PSBcIlVuaXRcIikgfHwgKHByb3BUeXBlID09PSBcIk1vZGVsXCIpKSB7XG4gICAgICAgICAgICAgICAgLy8gQWxyZWFkeSBoYW5kbGVkLlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgIHBhcnNlVW5rbm93blByb2ZpbGUocHJvcCwgdW5pdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBPbmx5IG1hdGNoIGNvc3RzLT5jb3N0cyBhc3NvY2lhdGVkIHdpdGggdGhlIHVuaXQgYW5kIG5vdCBpdHMgY2hpbGRyZW4gKG1vZGVsIGFuZCB3ZWFwb24pIGNvc3RzLlxuICAgIHZhciBjb3N0cyA9IHJvb3QucXVlcnlTZWxlY3RvckFsbChcIjpzY29wZSBjb3N0cz5jb3N0XCIpO1xuICAgIGZvciAobGV0IGNvc3Qgb2YgY29zdHMpIHtcbiAgICAgICAgaWYgKGNvc3QuaGFzQXR0cmlidXRlKFwibmFtZVwiKSAmJiBjb3N0Lmhhc0F0dHJpYnV0ZShcInZhbHVlXCIpKSB7XG4gICAgICAgICAgICBsZXQgd2hpY2ggPSBjb3N0LmdldEF0dHJpYnV0ZU5vZGUoXCJuYW1lXCIpPy5ub2RlVmFsdWU7XG4gICAgICAgICAgICBsZXQgdmFsdWUgPSBjb3N0LmdldEF0dHJpYnV0ZU5vZGUoXCJ2YWx1ZVwiKT8ubm9kZVZhbHVlO1xuICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHdoaWNoID09IFwiIFBMXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdW5pdC5fcG93ZXJMZXZlbCArPSArdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHdoaWNoID09IFwicHRzXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdW5pdC5fcG9pbnRzICs9ICt2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAod2hpY2ggPT0gXCJDUFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHVuaXQuX2NvbW1hbmRQb2ludHMgKz0gK3ZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBydWxlcyA9IHJvb3QucXVlcnlTZWxlY3RvckFsbChcIjpzY29wZSBydWxlcyA+IHJ1bGVcIik7XG4gICAgZm9yIChsZXQgcnVsZSBvZiBydWxlcykge1xuICAgICAgICBpZiAocnVsZS5oYXNBdHRyaWJ1dGUoXCJuYW1lXCIpKSB7XG4gICAgICAgICAgICBsZXQgcnVsZU5hbWUgPSBydWxlLmdldEF0dHJpYnV0ZU5vZGUoXCJuYW1lXCIpPy5ub2RlVmFsdWU7XG4gICAgICAgICAgICB2YXIgZGVzYyA9IHJ1bGUucXVlcnlTZWxlY3RvcihcImRlc2NyaXB0aW9uXCIpO1xuICAgICAgICAgICAgaWYgKHJ1bGVOYW1lICYmIGRlc2MgJiYgZGVzYy50ZXh0Q29udGVudCkge1xuICAgICAgICAgICAgICAgIHVuaXQuX3J1bGVzLnNldChydWxlTmFtZSwgZGVzYy50ZXh0Q29udGVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdW5pdDtcbn1cbiIsIi8qXG4gICAgQ29weXJpZ2h0IDIwMjAgUmljayBXZXlyYXVjaCxcblxuICAgIFBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlIFxuICAgIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQsIHByb3ZpZGVkIHRoYXQgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2VcbiAgICBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBhcHBlYXIgaW4gYWxsIGNvcGllcy5cblxuICAgIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEggXG4gICAgUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBcbiAgICBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCwgXG4gICAgSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NIExPU1MgXG4gICAgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SIE9USEVSIFxuICAgIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1IgUEVSRk9STUFOQ0UgXG4gICAgT0YgVEhJUyBTT0ZUV0FSRS5cbiovXG5cbmV4cG9ydCBjbGFzcyBBb1NXZWFwb24ge1xuICAgIF9uYW1lOiBzdHJpbmcgPSBcIlwiO1xuICAgIF90eXBlOiBzdHJpbmcgPSBcIk1lbGVlXCI7IC8vIG9yIFwiTWlzc2lsZVwiXG4gICAgX3JhbmdlOiBzdHJpbmcgPSBcIlwiO1xuICAgIF9hdHRhY2tzOiBzdHJpbmcgPSBcIlwiO1xuICAgIF90b0hpdDogc3RyaW5nID0gXCJcIjtcbiAgICBfdG9Xb3VuZDogc3RyaW5nID0gXCJcIjtcbiAgICBfcmVuZDogc3RyaW5nID0gXCJcIjtcbiAgICBfZGFtYWdlOiBzdHJpbmcgPSBcIlwiO1xufVxuXG5leHBvcnQgY2xhc3MgQW9TV291bmRUcmFja2VyIHtcbiAgICBfbmFtZTogc3RyaW5nID0gXCJcIjtcbiAgICBfd291bmRUcmFja2VyTGFiZWxzOiBzdHJpbmdbXSA9IFtdO1xuICAgIF90YWJsZTogTWFwPHN0cmluZywgc3RyaW5nPiA9IG5ldyBNYXAoKTtcbn07XG5cbmV4cG9ydCBjbGFzcyBBb1NTcGVsbCB7XG4gICAgX25hbWU6IHN0cmluZyA9IFwiXCI7XG4gICAgX2Nhc3RpbmdWYWx1ZTogbnVtYmVyID0gMDtcbiAgICBfZGVzY3JpcHRpb246IHN0cmluZyA9IFwiXCI7XG59XG5cbmV4cG9ydCBjbGFzcyBBb1NQcmF5ZXIge1xuICAgIF9uYW1lOiBzdHJpbmcgPSBcIlwiO1xuICAgIF9kZXNjcmlwdGlvbjogc3RyaW5nID0gXCJcIjtcbn1cblxuZXhwb3J0IGNsYXNzIEFvU0FsbGVnaWFuY2Uge1xuICAgIF9uYW1lOiBzdHJpbmcgPSBcIlwiO1xuICAgIF9iYXR0bGVUcmFpdHM6IE1hcDxzdHJpbmcsIHN0cmluZz4gPSBuZXcgTWFwKCk7XG4gICAgX2NvbW1hbmRBYmlsaXRpZXM6IE1hcDxzdHJpbmcsIHN0cmluZz4gPSBuZXcgTWFwKCk7XG59XG5cbmV4cG9ydCBlbnVtIEFvU1VuaXRSb2xlIHtcbiAgICBOT05FLFxuXG4gICAgTEVBREVSLFxuICAgIEJBVFRMRUxJTkUsXG4gICAgQkVIRU1PVEgsXG4gICAgQVJUSUxMRVJZLFxuICAgIE9USEVSLFxuICAgIFNDRU5FUlksXG5cbiAgICBCQVRUQUxJT04sXG4gICAgTUFMSUdOX1NPUkNFUlksXG4gICAgUkVBTE0sXG59O1xuXG5leHBvcnQgY29uc3QgQW9TVW5pdFJvbGVUb1N0cmluZzogc3RyaW5nW10gPSBbXG4gICAgJ05vbmUnLFxuXG4gICAgJ0xlYWRlcicsXG4gICAgJ0JhdHRsZWxpbmUnLFxuICAgICdCZWhlbW90aCcsXG4gICAgJ0FydGlsbGVyeScsXG4gICAgJ090aGVyJyxcbiAgICAnU2NlbmVyeScsXG5cbiAgICAnQmF0dGFsaW9uJyxcbiAgICAnTWFsaWduIFNvcmNlcnknLFxuICAgICdSZWFsbSdcbl07XG5cbmV4cG9ydCBjbGFzcyBBb1NVbml0IHtcblxuICAgIF9uYW1lOiBzdHJpbmcgPSBcIlwiO1xuICAgIF9yb2xlOiBBb1NVbml0Um9sZSA9IEFvU1VuaXRSb2xlLk5PTkU7XG4gICAgX2tleXdvcmRzOiBTZXQ8c3RyaW5nPiA9IG5ldyBTZXQoKTtcblxuICAgIF9hYmlsaXRpZXM6IE1hcDxzdHJpbmcsIHN0cmluZz4gPSBuZXcgTWFwKCk7XG4gICAgX2NvbW1hbmRBYmlsaXRpZXM6IE1hcDxzdHJpbmcsIHN0cmluZz4gPSBuZXcgTWFwKCk7XG4gICAgX2NvbW1hbmRUcmFpdHM6IE1hcDxzdHJpbmcsIHN0cmluZz4gPSBuZXcgTWFwKCk7XG4gICAgX21hZ2ljOiBNYXA8c3RyaW5nLCBzdHJpbmc+ID0gbmV3IE1hcCgpO1xuICAgIF9hcnRlZmFjdHM6IE1hcDxzdHJpbmcsIHN0cmluZz4gPSBuZXcgTWFwKCk7XG5cbiAgICBfY291bnQ6IG51bWJlciA9IDA7XG5cbiAgICAvLyBDaGFyYWN0ZXJpc3RpY3NcbiAgICBfbW92ZTogc3RyaW5nID0gXCIwXFxcIlwiO1xuICAgIF93b3VuZHM6IG51bWJlciA9IDE7XG4gICAgX2JyYXZlcnk6IG51bWJlciA9IDc7XG4gICAgX3NhdmU6IHN0cmluZyA9IFwiXCI7XG5cbiAgICBfd2VhcG9uczogQW9TV2VhcG9uW10gPSBbXTtcbiAgICBfc3BlbGxzOiBBb1NTcGVsbFtdID0gW107XG4gICAgX3ByYXllcnM6IEFvU1ByYXllcltdID0gW107XG5cbiAgICBfcG9pbnRzOiBudW1iZXIgPSAwO1xuXG4gICAgX3dvdW5kVHJhY2tlcjogQW9TV291bmRUcmFja2VyfG51bGwgPSBudWxsO1xufVxuXG5leHBvcnQgY2xhc3MgQW9TRm9yY2Uge1xuICAgIF9jYXRhbG9nOiBzdHJpbmcgPSBcIlwiO1xuICAgIF9uYW1lOiBzdHJpbmcgPSBcIlVua25vd25cIjtcbiAgICBfYWxsZWdpYW5jZTogQW9TQWxsZWdpYW5jZTtcbiAgICBfdW5pdHM6IEFvU1VuaXRbXSA9IFtdO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuX2FsbGVnaWFuY2UgPSBuZXcgQW9TQWxsZWdpYW5jZSgpO1xuICAgIH1cbn07XG5cbmV4cG9ydCBjbGFzcyBSb3N0ZXJBb1Mge1xuICAgIF9jb21tYW5kUG9pbnRzOiBudW1iZXIgPSAwO1xuICAgIF9wb2ludHM6IG51bWJlciA9IDA7XG4gICAgX25hbWU6IHN0cmluZyA9IFwiXCI7XG4gICAgX2ZvcmNlczogQW9TRm9yY2VbXSA9IFtdO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG5cbiAgICB9XG59O1xuXG5mdW5jdGlvbiBMb29rdXBSb2xlKHJvbGVUZXh0OiBzdHJpbmcpOiBBb1NVbml0Um9sZSB7XG4gICAgc3dpdGNoIChyb2xlVGV4dCkge1xuICAgICAgICBjYXNlICdMZWFkZXInOiByZXR1cm4gQW9TVW5pdFJvbGUuTEVBREVSO1xuICAgICAgICBjYXNlICdCYXR0bGVsaW5lJzogcmV0dXJuIEFvU1VuaXRSb2xlLkJBVFRMRUxJTkU7XG4gICAgICAgIGNhc2UgJ090aGVyJzogcmV0dXJuIEFvU1VuaXRSb2xlLk9USEVSO1xuICAgICAgICBjYXNlICdCZWhlbW90aCc6IHJldHVybiBBb1NVbml0Um9sZS5CRUhFTU9USDtcbiAgICAgICAgY2FzZSAnQXJ0aWxsZXJ5JzogcmV0dXJuIEFvU1VuaXRSb2xlLkFSVElMTEVSWTtcbiAgICAgICAgY2FzZSAnU2NlbmVyeSc6IHJldHVybiBBb1NVbml0Um9sZS5TQ0VORVJZO1xuXG4gICAgICAgIGNhc2UgJ0JhdHRhbGlvbic6IHJldHVybiBBb1NVbml0Um9sZS5CQVRUQUxJT047XG4gICAgICAgIGNhc2UgJ01hbGlnbiBTb3JjZXJ5JzogcmV0dXJuIEFvU1VuaXRSb2xlLk1BTElHTl9TT1JDRVJZO1xuICAgICAgICBjYXNlICdSZWFsbSc6IHJldHVybiBBb1NVbml0Um9sZS5SRUFMTTtcbiAgICB9XG4gICAgcmV0dXJuIEFvU1VuaXRSb2xlLk5PTkU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBDcmVhdGVBb1NSb3N0ZXIoZG9jOiBEb2N1bWVudCk6IFJvc3RlckFvUyB8IG51bGwge1xuICAgIGlmIChkb2MpIHtcbiAgICAgICAgbGV0IGluZm8gPSBkb2MucXVlcnlTZWxlY3RvcihcInJvc3RlclwiKTtcbiAgICAgICAgaWYgKGluZm8pIHtcbiAgICAgICAgICAgIGNvbnN0IHJvc3RlciA9IG5ldyBSb3N0ZXJBb1MoKTtcblxuICAgICAgICAgICAgY29uc3QgbmFtZSA9IGluZm8uZ2V0QXR0cmlidXRlTm9kZShcIm5hbWVcIik/Lm5vZGVWYWx1ZTtcbiAgICAgICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgICAgICAgcm9zdGVyLl9uYW1lID0gbmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJvc3Rlci5fbmFtZSA9IFwiQWdlIG9mIFNpZ21hciBSb3N0ZXJcIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgUGFyc2VSb3N0ZXJQb2ludHMoZG9jLCByb3N0ZXIpO1xuICAgICAgICAgICAgUGFyc2VGb3JjZXMoZG9jLCByb3N0ZXIpO1xuXG4gICAgICAgICAgICByZXR1cm4gcm9zdGVyO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBQYXJzZVJvc3RlclBvaW50cyhkb2M6IFhNTERvY3VtZW50LCByb3N0ZXI6IFJvc3RlckFvUyk6IHZvaWQge1xuICAgIGxldCBjb3N0cyA9IGRvYy5xdWVyeVNlbGVjdG9yQWxsKFwicm9zdGVyPmNvc3RzPmNvc3RcIik7XG4gICAgZm9yIChsZXQgY29zdCBvZiBjb3N0cykge1xuICAgICAgICBpZiAoY29zdC5oYXNBdHRyaWJ1dGUoXCJuYW1lXCIpICYmIGNvc3QuaGFzQXR0cmlidXRlKFwidmFsdWVcIikpIHtcbiAgICAgICAgICAgIGxldCB3aGljaCA9IGNvc3QuZ2V0QXR0cmlidXRlTm9kZShcIm5hbWVcIik/Lm5vZGVWYWx1ZTtcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IGNvc3QuZ2V0QXR0cmlidXRlTm9kZShcInZhbHVlXCIpPy5ub2RlVmFsdWU7XG4gICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAod2hpY2ggPT09IFwicHRzXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcm9zdGVyLl9wb2ludHMgPSArdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBQYXJzZUZvcmNlcyhkb2M6IFhNTERvY3VtZW50LCByb3N0ZXI6IFJvc3RlckFvUyk6IHZvaWQge1xuICAgIGxldCBmb3JjZXNSb290ID0gZG9jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJyb3N0ZXI+Zm9yY2VzPmZvcmNlXCIpO1xuICAgIGZvciAobGV0IHJvb3Qgb2YgZm9yY2VzUm9vdCkge1xuICAgICAgICBpZiAocm9vdC5oYXNBdHRyaWJ1dGUoXCJuYW1lXCIpICYmIHJvb3QuaGFzQXR0cmlidXRlKFwiY2F0YWxvZ3VlTmFtZVwiKSkge1xuXG4gICAgICAgICAgICBsZXQgZiA9IG5ldyBBb1NGb3JjZSgpO1xuXG4gICAgICAgICAgICBsZXQgd2hpY2ggPSByb290LmdldEF0dHJpYnV0ZU5vZGUoXCJuYW1lXCIpPy5ub2RlVmFsdWU7XG4gICAgICAgICAgICBsZXQgdmFsdWUgPSByb290LmdldEF0dHJpYnV0ZU5vZGUoXCJjYXRhbG9ndWVOYW1lXCIpPy5ub2RlVmFsdWU7XG5cbiAgICAgICAgICAgIGlmICh3aGljaCkge1xuICAgICAgICAgICAgICAgIGYuX25hbWUgPSB3aGljaDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGYuX2NhdGFsb2cgPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgUGFyc2VTZWxlY3Rpb25zKHJvb3QsIGYpO1xuXG4gICAgICAgICAgICByb3N0ZXIuX2ZvcmNlcy5wdXNoKGYpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBQYXJzZVNlbGVjdGlvbnMocm9vdDogRWxlbWVudCwgZm9yY2U6IEFvU0ZvcmNlKTogdm9pZCB7XG4gICAgbGV0IHNlbGVjdGlvbnMgPSByb290LnF1ZXJ5U2VsZWN0b3JBbGwoXCJmb3JjZT5zZWxlY3Rpb25zPnNlbGVjdGlvblwiKTtcblxuICAgIGZvciAobGV0IHNlbGVjdGlvbiBvZiBzZWxlY3Rpb25zKSB7XG4gICAgICAgIC8vIFdoYXQga2luZCBvZiBzZWxlY3Rpb24gaXMgdGhpc1xuICAgICAgICBsZXQgc2VsZWN0aW9uVHlwZSA9IHNlbGVjdGlvbi5nZXRBdHRyaWJ1dGVOb2RlKFwidHlwZVwiKT8ubm9kZVZhbHVlO1xuICAgICAgICBpZiAoIXNlbGVjdGlvblR5cGUpIGNvbnRpbnVlO1xuICAgICAgICBsZXQgc2VsZWN0aW9uTmFtZSA9IHNlbGVjdGlvbi5nZXRBdHRyaWJ1dGVOb2RlKFwibmFtZVwiKT8ubm9kZVZhbHVlO1xuICAgICAgICBpZiAoc2VsZWN0aW9uTmFtZSAmJiAoc2VsZWN0aW9uTmFtZS5pbmNsdWRlcyhcIkFsbGVnaWFuY2VcIikpKSB7XG4gICAgICAgICAgICBsZXQgYWxsZWdpYW5jZSA9IFBhcnNlQWxsZWdpYW5jZShzZWxlY3Rpb24pO1xuICAgICAgICAgICAgaWYgKGFsbGVnaWFuY2UpIHtcbiAgICAgICAgICAgICAgICBmb3JjZS5fYWxsZWdpYW5jZSA9IGFsbGVnaWFuY2U7XG4gICAgICAgICAgICB9ICAgICBcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxldCB1bml0ID0gUGFyc2VVbml0KHNlbGVjdGlvbik7XG4gICAgICAgICAgICBpZiAodW5pdCAmJiAodW5pdC5fcm9sZSAhPSBBb1NVbml0Um9sZS5OT05FKSkge1xuICAgICAgICAgICAgICAgIGZvcmNlLl91bml0cy5wdXNoKHVuaXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gU29ydCBmb3JjZSB1bml0cyBieSByb2xlLlxuICAgIGZvcmNlLl91bml0cy5zb3J0KChhOiBBb1NVbml0LCBiOiBBb1NVbml0KTogbnVtYmVyID0+IHtcbiAgICAgICAgaWYgKGEuX3JvbGUgPiBiLl9yb2xlKSByZXR1cm4gMTtcbiAgICAgICAgZWxzZSBpZiAoYS5fcm9sZSA9PSBiLl9yb2xlKSByZXR1cm4gMDtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBQYXJzZVVuaXQocm9vdDogRWxlbWVudCk6IEFvU1VuaXQge1xuICAgIGxldCB1bml0OiBBb1NVbml0ID0gbmV3IEFvU1VuaXQoKTtcblxuICAgIGxldCBwcm9maWxlcyA9IHJvb3QucXVlcnlTZWxlY3RvckFsbChcInByb2ZpbGVzPnByb2ZpbGVcIik7XG4gICAgZm9yIChsZXQgcHJvZiBvZiBwcm9maWxlcykge1xuICAgICAgICBsZXQgcHJvZk5hbWUgPSBwcm9mLmdldEF0dHJpYnV0ZU5vZGUoXCJuYW1lXCIpPy5ub2RlVmFsdWU7XG4gICAgICAgIGxldCBwcm9mVHlwZSA9IHByb2YuZ2V0QXR0cmlidXRlTm9kZShcInR5cGVOYW1lXCIpPy5ub2RlVmFsdWU7XG4gICAgICAgIGlmIChwcm9mTmFtZSAmJiBwcm9mVHlwZSkge1xuICAgICAgICAgICAgaWYgKHByb2ZUeXBlID09IFwiVW5pdFwiKSB7XG4gICAgICAgICAgICAgICAgdW5pdC5fbmFtZSA9IHByb2ZOYW1lO1xuICAgICAgICAgICAgICAgIGxldCBjaGFycyA9IHByb2YucXVlcnlTZWxlY3RvckFsbChcImNoYXJhY3RlcmlzdGljcz5jaGFyYWN0ZXJpc3RpY1wiKTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBjaGFyIG9mIGNoYXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjaGFyTmFtZSA9IGNoYXIuZ2V0QXR0cmlidXRlTm9kZShcIm5hbWVcIik/Lm5vZGVWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXJOYW1lICYmIGNoYXIudGV4dENvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoY2hhck5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdNb3ZlJzogdW5pdC5fbW92ZSA9IGNoYXIudGV4dENvbnRlbnQ7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ1dvdW5kcyc6IHVuaXQuX3dvdW5kcyA9ICtjaGFyLnRleHRDb250ZW50OyBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdCcmF2ZXJ5JzogdW5pdC5fYnJhdmVyeSA9ICtjaGFyLnRleHRDb250ZW50OyBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdTYXZlJzogdW5pdC5fc2F2ZSA9IGNoYXIudGV4dENvbnRlbnQ7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocHJvZlR5cGUgPT0gXCJVbml0IEFiaWxpdGllc1wiKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNoYXIgPSBwcm9mLnF1ZXJ5U2VsZWN0b3IoXCJjaGFyYWN0ZXJpc3RpY3M+Y2hhcmFjdGVyaXN0aWNcIik7XG4gICAgICAgICAgICAgICAgaWYgKGNoYXIgJiYgY2hhci50ZXh0Q29udGVudCkge1xuICAgICAgICAgICAgICAgICAgICB1bml0Ll9hYmlsaXRpZXMuc2V0KHByb2ZOYW1lLCBjaGFyLnRleHRDb250ZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChwcm9mVHlwZSA9PSBcIkNvbW1hbmQgQWJpbGl0aWVzXCIpIHtcbiAgICAgICAgICAgICAgICBsZXQgY2hhciA9IHByb2YucXVlcnlTZWxlY3RvcihcImNoYXJhY3RlcmlzdGljcz5jaGFyYWN0ZXJpc3RpY1wiKTtcbiAgICAgICAgICAgICAgICBpZiAoY2hhciAmJiBjaGFyLnRleHRDb250ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHVuaXQuX2NvbW1hbmRBYmlsaXRpZXMuc2V0KHByb2ZOYW1lLCBjaGFyLnRleHRDb250ZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChwcm9mVHlwZSA9PSBcIk1hZ2ljXCIpIHtcbiAgICAgICAgICAgICAgICBsZXQgY2hhcmFjdGVyaXN0aWNzID0gcHJvZi5xdWVyeVNlbGVjdG9yQWxsKFwiY2hhcmFjdGVyaXN0aWNzPmNoYXJhY3RlcmlzdGljXCIpO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGNoYXIgb2YgY2hhcmFjdGVyaXN0aWNzKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjaGFyTmFtZSA9IGNoYXIuZ2V0QXR0cmlidXRlTm9kZShcIm5hbWVcIik/Lm5vZGVWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXJOYW1lICYmIGNoYXIudGV4dENvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuaXQuX21hZ2ljLnNldChjaGFyTmFtZSwgY2hhci50ZXh0Q29udGVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChwcm9mVHlwZSA9PSBcIlVuaXQgTGVhZGVyXCIpIHtcbiAgICAgICAgICAgICAgICBsZXQgY2hhciA9IHByb2YucXVlcnlTZWxlY3RvcihcImNoYXJhY3RlcmlzdGljcz5jaGFyYWN0ZXJpc3RpY1wiKTtcbiAgICAgICAgICAgICAgICBpZiAoY2hhciAmJiBjaGFyLnRleHRDb250ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHVuaXQuX2FiaWxpdGllcy5zZXQocHJvZlR5cGUsIGNoYXIudGV4dENvbnRlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHByb2ZUeXBlID09IFwiU3BlbGxcIikge1xuICAgICAgICAgICAgICAgIGxldCBzcGVsbCA9IG5ldyBBb1NTcGVsbCgpO1xuICAgICAgICAgICAgICAgIHNwZWxsLl9uYW1lID0gcHJvZk5hbWU7XG4gICAgICAgICAgICAgICAgbGV0IGNoYXJzID0gcHJvZi5xdWVyeVNlbGVjdG9yQWxsKFwiY2hhcmFjdGVyaXN0aWNzPmNoYXJhY3RlcmlzdGljXCIpO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGNoYXIgb2YgY2hhcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNoYXJOYW1lID0gY2hhci5nZXRBdHRyaWJ1dGVOb2RlKFwibmFtZVwiKT8ubm9kZVZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hhck5hbWUgJiYgY2hhci50ZXh0Q29udGVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChjaGFyTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ0Nhc3RpbmcgVmFsdWUnOiBzcGVsbC5fY2FzdGluZ1ZhbHVlID0gK2NoYXIudGV4dENvbnRlbnQ7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ0Rlc2NyaXB0aW9uJzogc3BlbGwuX2Rlc2NyaXB0aW9uID0gY2hhci50ZXh0Q29udGVudDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdW5pdC5fc3BlbGxzLnB1c2goc3BlbGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocHJvZlR5cGUgPT0gXCJXZWFwb25cIikge1xuICAgICAgICAgICAgICAgIGxldCB3ZWFwb24gPSBuZXcgQW9TV2VhcG9uKCk7XG4gICAgICAgICAgICAgICAgd2VhcG9uLl9uYW1lID0gcHJvZk5hbWU7XG4gICAgICAgICAgICAgICAgbGV0IGNoYXJzID0gcHJvZi5xdWVyeVNlbGVjdG9yQWxsKFwiY2hhcmFjdGVyaXN0aWNzPmNoYXJhY3RlcmlzdGljXCIpO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGNoYXIgb2YgY2hhcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNoYXJOYW1lID0gY2hhci5nZXRBdHRyaWJ1dGVOb2RlKFwibmFtZVwiKT8ubm9kZVZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hhck5hbWUgJiYgY2hhci50ZXh0Q29udGVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChjaGFyTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ1JhbmdlJzogd2VhcG9uLl9yYW5nZSA9IGNoYXIudGV4dENvbnRlbnQ7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ1R5cGUnOiB3ZWFwb24uX3R5cGUgPSBjaGFyLnRleHRDb250ZW50OyBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdBdHRhY2tzJzogd2VhcG9uLl9hdHRhY2tzID0gY2hhci50ZXh0Q29udGVudDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnUmVuZCc6IHdlYXBvbi5fcmVuZCA9IGNoYXIudGV4dENvbnRlbnQ7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ1RvIEhpdCc6IHdlYXBvbi5fdG9IaXQgPSBjaGFyLnRleHRDb250ZW50OyBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdUbyBXb3VuZCc6IHdlYXBvbi5fdG9Xb3VuZCA9IGNoYXIudGV4dENvbnRlbnQ7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ0RhbWFnZSc6IHdlYXBvbi5fZGFtYWdlID0gY2hhci50ZXh0Q29udGVudDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdW5pdC5fd2VhcG9ucy5wdXNoKHdlYXBvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChwcm9mVHlwZSA9PSBcIkNvbW1hbmQgVHJhaXRcIikge1xuICAgICAgICAgICAgICAgIGxldCBjaGFyID0gcHJvZi5xdWVyeVNlbGVjdG9yKFwiY2hhcmFjdGVyaXN0aWNzPmNoYXJhY3RlcmlzdGljXCIpO1xuICAgICAgICAgICAgICAgIGlmIChjaGFyICYmIGNoYXIudGV4dENvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdW5pdC5fY29tbWFuZFRyYWl0cy5zZXQocHJvZk5hbWUsIGNoYXIudGV4dENvbnRlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHByb2ZUeXBlID09IFwiQXJ0ZWZhY3RcIikge1xuICAgICAgICAgICAgICAgIGxldCBjaGFyID0gcHJvZi5xdWVyeVNlbGVjdG9yKFwiY2hhcmFjdGVyaXN0aWNzPmNoYXJhY3RlcmlzdGljXCIpO1xuICAgICAgICAgICAgICAgIGlmIChjaGFyICYmIGNoYXIudGV4dENvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdW5pdC5fYXJ0ZWZhY3RzLnNldChwcm9mTmFtZSwgY2hhci50ZXh0Q29udGVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocHJvZlR5cGUgPT0gXCJQcmF5ZXJcIikge1xuICAgICAgICAgICAgICAgIGxldCBwcmF5ZXIgPSBuZXcgQW9TUHJheWVyKCk7XG4gICAgICAgICAgICAgICAgcHJheWVyLl9uYW1lID0gcHJvZk5hbWU7XG4gICAgICAgICAgICAgICAgbGV0IGNoYXJzID0gcHJvZi5xdWVyeVNlbGVjdG9yQWxsKFwiY2hhcmFjdGVyaXN0aWNzPmNoYXJhY3RlcmlzdGljXCIpO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGNoYXIgb2YgY2hhcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNoYXJOYW1lID0gY2hhci5nZXRBdHRyaWJ1dGVOb2RlKFwibmFtZVwiKT8ubm9kZVZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hhck5hbWUgJiYgY2hhci50ZXh0Q29udGVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChjaGFyTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ0Rlc2NyaXB0aW9uJzogcHJheWVyLl9kZXNjcmlwdGlvbiA9IGNoYXIudGV4dENvbnRlbnQ7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHVuaXQuX3ByYXllcnMucHVzaChwcmF5ZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocHJvZlR5cGUuaW5jbHVkZXMoXCJXb3VuZCBUcmFja1wiKSB8fCBwcm9mVHlwZS5pbmNsdWRlcyhcIkRhbWFnZSBUYWJsZVwiKSB8fCBwcm9mVHlwZS5pbmNsdWRlcyhcIldvdW5kc1wiKSkge1xuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlVua25vd24gdW5pdCBwcm9maWxlIHR5cGU6IFwiICsgcHJvZlR5cGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgbGV0IGNvc3RzID0gcm9vdC5xdWVyeVNlbGVjdG9yQWxsKFwiY29zdHM+Y29zdFwiKTtcbiAgICBmb3IgKGxldCBjb3N0IG9mIGNvc3RzKSB7XG4gICAgICAgIGlmIChjb3N0Lmhhc0F0dHJpYnV0ZShcIm5hbWVcIikgJiYgY29zdC5oYXNBdHRyaWJ1dGUoXCJ2YWx1ZVwiKSkge1xuICAgICAgICAgICAgbGV0IHdoaWNoID0gY29zdC5nZXRBdHRyaWJ1dGVOb2RlKFwibmFtZVwiKT8ubm9kZVZhbHVlO1xuICAgICAgICAgICAgbGV0IHZhbHVlID0gY29zdC5nZXRBdHRyaWJ1dGVOb2RlKFwidmFsdWVcIik/Lm5vZGVWYWx1ZTtcbiAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmICh3aGljaCA9PT0gXCJwdHNcIikge1xuICAgICAgICAgICAgICAgICAgICB1bml0Ll9wb2ludHMgKz0gK3ZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGxldCBjYXRlZ29yaWVzID0gcm9vdC5xdWVyeVNlbGVjdG9yQWxsKFwiOnNjb3BlIGNhdGVnb3JpZXM+Y2F0ZWdvcnlcIik7XG4gICAgZm9yIChsZXQgY2F0ZWdvcnkgb2YgY2F0ZWdvcmllcykge1xuICAgICAgICBsZXQgY2F0TmFtZSA9IGNhdGVnb3J5LmdldEF0dHJpYnV0ZU5vZGUoXCJuYW1lXCIpPy5ub2RlVmFsdWU7XG4gICAgICAgIGxldCBjYXRQcmltYXJ5ID0gY2F0ZWdvcnkuZ2V0QXR0cmlidXRlTm9kZShcInByaW1hcnlcIik/Lm5vZGVWYWx1ZTtcbiAgICAgICAgaWYgKGNhdE5hbWUpIHtcbiAgICAgICAgICAgIGNvbnN0IHJvbGVUZXh0ID0gY2F0TmFtZS50cmltKCk7XG4gICAgICAgICAgICB2YXIgdW5pdFJvbGUgPSBMb29rdXBSb2xlKHJvbGVUZXh0KTtcbiAgICAgICAgICAgIGlmICh1bml0Um9sZSAhPSBBb1NVbml0Um9sZS5OT05FKSB7XG4gICAgICAgICAgICAgICAgdW5pdC5fcm9sZSA9IHVuaXRSb2xlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gS2V5d29yZFxuICAgICAgICAgICAgICAgIHVuaXQuX2tleXdvcmRzLmFkZChjYXROYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB1bml0O1xufVxuXG5mdW5jdGlvbiBQYXJzZUFsbGVnaWFuY2Uocm9vdDogRWxlbWVudCk6IEFvU0FsbGVnaWFuY2UgfCBudWxsIHtcbiAgICBsZXQgYWxsZWdpYW5jZTogQW9TQWxsZWdpYW5jZSB8IG51bGwgPSBudWxsO1xuICAgIGxldCBzZWxlY3Rpb24gPSByb290LnF1ZXJ5U2VsZWN0b3IoXCJzZWxlY3Rpb25zPnNlbGVjdGlvblwiKTtcbiAgICBpZiAoc2VsZWN0aW9uKSB7XG4gICAgICAgIGxldCBuYW1lID0gc2VsZWN0aW9uLmdldEF0dHJpYnV0ZU5vZGUoXCJuYW1lXCIpPy5ub2RlVmFsdWU7XG4gICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgICBhbGxlZ2lhbmNlID0gbmV3IEFvU0FsbGVnaWFuY2UoKTtcbiAgICAgICAgICAgIGFsbGVnaWFuY2UuX25hbWUgPSBuYW1lO1xuICAgICAgICB9XG4gICAgICAgIGxldCBwcm9maWxlcyA9IHNlbGVjdGlvbi5xdWVyeVNlbGVjdG9yQWxsKFwicHJvZmlsZXM+cHJvZmlsZVwiKTtcbiAgICAgICAgZm9yIChsZXQgcHJvZiBvZiBwcm9maWxlcykge1xuICAgICAgICAgICAgbGV0IHByb2ZOYW1lID0gcHJvZi5nZXRBdHRyaWJ1dGVOb2RlKFwibmFtZVwiKT8ubm9kZVZhbHVlO1xuICAgICAgICAgICAgbGV0IHByb2ZUeXBlID0gcHJvZi5nZXRBdHRyaWJ1dGVOb2RlKFwidHlwZU5hbWVcIik/Lm5vZGVWYWx1ZTtcbiAgICAgICAgICAgIGlmIChwcm9mTmFtZSAmJiBwcm9mVHlwZSkge1xuICAgICAgICAgICAgICAgIGlmIChwcm9mVHlwZSA9PSBcIkJhdHRsZSBUcmFpdFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBkZXNjID0gcHJvZi5xdWVyeVNlbGVjdG9yKFwiY2hhcmFjdGVyaXN0aWNzPmNoYXJhY3RlcmlzdGljXCIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGVzYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRlc2NyaXB0aW9uID0gZGVzYy50ZXh0Q29udGVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZXNjcmlwdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbGVnaWFuY2U/Ll9iYXR0bGVUcmFpdHMuc2V0KHByb2ZOYW1lLCBkZXNjcmlwdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocHJvZlR5cGUgPT0gXCJDb21tYW5kIEFiaWxpdGllc1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBkZXNjID0gcHJvZi5xdWVyeVNlbGVjdG9yKFwiY2hhcmFjdGVyaXN0aWNzPmNoYXJhY3RlcmlzdGljXCIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGVzYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRlc2NyaXB0aW9uID0gZGVzYy50ZXh0Q29udGVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZXNjcmlwdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbGVnaWFuY2U/Ll9jb21tYW5kQWJpbGl0aWVzLnNldChwcm9mTmFtZSwgZGVzY3JpcHRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlVuZXhwZWN0ZWQgYWxsZWdpYW5jZSBwcm9maWxlIHR5cGU6IFwiICsgcHJvZlR5cGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYWxsZWdpYW5jZTtcbn0iLCIvKlxuICAgIENvcHlyaWdodCAyMDIwIFJpY2sgV2V5cmF1Y2gsXG5cbiAgICBQZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSBcbiAgICB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLCBwcm92aWRlZCB0aGF0IHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlXG4gICAgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2UgYXBwZWFyIGluIGFsbCBjb3BpZXMuXG5cbiAgICBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIIFxuICAgIFJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgXG4gICAgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsIFxuICAgIElORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTSBMT1NTIFxuICAgIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUiBPVEhFUiBcbiAgICBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SIFBFUkZPUk1BTkNFIFxuICAgIE9GIFRISVMgU09GVFdBUkUuXG4qL1xuXG5leHBvcnQgY2xhc3MgV2FyY3J5QWxsZWdpYW5jZSB7XG4gICAgX25hbWU6IHN0cmluZyA9IFwiXCI7XG4gICAgX3J1bGVzOiBNYXA8c3RyaW5nLCBzdHJpbmc+ID0gbmV3IE1hcCgpO1xufVxuXG5leHBvcnQgY2xhc3MgV2FyY3J5V2VhcG9uIHtcbiAgICBfbmFtZTogc3RyaW5nID0gXCJcIjtcbiAgICBfcmFuZ2U6IHN0cmluZyA9IFwiXCI7XG4gICAgX2F0dGFja3M6IHN0cmluZyA9IFwiXCI7XG4gICAgX3N0cmVuZ3RoOiBzdHJpbmcgPSBcIlwiO1xuICAgIF9kYW1hZ2U6IHN0cmluZyA9IFwiXCI7IC8vIDxub3JtYWw+Lzxjcml0PlxufVxuXG5leHBvcnQgZW51bSBXYXJjcnlVbml0Um9sZSB7XG4gICAgTk9ORSxcblxuICAgIExFQURFUixcbiAgICBGSUdIVEVSLFxuICAgIEFMTFlcbn07XG5cbmV4cG9ydCBjb25zdCBXYXJjcnlVbml0Um9sZVRvU3RyaW5nOiBzdHJpbmdbXSA9IFtcbiAgICAnTm9uZScsXG5cbiAgICAnTGVhZGVyJyxcbiAgICAnRmlnaHRlcicsXG4gICAgJ0FsbHknXG5dO1xuXG5leHBvcnQgY2xhc3MgV2FyY3J5VW5pdCB7XG4gICAgX25hbWU6IHN0cmluZyA9IFwiXCI7XG4gICAgX3JvbGU6IFdhcmNyeVVuaXRSb2xlID0gV2FyY3J5VW5pdFJvbGUuTk9ORTtcbiAgICBfa2V5d29yZHM6IFNldDxzdHJpbmc+ID0gbmV3IFNldCgpO1xuXG4gICAgX2FiaWxpdGllczogTWFwPHN0cmluZywgc3RyaW5nPiA9IG5ldyBNYXAoKTtcblxuICAgIC8vIENoYXJhY3RlcmlzdGljc1xuICAgIF9tb3ZlOiBudW1iZXIgPSAxO1xuICAgIF93b3VuZHM6IG51bWJlciA9IDE7XG4gICAgX3RvdWdobmVzczogbnVtYmVyID0gMTtcblxuICAgIF93ZWFwb25zOiBXYXJjcnlXZWFwb25bXSA9IFtdO1xuIFxuICAgIF9wb2ludHM6IG51bWJlciA9IDA7XG59XG5cbmV4cG9ydCBjbGFzcyBXYXJjcnlGb3JjZSB7XG4gICAgX2NhdGFsb2c6IHN0cmluZyA9IFwiXCI7XG4gICAgX25hbWU6IHN0cmluZyA9IFwiVW5rbm93blwiO1xuICAgIF9hbGxlZ2lhbmNlOiBXYXJjcnlBbGxlZ2lhbmNlO1xuICAgIF91bml0czogV2FyY3J5VW5pdFtdID0gW107XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5fYWxsZWdpYW5jZSA9IG5ldyBXYXJjcnlBbGxlZ2lhbmNlKCk7XG4gICAgfVxufTtcblxuZXhwb3J0IGNsYXNzIFJvc3RlcldhcmNyeSB7XG4gICAgX3BvaW50czogbnVtYmVyID0gMDtcbiAgICBfbmFtZTogc3RyaW5nID0gXCJcIjtcbiAgICBfZm9yY2VzOiBXYXJjcnlGb3JjZVtdID0gW107XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcblxuICAgIH1cbn07XG5cbmZ1bmN0aW9uIExvb2t1cFJvbGUocm9sZVRleHQ6IHN0cmluZyk6IFdhcmNyeVVuaXRSb2xlIHtcbiAgICBzd2l0Y2ggKHJvbGVUZXh0KSB7XG4gICAgICAgIGNhc2UgJ0xlYWRlcic6IHJldHVybiBXYXJjcnlVbml0Um9sZS5MRUFERVI7XG4gICAgICAgIGNhc2UgJ0ZpZ2h0ZXInOiByZXR1cm4gV2FyY3J5VW5pdFJvbGUuRklHSFRFUjtcbiAgICAgICAgY2FzZSAnQWxseSc6IHJldHVybiBXYXJjcnlVbml0Um9sZS5BTExZO1xuICAgIH1cbiAgICByZXR1cm4gV2FyY3J5VW5pdFJvbGUuTk9ORTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIENyZWF0ZVdhcmNyeVJvc3Rlcihkb2M6IERvY3VtZW50KTogUm9zdGVyV2FyY3J5IHwgbnVsbCB7XG4gICAgaWYgKGRvYykge1xuICAgICAgICBsZXQgaW5mbyA9IGRvYy5xdWVyeVNlbGVjdG9yKFwicm9zdGVyXCIpO1xuICAgICAgICBpZiAoaW5mbykge1xuICAgICAgICAgICAgY29uc3Qgcm9zdGVyID0gbmV3IFJvc3RlcldhcmNyeSgpO1xuXG4gICAgICAgICAgICBjb25zdCBuYW1lID0gaW5mby5nZXRBdHRyaWJ1dGVOb2RlKFwibmFtZVwiKT8ubm9kZVZhbHVlO1xuICAgICAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICAgICAgICByb3N0ZXIuX25hbWUgPSBuYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcm9zdGVyLl9uYW1lID0gXCJBZ2Ugb2YgU2lnbWFyIFdhcmNyeSBSb3N0ZXJcIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgUGFyc2VSb3N0ZXJQb2ludHMoZG9jLCByb3N0ZXIpO1xuICAgICAgICAgICAgUGFyc2VGb3JjZXMoZG9jLCByb3N0ZXIpO1xuXG4gICAgICAgICAgICByZXR1cm4gcm9zdGVyO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBQYXJzZVJvc3RlclBvaW50cyhkb2M6IFhNTERvY3VtZW50LCByb3N0ZXI6IFJvc3RlcldhcmNyeSk6IHZvaWQge1xuICAgIGxldCBjb3N0cyA9IGRvYy5xdWVyeVNlbGVjdG9yQWxsKFwicm9zdGVyPmNvc3RzPmNvc3RcIik7XG4gICAgZm9yIChsZXQgY29zdCBvZiBjb3N0cykge1xuICAgICAgICBpZiAoY29zdC5oYXNBdHRyaWJ1dGUoXCJuYW1lXCIpICYmIGNvc3QuaGFzQXR0cmlidXRlKFwidmFsdWVcIikpIHtcbiAgICAgICAgICAgIGxldCB3aGljaCA9IGNvc3QuZ2V0QXR0cmlidXRlTm9kZShcIm5hbWVcIik/Lm5vZGVWYWx1ZTtcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IGNvc3QuZ2V0QXR0cmlidXRlTm9kZShcInZhbHVlXCIpPy5ub2RlVmFsdWU7XG4gICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAod2hpY2ggPT09IFwicHRzXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcm9zdGVyLl9wb2ludHMgPSArdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBQYXJzZUZvcmNlcyhkb2M6IFhNTERvY3VtZW50LCByb3N0ZXI6IFJvc3RlcldhcmNyeSk6IHZvaWQge1xuICAgIGxldCBmb3JjZXNSb290ID0gZG9jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJyb3N0ZXI+Zm9yY2VzPmZvcmNlXCIpO1xuICAgIGZvciAobGV0IHJvb3Qgb2YgZm9yY2VzUm9vdCkge1xuICAgICAgICBpZiAocm9vdC5oYXNBdHRyaWJ1dGUoXCJuYW1lXCIpICYmIHJvb3QuaGFzQXR0cmlidXRlKFwiY2F0YWxvZ3VlTmFtZVwiKSkge1xuXG4gICAgICAgICAgICBsZXQgZiA9IG5ldyBXYXJjcnlGb3JjZSgpO1xuXG4gICAgICAgICAgICBsZXQgd2hpY2ggPSByb290LmdldEF0dHJpYnV0ZU5vZGUoXCJuYW1lXCIpPy5ub2RlVmFsdWU7XG4gICAgICAgICAgICBsZXQgdmFsdWUgPSByb290LmdldEF0dHJpYnV0ZU5vZGUoXCJjYXRhbG9ndWVOYW1lXCIpPy5ub2RlVmFsdWU7XG5cbiAgICAgICAgICAgIGlmICh3aGljaCkge1xuICAgICAgICAgICAgICAgIGYuX25hbWUgPSB3aGljaDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGYuX2NhdGFsb2cgPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgUGFyc2VBbGxlZ2lhbmNlKHJvb3QsIGYpO1xuICAgICAgICAgICAgUGFyc2VTZWxlY3Rpb25zKHJvb3QsIGYpO1xuXG4gICAgICAgICAgICByb3N0ZXIuX2ZvcmNlcy5wdXNoKGYpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKHJvc3Rlcik7XG59XG5cbmZ1bmN0aW9uIFBhcnNlQWxsZWdpYW5jZShyb290OiBFbGVtZW50LCBmb3JjZTogV2FyY3J5Rm9yY2UpOiB2b2lkIHtcbiAgICBsZXQgYWxsZWdpYW5jZTogV2FyY3J5QWxsZWdpYW5jZSA9IG5ldyBXYXJjcnlBbGxlZ2lhbmNlKCk7XG5cbiAgICBsZXQgcnVsZXMgPSByb290LnF1ZXJ5U2VsZWN0b3JBbGwoXCJydWxlcz5ydWxlXCIpO1xuICAgIGZvciAobGV0IHJ1bGUgb2YgcnVsZXMpIHtcbiAgICAgICAgaWYgKHJ1bGUuaGFzQXR0cmlidXRlKFwibmFtZVwiKSkge1xuICAgICAgICAgICAgbGV0IHJ1bGVOYW1lID0gcnVsZS5nZXRBdHRyaWJ1dGVOb2RlKFwibmFtZVwiKT8ubm9kZVZhbHVlO1xuICAgICAgICAgICAgdmFyIGRlc2MgPSBydWxlLnF1ZXJ5U2VsZWN0b3IoXCJydWxlPmRlc2NyaXB0aW9uXCIpO1xuICAgICAgICAgICAgaWYgKHJ1bGVOYW1lICYmIGRlc2MgJiYgZGVzYy50ZXh0Q29udGVudCkge1xuICAgICAgICAgICAgICAgIGFsbGVnaWFuY2UuX3J1bGVzLnNldChydWxlTmFtZSwgZGVzYy50ZXh0Q29udGVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9ICAgXG4gICAgZm9yY2UuX2FsbGVnaWFuY2UgPSBhbGxlZ2lhbmNlO1xufVxuXG5mdW5jdGlvbiBQYXJzZVNlbGVjdGlvbnMocm9vdDogRWxlbWVudCwgZm9yY2U6IFdhcmNyeUZvcmNlKTogdm9pZCB7XG4gICAgbGV0IHNlbGVjdGlvbnMgPSByb290LnF1ZXJ5U2VsZWN0b3JBbGwoXCJmb3JjZT5zZWxlY3Rpb25zPnNlbGVjdGlvblwiKTtcblxuICAgIGZvciAobGV0IHNlbGVjdGlvbiBvZiBzZWxlY3Rpb25zKSB7XG4gICAgICAgIC8vIFdoYXQga2luZCBvZiBzZWxlY3Rpb24gaXMgdGhpc1xuICAgICAgICBsZXQgc2VsZWN0aW9uVHlwZSA9IHNlbGVjdGlvbi5nZXRBdHRyaWJ1dGVOb2RlKFwidHlwZVwiKT8ubm9kZVZhbHVlO1xuICAgICAgICBpZiAoIXNlbGVjdGlvblR5cGUpIGNvbnRpbnVlO1xuICAgICAgICBsZXQgc2VsZWN0aW9uTmFtZSA9IHNlbGVjdGlvbi5nZXRBdHRyaWJ1dGVOb2RlKFwibmFtZVwiKT8ubm9kZVZhbHVlO1xuICAgICAgICBsZXQgdW5pdCA9IFBhcnNlVW5pdChzZWxlY3Rpb24pO1xuICAgICAgICBpZiAodW5pdCAmJiAodW5pdC5fcm9sZSAhPSBXYXJjcnlVbml0Um9sZS5OT05FKSkge1xuICAgICAgICAgICAgZm9yY2UuX3VuaXRzLnB1c2godW5pdCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBTb3J0IGZvcmNlIHVuaXRzIGJ5IHJvbGUuXG4gICAgZm9yY2UuX3VuaXRzLnNvcnQoKGE6IFdhcmNyeVVuaXQsIGI6IFdhcmNyeVVuaXQpOiBudW1iZXIgPT4ge1xuICAgICAgICBpZiAoYS5fcm9sZSA+IGIuX3JvbGUpIHJldHVybiAxO1xuICAgICAgICBlbHNlIGlmIChhLl9yb2xlID09IGIuX3JvbGUpIHJldHVybiAwO1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIFBhcnNlVW5pdChyb290OiBFbGVtZW50KTogV2FyY3J5VW5pdCB7XG4gICAgbGV0IHVuaXQ6IFdhcmNyeVVuaXQgPSBuZXcgV2FyY3J5VW5pdCgpO1xuXG4gICAgbGV0IHByb2ZpbGVzID0gcm9vdC5xdWVyeVNlbGVjdG9yQWxsKFwicHJvZmlsZXM+cHJvZmlsZVwiKTtcbiAgICBmb3IgKGxldCBwcm9mIG9mIHByb2ZpbGVzKSB7XG4gICAgICAgIGxldCBwcm9mTmFtZSA9IHByb2YuZ2V0QXR0cmlidXRlTm9kZShcIm5hbWVcIik/Lm5vZGVWYWx1ZTtcbiAgICAgICAgbGV0IHByb2ZUeXBlID0gcHJvZi5nZXRBdHRyaWJ1dGVOb2RlKFwidHlwZU5hbWVcIik/Lm5vZGVWYWx1ZTtcbiAgICAgICAgaWYgKHByb2ZOYW1lICYmIHByb2ZUeXBlKSB7XG4gICAgICAgICAgICBpZiAocHJvZlR5cGUgPT0gXCJNb2RlbFwiKSB7XG4gICAgICAgICAgICAgICAgdW5pdC5fbmFtZSA9IHByb2ZOYW1lO1xuICAgICAgICAgICAgICAgIGxldCBjaGFycyA9IHByb2YucXVlcnlTZWxlY3RvckFsbChcImNoYXJhY3RlcmlzdGljcz5jaGFyYWN0ZXJpc3RpY1wiKTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBjaGFyIG9mIGNoYXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjaGFyTmFtZSA9IGNoYXIuZ2V0QXR0cmlidXRlTm9kZShcIm5hbWVcIik/Lm5vZGVWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXJOYW1lICYmIGNoYXIudGV4dENvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoY2hhck5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdNb3ZlJzogdW5pdC5fbW92ZSA9ICtjaGFyLnRleHRDb250ZW50OyBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdXb3VuZHMnOiB1bml0Ll93b3VuZHMgPSArY2hhci50ZXh0Q29udGVudDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnVG91Z2huZXNzJzogdW5pdC5fdG91Z2huZXNzID0gK2NoYXIudGV4dENvbnRlbnQ7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocHJvZlR5cGUgPT0gXCJXZWFwb25cIikge1xuICAgICAgICAgICAgICAgIGxldCB3ZWFwb24gPSBuZXcgV2FyY3J5V2VhcG9uKCk7XG4gICAgICAgICAgICAgICAgd2VhcG9uLl9uYW1lID0gcHJvZk5hbWU7XG4gICAgICAgICAgICAgICAgbGV0IGNoYXJzID0gcHJvZi5xdWVyeVNlbGVjdG9yQWxsKFwiY2hhcmFjdGVyaXN0aWNzPmNoYXJhY3RlcmlzdGljXCIpO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGNoYXIgb2YgY2hhcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNoYXJOYW1lID0gY2hhci5nZXRBdHRyaWJ1dGVOb2RlKFwibmFtZVwiKT8ubm9kZVZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hhck5hbWUgJiYgY2hhci50ZXh0Q29udGVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChjaGFyTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ1JhbmdlJzogd2VhcG9uLl9yYW5nZSA9IGNoYXIudGV4dENvbnRlbnQ7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ0F0dGFja3MnOiB3ZWFwb24uX2F0dGFja3MgPSBjaGFyLnRleHRDb250ZW50OyBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdTdHJlbmd0aCc6IHdlYXBvbi5fc3RyZW5ndGggPSBjaGFyLnRleHRDb250ZW50OyBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdEYW1hZ2UnOiB3ZWFwb24uX2RhbWFnZSA9IGNoYXIudGV4dENvbnRlbnQ7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHVuaXQuX3dlYXBvbnMucHVzaCh3ZWFwb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJVbmtub3duIHVuaXQgcHJvZmlsZSB0eXBlOiBcIiArIHByb2ZUeXBlKTsgIFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgbGV0IGNvc3RzID0gcm9vdC5xdWVyeVNlbGVjdG9yQWxsKFwiY29zdHM+Y29zdFwiKTtcbiAgICBmb3IgKGxldCBjb3N0IG9mIGNvc3RzKSB7XG4gICAgICAgIGlmIChjb3N0Lmhhc0F0dHJpYnV0ZShcIm5hbWVcIikgJiYgY29zdC5oYXNBdHRyaWJ1dGUoXCJ2YWx1ZVwiKSkge1xuICAgICAgICAgICAgbGV0IHdoaWNoID0gY29zdC5nZXRBdHRyaWJ1dGVOb2RlKFwibmFtZVwiKT8ubm9kZVZhbHVlO1xuICAgICAgICAgICAgbGV0IHZhbHVlID0gY29zdC5nZXRBdHRyaWJ1dGVOb2RlKFwidmFsdWVcIik/Lm5vZGVWYWx1ZTtcbiAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmICh3aGljaCA9PT0gXCJwdHNcIikge1xuICAgICAgICAgICAgICAgICAgICB1bml0Ll9wb2ludHMgKz0gK3ZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGxldCBjYXRlZ29yaWVzID0gcm9vdC5xdWVyeVNlbGVjdG9yQWxsKFwiOnNjb3BlIGNhdGVnb3JpZXM+Y2F0ZWdvcnlcIik7XG4gICAgZm9yIChsZXQgY2F0ZWdvcnkgb2YgY2F0ZWdvcmllcykge1xuICAgICAgICBsZXQgY2F0TmFtZSA9IGNhdGVnb3J5LmdldEF0dHJpYnV0ZU5vZGUoXCJuYW1lXCIpPy5ub2RlVmFsdWU7XG4gICAgICAgIGxldCBjYXRQcmltYXJ5ID0gY2F0ZWdvcnkuZ2V0QXR0cmlidXRlTm9kZShcInByaW1hcnlcIik/Lm5vZGVWYWx1ZTtcbiAgICAgICAgaWYgKGNhdE5hbWUpIHtcbiAgICAgICAgICAgIGNvbnN0IHJvbGVUZXh0ID0gY2F0TmFtZS50cmltKCk7XG4gICAgICAgICAgICB2YXIgdW5pdFJvbGUgPSBMb29rdXBSb2xlKHJvbGVUZXh0KTtcbiAgICAgICAgICAgIGlmICh1bml0Um9sZSAhPSBXYXJjcnlVbml0Um9sZS5OT05FKSB7XG4gICAgICAgICAgICAgICAgdW5pdC5fcm9sZSA9IHVuaXRSb2xlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gS2V5d29yZFxuICAgICAgICAgICAgICAgIHVuaXQuX2tleXdvcmRzLmFkZChjYXROYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB1bml0O1xufSJdLCJzb3VyY2VSb290IjoiIn0=